import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.*;
import java.lang.*;
import java.io.*;


public class Learn {
    /*
    题目1:最长回文子串
    找到字符串s中最长的回文子串并返回

    思路:Manacher算法,扩展串的回文半径和真实回文长度的关系:回文半径p[i]-1=真实回文长度
    扩展回文串结尾下标和真实回文串终止位置的对应:真实回文串终止位置=扩展回文串结尾下标/2
     */
    public static int MAXN = 1001;
    public static char[] ss = new char[MAXN << 1];
    public static int[] p = new int[MAXN << 1];
    public static int n,max,end;
    public static void manacher(String str){
        manacherss(str.toCharArray());
        max = end = 0;
        for(int i = 0,c = 0,r = 0,len;i < n;i++){
            len = r > i ? Math.min(r - i,p[2 * c - i]) : 1;
            while(i + len < n && i - len >= 0 && ss[i + len] == ss[i - len]){
                len++;
            }
            if(i + len > r){
                r = i + len;
                c = i;
            }
            if(len > max){
                //真实回文长度
                max = len - 1;
                //扩展回文串下标 = i+len-1
                end = (i + len - 1) / 2;
            }
            p[i] = len;
        }
    }
    public static void manacherss(char[] a){
        n = a.length * 2 + 1;
        for(int i = 0,j = 0;i < n;i++){
            ss[i] = (i & 1) == 0 ? '#' : a[j++];
        }
    }
    public String longestPalindrome(String s) {
        manacher(s);
        return s.substring(end - max,end);
    }
}
