import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.*;
import java.lang.*;
import java.io.*;


public class Learn {
    /*
    题目2:回文子串的数量
    给你一个字符串 s ，请你统计并返回这个字符串中 回文子串 的数目。
    回文字符串 是正着读和倒过来读一样的字符串。
    子字符串 是字符串中的由连续字符组成的一个序列。

    思路:使用Manacher算法,得到p表,然后将表中所有的值/2相加就是答案
    相当于就是对于每一个字符,向左右能延伸多少长度在当前字符就有多少的回文串
    但是此时ss数组中夹杂了#,所以要除以2
     */
    public static int MAXN = 1001;
    public static char[] ss = new char[MAXN << 1];
    public static int[] p = new int[MAXN << 1];
    public static int n;
    public static void manacher(String str){
        manacherss(str.toCharArray());
        for(int i = 0,c = 0,r = 0,len;i < n;i++){
            len = r > i ? Math.min(r - i,p[2 * c - i]) : 1;
            while(i + len < n && i - len >= 0 && ss[i + len] == ss[i - len]){
                len++;
            }
            if(i + len > r){
                r = i + len;
                c = i;
            }
            p[i] = len;
        }
    }
    public static void manacherss(char[] a){
        n = a.length * 2 + 1;
        for(int i = 0,j = 0;i < n;i++){
            ss[i] = (i & 1) == 0 ? '#' : a[j++];
        }
    }
    public int countSubstrings(String s) {
        manacher(s);
        int ans = 0;
        for(int i = 0;i < 2 * s.length() + 1;i++){
            ans += p[i] / 2;
        }
        return ans;
    }
}
