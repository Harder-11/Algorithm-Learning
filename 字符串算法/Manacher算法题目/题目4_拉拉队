import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.*;
import java.lang.*;
import java.io.*;


public class Learn {
    /*
    题目4:拉拉队排练(p1659)
    给定一个字符串s和数值k,只关心所有奇数长度的回文子串
    返回其中长度前k名的回文子串的长度乘积是多少,如果奇数长度的回文串个数不够k,返回-1
    答案除以19930726的余数是多少就行了
    其中n<=1e6,k<=1e12

    思路:Manacher算法得到p数组,然后就能求到回文子串的长度,然后答案显而易见
    要注意中心个数为k的回文串同时包含了k-2,k-4....长度的回文串
     */
    public static int MOD = 19930726;
    public static int MAXN = 10000001;
    public static String[] mk;
    public static int m,n;
    public static long k;
    public static char[] ss = new char[MAXN << 1];
    public static int[] p = new int[MAXN << 1];
    public static int[] cnt = new int[MAXN];
    //此时通过manacher算法得到p数组,并且只关心i=2k+1位置的值
    //因为#扩展出来的回文串都是偶数长度
    public static long power(long x,long n){
        long ans = 1;
        while(n > 0){
            if((n & 1) == 1){
                ans = (ans * x) % MOD;
            }
            x = (x * x) % MOD;
            n >>= 1;
        }
        return ans;
    }
    public static int compute(String s){
        manacher(s);
        for(int i = 1;i < n;i += 2){
            //半径-1就是真实的回文串长度
            cnt[p[i] - 1]++;
        }
        long ans = 1;
        long sum = 0;
        //为什么这里len要判断m奇偶性?
        //因为当长度m是偶数时,中心扩展的最大长度最大就是m,但是本题只要奇数长度的,所以
        //当m是偶数那么就从m-1开始往前某次-=2
        for(int len = (m & 1) == 1 ? m : (m - 1);len >= 0 && k >= 0;len -= 2){
            sum += cnt[len];
            ans = (ans * power(len,Math.min(k,sum))) % MOD;
            k -= sum;
        }
        return k < 0 ? (int) ans : -1;
    }
    public static void manacher(String s){
        manacherss(s.toCharArray());
        for(int i = 0,c = 0,r = 0,len;i < n;i++){
            len = r > i ? Math.min(r - i,p[2 * c - i]) : 1;
            while(i + len < n && i - len >= 0 && ss[i + len] == ss[i - len]){
                len++;
            }
            if(i + len > r){
                r = i + len;
                c = i;
            }
            p[i] = len;
        }
    }
    public static void manacherss(char[] a){
        n = a.length * 2 + 1;
        for(int i = 0,j = 0;i < n;i++){
            ss[i] = (i & 1) == 0 ? '#' : a[j++];
        }
    }

    public static void main(String[] args) throws IOException{
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));
        mk = in.readLine().split(" ");
        m = Integer.valueOf(mk[0]);
        k = Long.valueOf(mk[1]);
        System.out.println(compute(in.readLine()));
        out.flush();
        out.close();
        in.close();
    }
}
