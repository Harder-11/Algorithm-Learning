import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.*;
import java.lang.*;
import java.io.*;


public class Learn {
    /*
    字符串哈希
    如何得到整个函数的哈希值?如何快速得到字符串中任意子串的哈希值?
    哈希函数:把复杂样本变成数字,以后复杂样本间的比较就成了数字之间的对比
    哈希函数的基本特征:
    (1)输入参数的可能性的无限的,输出的值的范围相对有限
    (2)输入同样的样本一定得到同样的输出值,也就是哈希函数没有任何随机的机制
    (3)输入不同的样本也可以得到相同的输出值,此时叫哈希碰撞
    (4)输入大量不同的样本,得到的大量输出值,会几乎均匀的分布在整个输出域上
    对于碰撞,由于是通过long-64来存储,那么可以存的不同字符串的个数在2^64级别,所以遇到碰撞的概率极小
    总之就是一堆不同的输入,得到的结果从分布上看,熵最大

    字符串哈希:如何得到整个字符串的哈希值
    (1)理解long类型自然溢出,计算加,减,乘时,自然溢出后的状态等同于对2^64取余的值状态
    (2)字符串转化为base进制的数字,并让其自然溢出
    (3)base可以选择一些质数,比如433,499,599,1000000007
    也可以选择一些已经被证实的比较好用的值比如31,131,1313,13131,131313等
    建议选择质数,不要选经典值,防止被出题人刻意构造碰撞
    (4)转化时让每一位的值从1开始,不从0开始,这样就得到了一个long类型的数字代表的字符串
    (5)利用数字的比较去代替字符串的比较,可以大大减小复杂度

    自然溢出:相当于对2^64取余,比如说对于4位的数做加减法,让其自然溢出相当于对2^4取余
    例如9+10-7,此时9+10二进制位是1001+1010,此时会加到第五位上,就让其自然溢出,得到0011
    然后减去0111,借位得到1100,也就是12,和原本9+10-7的答案是一样的
     */

    /*
    例题1:统计有多少个不同的字符串
    输入:第一行包含一个整数N,为字符串的个数,接下来N行每行一个字符串,为所提供的字符串
     */
    public static int MAXN = 10001;
    //选择一个质数作为进制
    public static int base = 499;
    public static long nums[] = new long[MAXN];
    public static int n;
    public static long value(char[] s){
        long ans = v(s[0]);
        for(int i = 1;i < s.length;i++){
            ans = ans * base + v(s[i]);
        }
        return ans;
    }
    //数字 + 大写 + 小写
    //'0'->1
    //'1'->2
    //...
    //'9'->10
    //'A'->11
    //....
    //'a'->36
    public static int v(char c){
        if(c >= '0' && c <= '9'){
            return c - '0' + 1;
        } else if(c >= 'A' && c <= 'Z'){
            return c - 'A' + 11;
        } else {
            return c - 'a' + 37;
        }
    }
    public static int cnt(){
        Arrays.sort(nums,0,n);
        int ans = 1;
        for(int i = 1;i < n;i++){
            if(nums[i] != nums[i - 1]){
                ans++;
            }
        }
        return ans;
    }
    public static void main(String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StreamTokenizer in = new StreamTokenizer(br);
        PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));
        n = Integer.valueOf(br.readLine());
        for(int i = 0;i < n;i++){
            nums[i] = value(br.readLine().toCharArray());
        }
        System.out.println(cnt());
        out.flush();
        out.close();
        br.close();

    }
    /*
    题目2:独特子串的数量
    给你一个由数字组成的字符串 s，返回 s 中独特子字符串数量
    其中的每一个数字出现的频率都相同。
     */
    public int equalDigitFrequency(String str) {
        long base = 499;
        char[] s = str.toCharArray();
        int n = s.length;
        HashSet<Long> set = new HashSet<>();
        int[] cnt = new int[10];
        for(int i = 0;i < n;i++){
            Arrays.fill(cnt,0);
            //计算每个子串的哈希值
            //将Hash值扔进set中
            long hashCode = 0;
            //maxCnt:最大词频
            //maxCntKinds:拥有最大词频的字符数量
            //allKinds:一共发现了多少种不同字符
            int curVal = 0,maxCnt = 0,maxCntKinds = 0,allKinds = 0;
            for(int j = i;j < n;j++){
                curVal = s[j] - '0';
                //这里+1是为了让每个字符的hash值从1开始一直到10
                hashCode = hashCode * base + curVal + 1;
                cnt[curVal]++;
                if(cnt[curVal] == 1){
                    allKinds++;
                }
                //此时刷新了最大词频,那么此时最大词频的字符数量就是更新为1
                if(cnt[curVal] > maxCnt){
                    maxCnt = cnt[curVal];
                    maxCntKinds = 1;
                } else if(cnt[curVal] == maxCnt){
                    maxCntKinds++;
                }
                if(maxCntKinds == allKinds){
                    set.add(hashCode);
                }
            }
        }
        return set.size();
    }
}
