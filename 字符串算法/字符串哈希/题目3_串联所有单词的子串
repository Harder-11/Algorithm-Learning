import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.*;
import java.lang.*;
import java.io.*;


public class Learn {
    /*
    题目2:串联所有单词的子串
    给定一个字符串 s 和一个字符串数组 words。 words 中所有字符串 长度相同。
    s 中的 串联子串 是指一个包含 words中所有字符串以任意顺序排列连接起来的子串。
    例如，如果 words = ["ab","cd","ef"]，
    那么"abcdef","abefcd","cdabef","cdefab","efabcd",和 "efcdab"都是串联子串
    ,"acdbef" 不是串联子串，因为他不是任何 words 排列的连接。
    返回所有串联子串在 s 中的开始索引。你可以以 任意顺序 返回答案。

    思路:将word数组中的String全部转化为long类型的数字
    然后对于s字符串,使用滑动窗口,假设word数组的长度都是n,将s看做长度为n拼接起来的
    串,然后每次窗口往后滑动n,窗口大小为word.length*n,然后判断窗口内时候所有的
    word对应的数字是否都有.从0~n-1循环,表示开始滑动窗口的位置不同
    那怎么知道窗口内包含了所有的数字?
    --使用一个欠债表,表示差的数字,用debt变量记录还差几个,用window(map)表示此时窗口中的
    数字各有几个,如果填上某个数字之后,该数字在window此时的词频 <= map的词频,
    那么debt--,否则debt不变
     */
    public static int MAXN = 10001;
    public static int base = 499;
    public static long[] pow = new long[MAXN];
    public static long[] hash = new long[MAXN];
    public static void build(String str){
        pow[0] = 1;
        for(int i = 1;i < MAXN;i++){
            pow[i] = pow[i - 1] * base;
        }
        hash[0] = str.charAt(0) - 'a' + 1;
        for(int j = 1;j < str.length();j++){
            hash[j] = hash[j - 1] * base + str.charAt(j) - 'a' + 1;
        }
    }
    //后面的r是直接r = l + wordLen,所以直接跳到了本单词的后一个位置,所以这里r都要-1
    public static long hash(int l,int r){
        long ans = hash[r - 1];
        if(l > 0){
            ans -= hash[l - 1] * pow[r - l];
        }
        return ans;
    }
    //计算一个字符串的哈希值
    public static long hash(String str){
        if(str.equals(" ")){
            return 0;
        }
        int n = str.length();
        long ans = str.charAt(0) - 'a' + 1;
        for(int j = 1;j < n;j++){
            ans = ans * base + str.charAt(j) - 'a' + 1;
        }
        return ans;
    }
    public List<Integer> findSubstring(String s, String[] words) {
        List<Integer> ans = new ArrayList<>();
        if(s == null || s.length() == 0 || words == null || words.length == 0){
            return ans;
        }
        HashMap<Long,Integer> map = new HashMap<>();
        for(String key : words){
            long v = hash(key);
            map.put(v,map.getOrDefault(v,0) + 1);
        }
        build(s);
        int n = s.length();
        int wordLen = words[0].length();
        int wordNum = words.length;
        int allLen = wordLen * wordNum;
        HashMap<Long,Integer> window = new HashMap<>();
        for(int init = 0;init < wordLen && init + allLen <= n;init++){
            int debt = wordNum;
            for(int l = init,r = init + wordLen,part = 0;part < wordNum;l += wordLen,r += wordLen,part++){
                long cur = hash(l,r);
                window.put(cur,window.getOrDefault(cur,0) + 1);
                if(window.get(cur) <= map.getOrDefault(cur,0)){
                    debt--;
                }
            }
            if(debt == 0){
                ans.add(init);
            }
            for(int l1 = init,r1 = init + wordLen,l2 = init + allLen,r2 = init + allLen
            + wordLen;r2 <= n;l1 += wordLen,r1 += wordLen,l2 += wordLen,r2 += wordLen){
                long out = hash(l1,r1);
                long in = hash(l2,r2);
                window.put(out,window.get(out) - 1);
                if(window.get(out) < map.getOrDefault(out,0)){
                    debt++;
                }
                window.put(in,window.getOrDefault(in,0) + 1);
                if(window.get(in) <= map.getOrDefault(in,0)){
                    debt--;
                }
                if(debt == 0){
                    ans.add(r1);
                }
            }
            window.clear();
        }
        return ans;
    }
}
