import java.io.*;
import java.math.BigInteger;
import java.util.*;


public class learn {
    //二维差分:批量做如下的操作:每个操作有独立的a,b,c,d,v,对于方法void add(a,b,c,d,v):
    //从左上角(a,b)到右下角(c,d)范围上,每个数字+v,怎么快速处理?操作完后,怎么正确得到二维数组中每个位置的值
    //在add时候快速处理,最后build得到每个位置的值,修改才做必须集中在一起,不能一边修改一边查询
    //add方法实现比较巧妙,build方法实现和处理前缀和比较类似
    //真实数据用一圈0包裹起来,可以减少边界情况的讨论
    //步骤:比如说从(1,1) -> (2,2)都加3,那么在(1,1)+3,在(3,1)-3,在(1,3)-3,在(3,3)+3,然后计算前缀和
    //本质就是对于(a,b)->(c,d)范围内,将(a,b) + v,(a,d + 1) -v,(c + 1,b) -v,(c + 1,d + 1) +v;
    //由于差分需要再范围的右边和下边都+v,所以要将数组的四周都补上0
    public static int MAXN= 1005;
    public static int MAXM = 1005;
    public static long[][] diff = new long[MAXN][MAXM];
    public static int n,m,q;
    public static void add(int a,int b,int c,int d,int k){
        diff[a][b] += k;
        diff[c + 1][b] -= k;
        diff[a][d + 1] -= k;
        diff[c + 1][d + 1] += k;
    }
    public static void build(){
        for(int i = 1;i <= n;i++){
            for(int j = 1;j <= m;j++){
                diff[i][j] += diff[i - 1][j] + diff[i][j - 1] - diff[i - 1][j - 1];
            }
        }
    }
    public static void clear(){
        for(int i = 1;i <= n + 1;i++){
            for(int j = 1;j <= m + 1;j++){
                diff[i][j] = 0;
            }
        }
    }

    public static void main(String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StreamTokenizer in = new StreamTokenizer(br);
        PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));
        while(in.nextToken() != StreamTokenizer.TT_EOF){
            n = (int) in.nval;
            in.nextToken();
            m = (int) in.nval;
            in.nextToken();
            q = (int) in.nval;
            for(int i = 1;i <= n;i++){
                for(int j = 1;j <= m;j++){
                    in.nextToken();
                    add(i,j,i,j,(int) in.nval);
                }
            }
            for(int i = 1,a,b,c,d,k;i <= n;i++){
                in.nextToken(); a = (int) in.nval;
                in.nextToken(); b = (int) in.nval;
                in.nextToken(); c = (int) in.nval;
                in.nextToken(); d = (int) in.nval;
                in.nextToken(); k = (int) in.nval;
                add(a,b,c,d,k);
            }
            build();
        }
        for(int i = 1;i <= n;i++){
            out.print(diff[i][1]);
            for(int j = 2;j <= m;j++){
                out.print(" " + diff[i][j]);
            }
            out.println();
        }
        clear();
        out.flush();
        out.close();
        br.close();
    }
    /*
    例题:用邮票贴满网络图
    每年一个m *n的二进制矩阵grid
    每个格子要么为0(空),要么为1(被占据),给你的邮票尺寸为stampHeight * stampWidth
    我们想将邮票贴进二进制矩阵中,且满足一下要求:覆盖所有的空格子,不覆盖任何被占据的格子
    可以放入任意数目的邮票,邮票可以相互有重叠部分,邮票不允许旋转,邮票必须完全在矩阵内
    在上述要求满足的前提下,可以放入邮票,返回true,否则返回false

    思路:遍历,每次遇到0,通过Height和Width可以求出右下角的坐标,然后算出从该点到右下角的累加和
    ,如果是0就能贴,否则就不能贴,然后自己创建一个差分数组,当满足上述条件,就对该子矩阵进行差分处理,
    然后贴完了之后,然后依次看原数组0位置在差分数组中是否大于0,如果差分数组和元素组在同一位置都是0
    的话,那么就不满足,否则就满足
     */
    public static boolean possibleToStamp(int[][] grid,int stampHeight,int stampWidth){
        int n = grid.length;
        int m = grid[0].length;
        int[][] sum = new int[n + 1][m + 1];
        for(int i = 0;i < n;i++){
            for(int j = 0;j < m;j++){
                sum[i + 1][j + 1] = grid[i][j];
            }
        }
        build(sum);
        int[][] diff = new int[n + 2][m + 2];
        for(int a = 1,c = a + stampHeight - 1;c <= n;a++,c++){
            for(int b = 1,d = b + stampWidth - 1;d <= m;b++,d++){
                if(sumRegion(sum,a,b,c,d) == 0){
                    add(diff,a,b,c,d);
                }
            }
        }
        build(diff);
        for(int i = 0;i < n;i++){
            for(int j = 0;j < m;j++){
                if(grid[i][j] == 0 && diff[i + 1][j + 1] == 0){
                    return false;
                }
            }
        }
        return true;
    }
    public static void build(int[][] m){
        for(int i = 1;i < m.length;i++){
            for(int j = 1;j < m[0].length;j++){
                m[i][j] += m[i - 1][j] + m[i][j - 1] - m[i - 1][j - 1];
            }
        }
    }
    public static int sumRegion(int[][] sum,int a,int b,int c,int d){
        return sum[c][d] - sum[c][b - 1] - sum[a - 1][d] + sum[a - 1][b - 1];
    }
    public static void add(int[][] diff,int a,int b,int c,int d){
        diff[a][b]++;
        diff[a][d + 1]--;
        diff[c + 1][b]--;
        diff[c + 1][d + 1]++;
    }
}

