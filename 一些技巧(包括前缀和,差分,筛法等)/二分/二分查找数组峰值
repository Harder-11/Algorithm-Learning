//二分搜索数组的峰值,返回任意一个峰值点
//假设数组的-1,n位置都是-INF,所以0和n - 1也可以是峰值,数组中任意相邻的数不等
//只要开头上扬,结尾下降,那么中间至少有一个峰值,如果0位置不是峰值,n-1不是峰值,那么1~n-2一定有峰值
//那么取mid = (r + l) >> 1,如果arr[mid]的左边的数大于arr[mid],那么这里又是下降趋势,说明在l到mid又有峰值
//反之也一样,如果右边的更大,那么在mid到r之间有峰值,那么就可以二分,如果两边都大,那么随便搜一边就可以
import java.util.*;

public class Main {
    public static int findPeakElement(int[] arr){
        int n = arr.length;
        if(arr.length == 1) return 0;
        if(arr[0] > arr[1]) return 0;//单独验证0和n - 1位置是否为峰值点,再在1~n-2之间查找
        if(arr[n - 1] > arr[n - 2]) return n - 1;
        int l = 1,r = n - 2,m = 0;
        while(l <= r){
            m = (l + r) >> 1;
            if(arr[m - 1] > arr[m]) r = m - 1;
            else if(arr[m + 1] > arr[m]) l = m + 1;
            else {
                return m;
            }
        }
        return -1;//这个代码不会执行到,只是为了填一个返回值
    }
    public static void main(String[] args) {
        int[] arr = {1,2,3,4,6,5,7,8};//随意找一个,由于首先判断的两端点,所以答案是7
        int ans = findPeakElement(arr);
        System.out.println(ans);
    }
}