//归并分治--小和问题
//给定一个数组,求出每个元素左边比它小或者等于的元素之和的和
/*
比如s = [1,3,5,2,4,6],所有的小和为0,1,4,1,6,15,总和就为27;
 */

//考虑分治的原理:思考一个问题在大部分的答案是否等于左部分答案+右部分答案+跨越左右的答案
//比如上述的s数组,0-5下标的小和就是0~2的小和 + 3~5的小和 + 左跨右的小和
//0~2的小和是指1右边有2个数比1大,3右边有1个数比3大,有0个数比5打,同理3~5的小和,左跨右是指左边的一个数对于右边的数

import java.io.*;
import java.util.*;

public class Main {

    public static int MAXN = 100001;
    public static int[] arr = new int[MAXN];
    public static int[] help = new int[MAXN];
    public static int n;
    public static void main(String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StreamTokenizer in = new StreamTokenizer(br);
        PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));
        while(in.nextToken() != StreamTokenizer.TT_EOF){
            n = (int) in.nval;
            for(int i = 0;i < n;++i){
                in.nextToken();
                arr[i] = (int) in.nval;
            }
            out.println(smallSum(0,n - 1));
        }
        out.flush();
        out.close();
    }
    //由于小和之和在数据量大时会很大,所以用long类型接收
    //返回arr[l~r]上小和的累加和,同时排序
    public static long smallSum(int l,int r){
        if(l == r) return 0;
        int m = (r + l) >> 1;
        return smallSum(l,m) + smallSum(m + 1,r) + merge(l,m,r);
    }
    //返回跨左右产生的小和累加和,同时将数组排序
    //第一次merge左右两边都只有一个元素
    public static long merge(int l,int m,int r){
        long ans = 0;
        for(int j = m + 1,i = l,sum = 0;j <= r;++j){
            while(i <= m && arr[i] <= arr[j]){
                sum += arr[i++];
            }
            ans += sum;
        }
        //正常merge(排序)
        int i = l,a = l,b = m + 1;
        while(a <= m && b <= r){
            help[i++] = arr[a] <= arr[b] ? arr[a++] : arr[b++];
        }
        while(a <= m){
            help[i++] = arr[a++];
        }
        while(b <= r){
            help[i++] = arr[b++];
        }
        for(int j = l;j <= r;++j){
            arr[j] = help[j];
        }
        return ans;
    }
}