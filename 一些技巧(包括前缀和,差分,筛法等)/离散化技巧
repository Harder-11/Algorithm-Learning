import java.io.*;
import java.math.BigInteger;
import java.util.*;


public class learn {
    //离散化技巧
    /*
    小扣在探索丛林的过程中，无意间发现了传说中“落寞的黄金之都”。而在这片建筑废墟的地带中，小扣使用探测仪监测到了存在某种带有「祝福」效果的力场。
    经过不断的勘测记录，小扣将所有力场的分布都记录了下来。
    forceField[i] = [x,y,side] 表示第 i 片力场将覆盖以坐标 (x,y) 为中心，边长为 side 的正方形区域。
    若任意一点的 力场强度 等于覆盖该点的力场数量，请求出在这片地带中力场强度最强处的力场强度。
    注意：力场范围的边缘同样被力场覆盖。

    本质就是求正方形重叠的最大层数,但是由于side表示正方形的边长,所以当side为奇数时会出现小数.5
    所以此时需要离散化处理,对于每个正方形的最左处变为(x << 1) - side,最右处变成(x << 1) + side
    相当于把图扩大了两倍,因为以前的最左处是x - side / 2,然后最上和最下分别变成(y << 1) + side和(y << 1) - side
    然后为了防止由于数字过大而开辟过大的数组超出内存限制,就从左到右所有的力场x方向的坐标都拿出来,排完序后去重,然后从1开始依次编号
    同理,把y方向的收集起来
     */
    public static int fieldOfGreatestBlessing(int[][] fields){
        int n = fields.length;
        //n:矩形的个数,所以x有2 * n个坐标
        long[] xs = new long[n << 1];
        long[] ys = new long[n << 1];
        for(int i = 0,k = 0,p = 0;i < n;i++){
            long x = fields[i][0];
            long y = fields[i][1];
            long r = fields[i][2];
            xs[k++] = (x << 1) - r;
            xs[k++] = (x << 1) + r;
            ys[p++] = (y << 1) + r;
            ys[p++] = (y << 1) - r;
        }
        //排完序后去重的有效长度
        int sizex = sort(xs);
        int sizey = sort(ys);
        int[][] diff = new int[sizex + 2][sizey + 2];
        for(int i = 0,a,b,c,d;i < n;i++){
            long x = fields[i][0];
            long y = fields[i][1];
            long r = fields[i][2];
            a = rank(xs,(x << 1) - r,sizex);
            b = rank(ys,(y << 1) - r,sizey);
            c = rank(xs,(x << 1) + r,sizex);
            d = rank(ys,(y << 1) + r,sizey);
            add(diff,a,b,c,d);
        }
        int ans = 0;
        for(int i = 1;i < diff.length;i++){
            for(int j = 1;j < diff[0].length;j++){
                diff[i][j] += diff[i][j - 1] + diff[i - 1][j] - diff[i - 1][j - 1];
                ans = Math.max(ans,diff[i][j]);
            }
        }
        return ans;
    }
    //关于sort方法,先排序,然后去重
    public static int sort(long[] nums){
        Arrays.sort(nums);
        int size = 1;
        for(int i = 1;i < nums.length;i++){
            if(nums[i] != nums[size - 1]){
                nums[size++] = nums[i];
            }
        }
        return size;
    }
    //nums是有序数组,并且有效长度是size,没有重复值
    public static int rank(long[] nums,long v,int size){
        int l = 0;
        int r = size - 1;
        int m,ans = 0;
        while(l <= r){
            m = (l + r) >> 1;
            if(nums[m] >= v){
                ans = m;
                r = m - 1;
            } else {
                l = m + 1;
            }
        }
        //下标是1开始的,所以+1
        return ans + 1;
    }
    public static void add(int[][] diff,int a,int b,int c,int d){
        diff[a][b]++;
        diff[c + 1][d + 1]++;
        diff[a][d + 1]--;
        diff[c + 1][b]--;
    }
}
