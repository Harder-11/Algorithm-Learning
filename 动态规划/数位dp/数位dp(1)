import java.util.*;
import java.lang.*;
import java.io.*;


public class Learn {
    /*
    数位dp,数位dp绝大多数都是线性展开,类似从左往右的尝试
    解决数位dp推荐使用记忆化搜索,可能性展开会很好写,不必刻意追求进一步改写
    递归写出来问题就解决了,位数多就挂缓存,位数不多甚至不同挂缓存也能过
     */
    /*
    题目1:统计各位数字都不同的数字个数
    给你一个整数 n ，统计并返回各位数字都不同的数字 x 的个数，其中 0 <= x < 10^n
    0 <= n <= 8
    因为对于n(n>=2)位数,首位都是不能选0,所以单独算第一位,9 * 剩下两位选,
    所以是9 * A9(n-1)
     */
    public int countNumbersWithUniqueDigits(int n) {
        if(n == 0) return 1;
        int ans = 10;
        //n==1:10
        //n==2:9 * 9;(9 * A91)
        //n==3:9 * 9 * 8(9 * A92)
        //n==4:9 * 9 * 8 * 7(9 * A93)
        for(int s = 9,i = 9,k = 2;k <= n;i--,k++){
            s *= i;
            ans += s;
        }
        return ans;
    }
    /*
    题目2:最大为n的数字组合
    给定一个按 非递减顺序 排列的数字数组 digits 。
    你可以用任意次数 digits[i] 来写的数字。
    例如，如果 digits = ['1','3','5']，
    我们可以写数字，如 '13', '551', 和 '1351315'。
    返回 可以生成的小于或等于给定整数 n 的正整数的个数 。

    一共有以下可能性:
    (1)不选一些数字然后是位数<n,此时可以随便选
    (2)在位数一样的前提下,同一位比n小,此时后面的数可以随便选
    (3)在位数一样的前提下,同一位和n一样,那么后面的数选择会受到限制
     */
    public int atMostNGivenDigitSet(String[] strs, int num) {
        //此时len来记录num的长度,offset是为了便于取到num的每一位上是数
        //此时每一位就是num / offset % 10
        int tmp = num / 10;
        int len = 1;
        int offset = 1;
        while(tmp > 0){
            tmp /= 10;
            len++;
            offset *= 10;
        }
        int m = strs.length;
        int[] digits = new int[m];
        for(int i = 0;i < m;i++){
            digits[i] = Integer.valueOf(strs[i]);
        }
        return f(digits,num,offset,len,0,0);
    }
    //digits:表示所有可以选择的数字
    //len:还剩下len位没有决定
    //如果之前的位已经比num小,那么free=1,表示接下来的数字可以随便选
    //如果之前的位和num一样,那么free=0,表示接下来的数字不能大于num当前位的数字
    //如果之前的位没有使用过数字,fix==0
    //如果之前的位已经使用过数字,那么fix==1
    //返回最终<=num的可能性有多少种
    public static int f(int[] digit,int num,int offset,int len,int free,int fix){
        if(len == 0){
            return fix == 1 ? 1 : 0;
        }
        int ans = 0;
        int cur = (num / offset) % 10;
        //继续不选数字,考察后续的可能性
        if(fix == 0){
            ans += f(digit,num,offset / 10,len - 1,1,0);
        }
        if(free == 0){
            for(int i : digit){
                if(i < cur){
                    ans += f(digit,num,offset / 10,len - 1,1,1);
                } else if(i == cur){
                    ans += f(digit,num,offset / 10,len - 1,0,1);
                } else {
                    break;
                }
            }
        } else {
            //可以在digit里面随便选,所以乘以digit.length
            ans += digit.length * f(digit,num,offset / 10,len - 1,1,1);
        }
        return ans;
    }
    /*
    题目3:统计整数数目
    给你两个数字字符串 num1 和 num2 ，以及两个整数 max_sum 和 min_sum 。
    如果一个整数 x 满足以下条件，我们称它是一个好整数：
    num1 <= x <= num2
    min_sum <= digit_sum(x) <= max_sum.
    请你返回好整数的数目。答案可能很大，请返回答案对 10^9 + 7 取余后的结果。
    注意，digit_sum(x) 表示 x 各位数字之和。
    num1,num2都是<=10^22
     */
    public static int MOD = (int)1e9 + 7;
    public static int MAXN = 23;
    public static int MAXM = 401;
    public static int[][][] dp = new int[MAXN][MAXM][2];
    public static char[] num;
    public static int min,max,len;
    public static void build(){
        for(int i = 0;i < len;i++){
            for(int j = 0;j <= max;j++){
                dp[i][j][0] = -1;
                dp[i][j][1] = -1;
            }
        }
    }
    //从num高位出发,当前来到i位上
    //之前决定的数字累加和是sum
    //之前的决定已经比num小,后续可以自由选择数字,free=1
    //之前的决定已经和num一样,后续不可以自由选择,free=0
    //返回有多少种可能性
    public static int f(int i,int sum,int free){
        if(sum > max){
            return 0;
        }
        //就算后面全部选9(最大)也比min小,那么就没有可能性了
        if(sum + (len - i) * 9 < min){
            return 0;
        }
        if(i == len){
            return 1;
        }
        if(dp[i][sum][free] != -1){
            return dp[i][sum][free];
        }
        int cur = num[i] - '0';
        int ans = 0;
        if(free == 0){
            for(int pick = 0;pick < cur;pick++){
                ans = (ans + f(i + 1,sum + pick,1)) % MOD;
            }
            ans = (ans + f(i + 1,sum + cur,0)) % MOD;
        } else {
            for(int pick = 0;pick <= 9;pick++){
                ans = (ans + f(i + 1,sum + pick,1)) % MOD;
            }
        }
        dp[i][sum][free] = ans;
        return ans;
    }
    public static boolean check(){
        int s = 0;
        for(char c : num){
            s += c - '0';
        }
        return s >= min && s <= max;
    }

    public static int count(String num1, String num2, int min_sum, int max_sum) {
        min = min_sum;
        max = max_sum;
        num = num2.toCharArray();
        len = num2.length();
        build();
        int ans = f(0,0,0);
        num = num1.toCharArray();
        len = num1.length();
        build();
        ans = (ans - f(0,0,0) + MOD) % MOD;
        //看更小的num1是不是满足题干条件,如果满足,那么+1
        if(check()){
            ans = (ans + 1) % MOD;
        }
        return ans;
    }
    /*
    题目4:完全没有重复的数字个数
    如果一个正整数每一个数位都是 互不相同 的，我们称它是 特殊整数 。
    给你一个正整数 n ，请你返回区间 [1, n] 之间特殊整数的数目。
    1 <= n <= 2*10^9
    思路:n有总的位数len,那么先计算位数小于len的数组中,每一位都互不相同的正整数个数,并累加起来
    然后计算比num小,但是位数一样的情况,但是要注意第一位不能是0
     */
    public int countSpecialNumbers(int n) {
        int len = 1;
        int offset = 1;
        int tmp = n / 10;
        while(tmp > 0){
            len++;
            offset *= 10;
            tmp /= 10;
        }
        // cnt[i] :
        // 一共长度为len，还剩i位没有确定，确定的前缀为len-i位，且确定的前缀不为空
        // 0~9一共10个数字，没有选择的数字剩下10-(len-i)个
        // 那么在后续的i位上，有多少种排列
        // 比如：len = 4
        // cnt[4]不计算
        // cnt[3] = 9 * 8 * 7
        // cnt[2] = 8 * 7
        // cnt[1] = 7
        // cnt[0] = 1，表示前缀已确定，后续也没有了，那么就是1种排列，就是前缀的状况
        // 再比如：len = 6
        // cnt[6]不计算
        // cnt[5] = 9 * 8 * 7 * 6 * 5
        // cnt[4] = 8 * 7 * 6 * 5
        // cnt[3] = 7 * 6 * 5
        // cnt[2] = 6 * 5
        // cnt[1] = 5
        // cnt[0] = 1，表示前缀已确定，后续也没有了，那么就是1种排列，就是前缀的状况
        int[] cnt = new int[len];
        cnt[0] = 1;
        for(int i = 1,k = 10 - len + 1;i < len;i++,k++){
            cnt[i] = cnt[i - 1] * k;
        }
        //ans先加上1~len-1位所有的可能情况
        int ans = 0;
        if(len >= 2){
            ans = 9;
            for(int i = 2,a = 9,b = 9;i < len;i++,b--){
                a *= b;
                ans += a;
            }
        }
        int first = n / offset;
        //小于num最高位数字的情况,比如最高位是4,那么1,2,3是可以随便选择的,所以直接加上
        //3*cnt[len - 1],然后递归最高位为4的情况
        ans += (first - 1) * cnt[len - 1];
        //此时传参1<<first说明first已经选过了
        ans += f(cnt,n,len - 1,offset / 10, 1 << first);
        return ans;
    }
    //哪些数字没选,哪些数字选了,用status来表示,0代表没选,1代表选了
    public static int f(int[] cnt,int num,int len,int offset,int status){
        if(len == 0) return 1;
        int ans = 0;
        int first = (num / offset) % 10;
        //此时cur < first,说明此时同一位时数字更小,可以任意选,那么直接加上cnt[len-1],不用递归
        for(int cur = 0;cur < first;cur++){
            if((status & (1 << cur)) == 0){
                ans += cnt[len - 1];
            }
        }
        //当cur == first,此时同一位数字相同,那么当此时没选过first时,直接递归
        if((status & (1 << first)) == 0){
            ans += f(cnt,num,len - 1,offset / 10,status ^ (1 << first));
        }
        return ans;
    }
}



