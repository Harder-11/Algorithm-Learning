import java.nio.Buffer;
import java.util.*;
import java.lang.*;


public class Learn {
    /*
    二维动态规划
    从递归到二维动态规划的过程
    二维动态规划的空间压缩技巧
    动态规划的时间复杂度的计算式:动态规划表的规模 * 每个格子枚举的代价
     */

    /*
    题目1:最小路径和
    给定一个包含非负整数的 m x n 网格 grid ，请找出一条从左上角到右下角的路径，
    使得路径上的数字总和为最小。
    说明：每次只能向下或者向右移动一步。
     */
    //纯递归思路:
    public static int minPathSum1(int[][] grid){
        return f11(grid,grid.length - 1,grid[0].length - 1);
    }
    public static int f11(int[][] grid,int i,int j){
        if(i == 0 && j == 0){
            return grid[0][0];
        }
        int up = Integer.MAX_VALUE;
        int left = Integer.MAX_VALUE;
        if(i > 0){
            up = f11(grid,i - 1,j);
        }
        if(j > 0){
            left = f11(grid,i,j - 1);
        }
        return grid[i][j] + Math.min(up,left);
    }
    //记忆化搜索
    public static int minPathSum2(int[][] grid){
        int n = grid.length;
        int m = grid[0].length;
        int[][] dp = new int[n][m];
        for(int i = 0;i < n;i++){
            Arrays.fill(dp[i],-1);
        }
        return f12(grid,n - 1,m - 1,dp);
    }
    public static int f12(int[][] grid,int i,int j,int[][] dp){
        if(dp[i][j] != -1){
            return dp[i][j];
        }
        int ans;
        if(i == 0 && j == 0){
            ans = grid[0][0];
        } else {
            int up = Integer.MAX_VALUE;
            int left = Integer.MAX_VALUE;
            if(i > 0){
                up = f12(grid,i - 1,j,dp);
            }
            if(j > 0){
                left = f12(grid,i,j - 1,dp);
            }
            ans = grid[i][j] + Math.min(up,left);
        }
        dp[i][j] = ans;
        return ans;
    }
    //采用动态规划,每次都是取min(左边,上边) + 本身
    //要特殊处理第一列和第一行
    public static int minPathSum3(int[][] grid){
        int n = grid.length;
        int m = grid[0].length;
        int[][] dp = new int[n][m];
        dp[0][0] = grid[0][0];
        for(int i = 1;i < n;i++){
            dp[i][0] = dp[i - 1][0] + grid[i][0];
        }
        for(int j = 1;j < m;j++){
            dp[0][j] = dp[0][j - 1] + grid[0][j];
        }
        for(int i = 1;i < n;i++){
            for(int j = 1;j < m;j++){
                dp[i][j] = Math.min(dp[i - 1][j],dp[i][j - 1]) + grid[i][j];
            }
        }
        return dp[n - 1][m - 1];
    }
    //动态规划 + 空间压缩
    //建立一维数组A,A当做第一行的前缀和,然后根据grid和一维数组A求出第二行
    //以此类推,滚动更新
    public static int minPathSum4(int[][] grid){
        int n = grid.length;
        int m = grid[0].length;
        int[] dp = new int[m];
        //先让dp表变成想象中的第0行的数据
        dp[0] = grid[0][0];
        for(int j = 1;j < m;j++){
            dp[j] = dp[j - 1] + grid[0][j];
        }
        for(int i = 1;i < n;i++){
            //i = k,dp表变成想象中的第k行的数据,单独改第一个数据,然后依次改后面的数据
            dp[0] += grid[i][0];
            for(int j = 1;j < m;j++){
                dp[j] = Math.min(dp[j - 1],dp[j]) + grid[i][j];
            }
        }
        return dp[m - 1];
    }
    /*
    能改成动态规划的递归,统一特征:决定返回值的可变参数类型往往比较简单,一般不会比int类型
    更复杂,从这个角度可以解释带路径的递归(可变参数类型),不适合或者说没有必要改成动态规划
     */
    /*
    例题2:单词搜索
    给定一个 m x n 二维字符网格 board 和一个字符串单词 word 。
    如果 word 存在于网格中，返回 true ；否则，返回 false 。
    单词必须按照字母顺序，通过相邻的单元格内的字母构成，
    其中"相邻"单元格是那些水平相邻或垂直相邻的单元格。
    同一个单元格内的字母不允许被重复使用。

    注意:这种题目由于每个格子枚举的代价很大,所以使用动态规划会导致表很大,所以
    这种递归题不适合使用动态规划
     */
    public static boolean exist(char[][] board, String word) {
        char[] w = word.toCharArray();
        for(int i = 0;i < board.length;i++){
            for(int j = 0;j < board[0].length;j++){
                if(f(board,i,j,w,0))
                return true;
            }
        }
        return false;
    }
    public static boolean f(char[][] b,int i,int j,char[] w,int k){
        if(k == w.length){
            return true;
        }
        if(i < 0 || i == b.length || j < 0 || j == b[0].length || b[i][j] != w[k]){
            return false;
        }
        //为了不越界就把沿途的路径设置成0的ASCII
        //之后要还原现场
        char t = b[i][j];
        b[i][j] = 0;
        boolean ans = f(b,i - 1,j,w,k + 1)
                || f(b,i + 1,j,w,k + 1)
                || f(b,i,j - 1,w,k + 1)
                || f(b,i,j + 1,w,k + 1);
        b[i][j] = t;
        return ans;
    }
    /*
    题目3:最长公共子序列
    给定两个字符串 text1 和 text2，返回这两个字符串的最长 公共子序列 的长度。
    如果不存在 公共子序列 ，返回 0 。
    一个字符串的 子序列 是指这样一个新的字符串：
    它是由原字符串在不改变字符的相对顺序的情况下删除某些字符（也可以不删除任何字符）
    后组成的新字符串。
    例如，"ace" 是 "abcde" 的子序列，但 "aec" 不是 "abcde" 的子序列。
    两个字符串的 公共子序列 是这两个字符串所共同拥有的子序列。
     */

    /*
    最暴力的递归写法:
     */
    public static int longestCommonSubsequence1(String text1, String text2) {
        char[] s1 = text1.toCharArray();
        char[] s2 = text2.toCharArray();
        int n = s1.length;
        int m = s2.length;
        return f31(s1,s2,n - 1,m - 1);
    }
    //s1[0....i1]与s2[0....i2]最长公共子序列的长度
    public static int f31(char[] s1,char[] s2,int i1,int i2){
        if(i1 < 0 || i2 < 0){
            return 0;
        }
        //第一种情况,两个字符串的结尾都不包含在最长子序列中
        //第二种情况,要第一个字符串的结尾但是不要第二个(比如是ab12cd3和efg23xy)
        //第三种情况,要第二个字符串不要第一个
        //第四种情况,两个字符串的结尾都要,此时不递归,如果是s1[i1] == s2[i2]那么都往前
        //移动i1 - 1,i2-1,此时公共子序列长度+1,否则的话就是0
        int p1 = f31(s1,s2,i1 - 1,i2 - 1);
        int p2 = f31(s1,s2,i1 - 1,i2);
        int p3 = f31(s1,s2,i1,i2 - 1);
        int p4 = s1[i1] == s2[i2] ? (p1 + 1) : 0;
        return Math.max(Math.max(p1,p2),Math.max(p3,p4));
    }
    //为了避免很多边界的讨论,很多时候往往不会用下标来尝试,而是用长度来定义尝试
    //因为长度最短是0,而下标越界的话讨论起来就很麻烦
    public static int longestCommonSubsequence2(String str1,String str2){
        char[] s1 = str1.toCharArray();
        char[] s2 = str2.toCharArray();
        int n = s1.length;
        int m = s2.length;
        return f32(s1,s2,n,m);
    }
    public static int f32(char[] s1,char[] s2,int len1,int len2){
        if(len1 == 0 || len2 == 0){
            return 0;
        }
        int ans;
        if(s1[len1 - 1] == s2[len2 - 1]){
            ans = f32(s1,s2,len1 - 1,len2 - 1) + 1;
        } else {
            ans = Math.max(f32(s1,s2,len1 - 1,len2),f32(s1,s2,len1,len2 - 1));
        }
        return ans;
    }
    //记忆化搜索
    public static int longestCommonSubsequence3(String str1,String str2){
        char[] s1 = str1.toCharArray();
        char[] s2 = str2.toCharArray();
        int n = s1.length;
        int m = s2.length;
        int[][] dp = new int[n + 1][m + 1];
        for(int i = 0;i <= n;i++){
            Arrays.fill(dp[i],-1);
        }
        return f33(s1,s2,n,m,dp);
    }
    public static int f33(char[] s1,char[] s2,int len1,int len2,int[][] dp){
        if(len1 == 0 || len2 == 0){
            return 0;
        }
        if(dp[len1][len2] != -1){
            return dp[len1][len2];
        }
        int ans;
        if(s1[len1 - 1] == s2[len2 - 1]){
            ans = f33(s1,s2,len1 - 1,len2 - 1,dp);
        } else {
            ans = Math.max(f33(s1,s2,len1 - 1,len2,dp),f33(s1,s2,len1,len2 - 1,dp));
        }
        dp[len1][len2] = ans;
        return ans;
    }
    //整理依赖关系,实现动态规划
    //每个格子依赖于左上,左,上三个格子((len1 - 1,len2 - 1),(len1 - 1,len2),(len1,len2 - 1));
    public static int longestCommonSubsequence4(String str1,String str2){
        char[] s1 = str1.toCharArray();
        char[] s2 = str2.toCharArray();
        int n = s1.length;
        int m = s2.length;
        int[][] dp = new int[n + 1][m + 1];
        //由于当len1或者len2等于0时,答案都是0,所有len1,len2都是从1开始遍历
        for(int len1 = 1;len1 <= n;len1++){
            for(int len2 = 1;len2 <= m;len2++){
                if(s1[len1 - 1] == s2[len2 - 1]){
                    dp[len1][len2] = 1 + dp[len1 - 1][len2 - 1];
                } else {
                    dp[len1][len2] = Math.max(dp[len1 - 1][len2],dp[len1][len2 - 1]);
                }
            }
        }
        return dp[n][m];
    }
    //进行空间压缩,由于此时的dp[]是代表一行的数据然后依次向下滚动,那么我们选择数组更短的
    //作为列,更长的作为行,这样更节省空间
    public static int longestCommonSubsequence5(String str1,String str2){
        char[] s1,s2;
        if(str1.length() >= str2.length()){
            s1 = str1.toCharArray();
            s2 = str2.toCharArray();
        } else {
            s1 = str2.toCharArray();
            s2 = str1.toCharArray();
        }
        int n = s1.length;
        int m = s2.length;
        int[] dp = new int[m + 1];
        //用backUp来记录左上的值,每次更新leftUp,第一次进行循环时dp全是0,所以backUp和
        //leftUp都是0,然后往下滚动更新
        //对于dp左边的格子已经更新过了,自己本身是没更新的就是上面的格子,所以取max(dp[len2],dp[len2-1]);

        for(int len1 = 1;len1 <= n;len1++){
            int leftUp = 0,backUp;
            for(int len2 = 1;len2 <= m;len2++){
                backUp = dp[len2];
                if(s1[len1 - 1] == s2[len2 - 1]){
                    dp[len2] = 1 + leftUp;
                } else {
                    dp[len2] = Math.max(dp[len2],dp[len2 - 1]);
                }
                //每次更新左上角的值
                leftUp = backUp;
            }
        }
        return dp[m];
    }
    /*
    题目4:最长回文子序列
    给你一个字符串 s ，找出其中最长的回文子序列，并返回该序列的长度。
    子序列定义为：不改变剩余字符顺序的情况下，删除某些字符或者不删除任何字符形成的一个序列。

    思路:对于s[L...R]求这段字符串的最长回文子序列
    分两种情况,s[L] != s[R]和s[L] == s[R]
    对于不等于的情况,那么又分为[L,R-1],[L+1,R],[L+1,R-1]三种情况
    对于等于的情况,那么就一定要两个字符就是2 + [L+1,R-1]
     */
    public int longestPalindromeSubseq1(String str) {
        char[] s = str.toCharArray();
        int n = s.length;
        return f41(s,0,n - 1);
    }
    public static int f41(char[] s,int r,int l){
        if(r == l){
            return 1;
        }
        if(l + 1 == r){
            return s[l] == s[r] ? 2 : 1;
        }
        if(s[l] == s[r]){
            return 2 + f41(s,l + 1,r - 1);
        } else {
            return Math.max(f41(s,l + 1,r),f41(s,l,r - 1));
        }
    }
    //动态规划:每个格子依赖于左边,下边和左下的格子
    //又这道题l <= R,所以二维数组只用上部分,且对角线上l == r处都是1
    //在l和r相邻时,如果相等就取2,否则是1
    public int longestPalindromeSubseq2(String str){
        char[] s = str.toCharArray();
        int n = s.length;
        int[][] dp = new int[n][n];
        for(int l = n - 1;l >= 0;l--){
            dp[l][l] = 1;
            if(l + 1 < n){
                dp[l][l + 1] = s[l] == s[l + 1] ? 2 : 1;
            }
            //此时第0和第1列还有最后两行已经被填完了,所以从l + 2开始
            for(int r = l + 2;r < n;r++){
                if(s[r] == s[l]){
                    dp[l][r] = 2 + dp[l + 1][r - 1];
                } else {
                    dp[l][r] = Math.max(dp[l + 1][r],dp[l][r - 1]);
                }
            }
        }
        return dp[0][n - 1];
    }
    //空间压缩,每次要用一个变量记住左下格子
    public int longestPalindromeSubseq3(String str){
        char[] s = str.toCharArray();
        int n = s.length;
        int[] dp = new int[n];
        for(int l = n - 1,leftDown = 0,backup;l >= 0;l--){
            dp[l] = 1;
            if(l + 1 < n) {
                //由于这了dp还没有开始更新,所以这里的leftDown是下一层的数字
                leftDown = dp[l + 1];
                dp[l + 1] = s[l] == s[l + 1] ? 2 : 1;
            }
            for(int r = l + 2;r < n;r++){
                //用backup备份
                backup = dp[r];
                if(s[l] == s[r]){
                    dp[r] = 2 + leftDown;
                } else {
                    dp[r] = Math.max(dp[r],dp[r - 1]);
                }
                leftDown = backup;
            }
        }
        return dp[n - 1];
    }
    /*
    题目5:节点数为n高度不大于m的二叉树个数
    现有n个节点,计算出有多少种不同结构的二叉树,并且高度不超过m
    由于数字可能很大,对10^9+7取余
     */

    //递归方式(记忆化搜索):
    //每一层左边子树从k开始一直到n - 1个节点(因为头结点算一个,最多到n-1),右边就是n-k-1
    //只写的递归的函数
    public static int compute1(int n,int m,long[][] dp1){
        long mod = (long) 1e9 + 7;
        if(n == 0) return 1;
        if(m == 0) return 0;
        if(dp1[n][m] != -1){
            return (int) dp1[n][m];
        }
        long ans = 0;
        for(int k = 0;k < n;k++){
            ans = (ans + ((long) compute1(k,m - 1,dp1) * compute1(n - k - 1,m - 1,dp1)) % mod) % mod;
        }
        dp1[n][m] = ans;
        return (int) ans;
    }
    //严格位置依赖的动态规划
    public static int compute2(int n,int m){
        long mod = (long)1e9 + 7;
        long[][] dp = new long[n + 1][m + 1];
        for(int j = 0;j <= m;j++){
            dp[0][j] = 1;
        }
        for(int i = 1;i <= n;i++){
            for(int j = 1;j <= m;j++){
                dp[i][j] = 0;
                for(int k = 0;k < i;k++){
                    //一共i个结点,头结点占1个
                    //如果左树占k个,那么右树占i-k-1个
                    dp[i][j] = (dp[i][j] + dp[k][j - 1] * dp[i - k - 1][j - 1] % mod) % mod;
                }
            }
        }
        return (int) dp[n][m];
    }
    //空间压缩,由于这道题对于dp数组,i,j位置是由j - 1列,i行之前所有的元素共同决定的
    //那么我们创建数组dp[]代表第i列而不是第i行,由因为每个二维dp数组的ij位置是由它上方
    //的元素来决定的,那么我们每次更新dp[]都从下往上更新,此时推到ij位置时数组上方的值都没更新
    //这样就相当于前一列的值
    public static int compute3(int n,int m){
        long mod = (long)1e9 + 7;
        long[] dp = new long[n + 1];
        dp[0] = 1;
        for(int i = 1;i <= n;i++){
            dp[i] = 0;
        }
        //从第一列开始到最后一列,行从n开始往上推
        for(int j = 1;j <= m;j++){
            for(int i = n;i >= 1;i--){
                dp[i] = 0;
                for(int k = 0;k < i;k++){
                    dp[i] = (dp[i] + dp[k] * dp[i - k - 1] % mod) % mod;
                }
            }
        }
        return (int)dp[n];
    }
    /*
    题目6:最长递增路径
    给定一个 m x n 整数矩阵 matrix ，找出其中 最长递增路径 的长度。
    对于每个单元格，你可以往上，下，左，右四个方向移动。
    你不能在对角线方向上移动或移动到 边界外（即不允许环绕）。

    由于这道题无法很直接地找到关系,所以只用记忆化搜索就行
     */

    //使用暴力递归
    public int longestIncreasingPath1(int[][] matrix) {
        int n = matrix.length;
        int m = matrix[0].length;
        int ans = 0;
        for(int i = 0;i < n;i++){
            for(int j = 0;j < m;j++){
                ans = Math.max(ans,f1(matrix,i,j));
            }
        }
        return ans;
    }
    public static int f1(int[][] grid,int i,int j){
        int next = 0;
        if(i > 0 && grid[i][j] < grid[i - 1][j]){
            next = Math.max(next,f1(grid,i - 1,j));
        }
        if(i + 1 < grid.length && grid[i][j] < grid[i + 1][j]){
            next = Math.max(next,f1(grid,i + 1,j));
        }
        if(j > 0 && grid[i][j] < grid[i][j - 1]){
            next = Math.max(next,f1(grid,i,j - 1));
        }
        if(j + 1 > grid[0].length && grid[i][j] < grid[i][j + 1]){
            next = Math.max(next,f1(grid,i,j + 1));
        }
        return next + 1;
    }
    public int longestIncreasingPath2(int[][] matrix) {
        int n = matrix.length;
        int m = matrix[0].length;
        int[][] dp = new int[n][m];
        int ans = 0;
        for(int i = 0;i < n;i++){
            for(int j = 0;j < m;j++){
                ans = Math.max(ans,f2(matrix,i,j,dp));
            }
        }
        return ans;
    }
    public static int f2(int[][] grid,int i,int j,int[][] dp){
        int next = 0;
        if(dp[i][j] != 0){
            return dp[i][j];
        }
        if(i > 0 && grid[i][j] < grid[i - 1][j]){
            next = Math.max(next,f2(grid,i - 1,j,dp));
        }
        if(i + 1 < grid.length && grid[i][j] < grid[i + 1][j]){
            next = Math.max(next,f2(grid,i + 1,j,dp));
        }
        if(j > 0 && grid[i][j] < grid[i][j - 1]){
            next = Math.max(next,f2(grid,i,j - 1,dp));
        }
        if(j + 1 < grid[0].length && grid[i][j] < grid[i][j + 1]){
            next = Math.max(next,f2(grid,i,j + 1,dp));
        }
        dp[i][j] = next + 1;
        return next + 1;
    }
}

