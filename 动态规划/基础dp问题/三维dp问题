import java.nio.Buffer;
import java.util.*;
import java.lang.*;
import java.io.*;


public class Learn {
    /*
    三维动态规划
    包含多位费用背包,严格位置依赖的三维动态规划,三维动态规划的空间压缩
     */

    /*
    例题1:一和零(多位费用背包)
    给你一个二进制字符串数组 strs 和两个整数 m 和 n 。
    请你找出并返回 strs 的最大子集的长度，该子集中 最多 有 m 个 0 和 n 个 1 。
    如果 x 的所有元素也是 y 的元素，集合 x 是集合 y 的 子集 。

    思路:两个费用的背包问题(1和0都有限制)
     */
    public static int zeros,ones;
    public static void zerosAndOnes(String str){
        zeros = 0;
        ones = 0;
        for(int i = 0;i < str.length();i++){
            if(str.charAt(i) == '0'){
                zeros++;
            } else {
                ones++;
            }
        }
    }
    public int findMaxForm1(String[] strs, int m, int n) {
        return f1(strs,0,m,n);
    }
    //strs[i....]自由选择,希望0的数量不超过z,1的数量不超过o
    //最多能选多少个字符串
    public static int f1(String[] strs,int i,int z,int o){
        if(i == strs.length){
            return 0;
        }
        //不使用strs[i]字符串
        int p1 = f1(strs,i + 1,z,o);
        //使用strs[i]字符串
        int p2 = 0;
        zerosAndOnes(strs[i]);
        if(zeros <= z && ones <= o){
            p2 = 1 + f1(strs,i + 1,z - zeros,o - ones);
        }
        return Math.max(p1,p2);
    }
    //记忆化搜索:
    public static int findMaxForm2(String[] strs,int m,int n){
        int[][][] dp = new int[strs.length][m + 1][n + 1];
        for(int i = 0;i < strs.length;i++){
            for(int j = 0;j <= m;j++){
                for(int k = 0;k <= n;k++){
                    dp[i][j][k] = -1;
                }
            }
        }
        return f2(strs,0,m,n,dp);
    }
    public static int f2(String[] strs,int i,int z,int o,int[][][] dp){
        if(i == strs.length){
            return 0;
        }
        if(dp[i][z][o] != -1){
            return dp[i][z][o];
        }
        int p1 = f2(strs,i + 1,z,o,dp);
        int p2 = 0;
        zerosAndOnes(strs[i]);
        if(zeros <= z && ones <= o){
            p2 = 1 + f2(strs,i + 1,z - zeros,o - ones,dp);
        }
        dp[i][z][o] = Math.max(p1,p2);
        return Math.max(p1,p2);
    }
    //严格位置依赖动态规划:此时对弈每一层,从len - 1层到0层,最后答案就是最后一层的m,n位置
    //每个位置都是由上一层的格子约束
    public static int findMaxForm3(String[] strs,int m,int n){
        int len = strs.length;
        int[][][] dp = new int[strs.length + 1][m + 1][n + 1];
        for(int i = len - 1;i >= 0;i--){
            zerosAndOnes(strs[i]);
            for(int z = 0,p1,p2;z <= m;z++){
                for(int o = 0;o <= n;o++){
                    p1 = dp[i + 1][z][o];
                    p2 = 0;
                    if(zeros <= z && ones <= o){
                        p2 = 1 + dp[i + 1][z - zeros][o - ones];
                    }
                    dp[i][z][o] = Math.max(p1,p2);
                }
            }
        }
        return dp[0][m][n];
    }
    //空间压缩
    //对于每一个位置,依赖于上一层的同一位置,和上一层z和o都减小的某个值
    //那么对于某一个平面dp[][]上的一个k点,他所依赖的就是他左上方(包括左方和上方的所有点)
    //所以此时遍历数组时就应该是从右往左,从下到上遍历,这样才不会改变左上方的值,保证左上方的值都是上一层的

    public static int findMaxForm4(String[] strs,int m,int n){
        int[][] dp = new int[m + 1][n + 1];
        for(String s : strs){
            zerosAndOnes(s);
            for(int z = m;z >= zeros;z--){
                for(int o = n;o >= ones;o--){
                    dp[z][o] = Math.max(dp[z][o],dp[z - zeros][o - ones] + 1);
                }
            }
        }
        return dp[m][n];
    }
    /*
    题目2:盈利计划
    集团里有 n 名员工，他们可以完成各种各样的工作创造利润。
    第 i 种工作会产生 profit[i] 的利润，它要求 group[i] 名成员共同参与。
    如果成员参与了其中一项工作，就不能参与另一项工作。
    工作的任何至少产生 minProfit 利润的子集称为 盈利计划 。并且工作的成员总数最多为 n 。
    有多少种计划可以选择？因为答案很大，所以 返回结果模 10^9 + 7 的值。

     */

    //暴力递归
    public int profitableSchemes(int n, int minProfit, int[] group, int[] profit) {
        return f1(group,profit,0,n,minProfit);
    }
    //i:来到i号项目
    //r:员工额度还有r人,如果r<=0说明已经没法再选择项目了
    //s:利润还有s才达标,如果s<=0,说明之前的选择已经让利润达标了
    public static int f1(int[] g,int[] p,int i,int r,int s){
        //人已经耗尽了
        if(r <= 0){
            return s <= 0 ? 1 : 0;
        }
        //项目已经耗尽了
        if(i == g.length){
            return s <= 0 ? 1 : 0;
        }
        //分两种情况,不选当前的项目
        //或者当g[i] <= r时,选当前的项目
        int p1 = f1(g,p,i + 1,r,s);
        int p2 = 0;
        if(g[i] <= r){
            p2 = f1(g,p,i + 1,r - g[i],s - p[i]);
        }
        return p1 + p2;
    }
    //使用记忆化搜索
    //要注意:由于使用了dp表,那么此时距离达标的利润就不能是负数情况,否则数组会越界
    //又因为负数情况和0情况实际是同一种情况,所以就用max(0,s - p[i])来表示转移
    public static int mod = (int) 1e9 + 7;
    public int profitableSchemes2(int n, int minProfit, int[] group, int[] profit) {
        int m = group.length;
        int[][][] dp = new int[m][n + 1][minProfit + 1];
        for(int a = 0;a < m;a++){
            for(int b = 0;b <= n;b++){
                for(int c = 0;c <= minProfit;c++){
                    dp[a][b][c] = -1;
                }
            }
        }
        return f2(group,profit,0,n,minProfit,dp);
    }
    public static int f2(int[] g,int[] p,int i,int r,int s,int[][][] dp){
        if(r <= 0){
            return s == 0 ? 1 : 0;
        }
        if(i == g.length){
            return s == 0 ? 1 : 0;
        }
        if(dp[i][r][s] != -1){
            return dp[i][r][s];
        }
        int p1 = f2(g,p,i + 1,r,s,dp) % mod;
        int p2 = 0;
        if(g[i] <= r){
            p2 = f2(g,p,i + 1,r - g[i],Math.max(0,s - p[i]),dp) % mod;
        }
        dp[i][r][s] = (p1 + p2) % mod;
        return dp[i][r][s];
    }
    //严格位置依赖的动态规划并且空间压缩版本:
    //对于每一次的r,s位置都依赖于上一层的同一位置,还依赖于r减小,s减小的部分,和题目1一样
    //所以从右往左,从下往上遍历
    public static int profitableSchemes3(int n,int minProfit,int[] group,int[] profit){
        int[][] dp = new int[n + 1][minProfit + 1];
        //当距离目标利润差距是0时,有此时一种情况
        for(int r = 0;r <= n;r++){
            dp[r][0] = 1;
        }
        int m = group.length;
        for(int i = m - 1;i >= 0;i--){
            for(int j = n;j >= 0;j--){
                for(int k = minProfit;k >= 0;k--){
                    int p1 = dp[j][k];
                    int p2 = group[i] <= j ? dp[j - group[i]][Math.max(0,k - profit[i])] : 0;
                    dp[j][k] = (p1 + p2) % mod;
                }
            }
        }
        return dp[n][minProfit];
    }
    /*
    题目3:骑士在棋盘上的概率
    在一个 n x n 的国际象棋棋盘上，一个骑士从单元格 (row, column) 开始，并尝试进行 k 次移动。
    行和列是 从 0 开始 的，所以左上单元格是 (0,0) ，右下单元格是 (n - 1, n - 1) 。
    象棋骑士有8种可能的走法,每次移动在基本方向上是两个单元格，然后在正交方向上是一个单元格。
    每次骑士要移动时，它都会随机从8种可能的移动中选择一种(即使棋子会离开棋盘)，然后移动到那里。
    骑士继续移动，直到它走了 k 步或离开了棋盘。
    返回骑士在棋盘停止移动后仍留在棋盘上的概率 。

    由于这道题每个格子依赖于8个位置,所以基本上无法状态压缩
     */

    //记忆化搜索
    public double knightProbability(int n, int k, int row, int column) {
        double[][][] dp = new double[n][n][k + 1];
        for(int i = 0;i < n;i++){
            for(int j = 0;j < n;j++){
                for(int t = 0;t <= k;t++){
                    dp[i][j][t] = -1;
                }
            }
        }
        return f(n,row,column,k,dp);
    }
    public static double f(int n,int i,int j,int k,double[][][] dp){
        if(i < 0 || i >= n || j < 0 || j >= n){
            return 0;
        }
        if(dp[i][j][k] != -1){
            return dp[i][j][k];
        }
        double ans = 0;
        if(k == 0){
            ans = 1;
        } else {
            ans += (f(n,i - 2,j + 1,k - 1,dp) / 8);
            ans += (f(n,i - 1,j + 2,k - 1,dp) / 8);
            ans += (f(n,i + 1,j + 2,k - 1,dp) / 8);
            ans += (f(n,i + 2,j + 1,k - 1,dp) / 8);
            ans += (f(n,i + 2,j - 1,k - 1,dp) / 8);
            ans += (f(n,i + 1,j - 2,k - 1,dp) / 8);
            ans += (f(n,i - 1,j - 2,k - 1,dp) / 8);
            ans += (f(n,i - 2,j - 1,k - 1,dp) / 8);
        }
        dp[i][j][k] = ans;
        return dp[i][j][k];
    }
    /*
    题目4:矩阵中和能被k整除的路径
    给你一个下标从 0 开始的 m x n 整数矩阵 grid 和一个整数 k 。
    你从起点 (0, 0) 出发，每一步只能往 下 或者往 右 ，你想要到达终点 (m - 1, n - 1) 。
    请你返回路径和能被 k 整除的路径数目，由于答案可能很大，返回答案对 10^9 + 7 取余 的结果。
     */

    //递归 + 记忆化搜索方式:
    public int numberOfPaths(int[][] grid, int k) {
        int n = grid.length;
        int m = grid[0].length;
        int[][][] dp = new int[n][m][k];
        for(int a = 0;a < n;a++){
            for(int b = 0;b < m;b++){
                for(int c = 0;c < k;c++){
                    dp[a][b][c] = -1;
                }
            }
        }
        return f1(grid,n,m,k,0,0,0,dp);
    }
    //累加和 % k的余数是r
    public static int f1(int[][] grid,int n,int m,int k,int i,int j,int r,int[][][] dp){
        if(i == n - 1 && j == m - 1){
            return grid[i][j] % k == r ? 1 : 0;
        }
        if(dp[i][j][r] != -1){
            return dp[i][j][r];
        }
        //由于递归结束的判断是grid[i][j] % k == r,那么此时来到ij位置,当前位置grid[i][j]
        //的余数是grid[i][j]%k,那么后续的余数应该是r-(grid[i][j]%k)然后使用同余
        //所以是(r - (grid[i][j] % k) + k) % k
        //need是后续需要的余数
        int need = (r - (grid[i][j] % k) + k) % k;
        int ans = 0;
        if(i + 1 < n){
            ans = f1(grid,n,m,k,i + 1,j,need,dp) % mod;
        }
        if(j + 1 < m){
            ans = (ans + f1(grid,n,m,k,i,j + 1,need,dp)) % mod;
        }
        dp[i][j][r] = ans;
        return ans;
    }
    //严格位置依赖的动态规划,每个格子依赖于自己下方和右方的两个格子
    public static int numberOfPaths1(int[][] grid,int k){
        int n = grid.length;
        int m = grid[0].length;
        int[][][] dp = new int[n][m][k];
        //由递归结束的判断条件得到的特殊点的值
        //在i==n-1,j==m-1的位置,grid[i][j]%k==r,那么就返回1
        dp[n - 1][m - 1][grid[n - 1][m - 1] % k] = 1;
        //将最后一列的所有厚度展开的格子都填好
        for(int i = n - 2;i >= 0;i--){
            for(int r = 0;r < k;r++){
                dp[i][m - 1][r] = dp[i + 1][m - 1][(k + r - grid[i][m - 1] % k) % k];
            }
        }
        //将最后一行的所有厚度展开的格子都填好
        for(int j = m - 2;j >= 0;j--){
            for(int r = 0;r < k;r++){
                dp[n - 1][j][r] = dp[n - 1][j + 1][(k + r - grid[n - 1][j] % k) % k];
            }
        }
        for(int i = n - 2,need;i >= 0;i--){
            for(int j = m - 2;j >= 0;j--){
                for(int r = 0;r < k;r++){
                    need = (k + r - grid[i][j] % k) % k;
                    dp[i][j][r] = dp[i + 1][j][need];
                    dp[i][j][r] = (dp[i][j][r] + dp[i][j + 1][need]) % mod;
                }
            }
        }
        return dp[0][0][0];
    }
    /*
    题目5:扰乱字符串
    使用下面描述的算法可以扰乱字符串 s 得到字符串 t ：
    1.如果字符串的长度为 1 ，算法停止
    2.如果字符串的长度 > 1 ，执行下述步骤：
    在一个随机下标处将字符串分割成两个非空的子字符串。
    即，如果已知字符串 s ，则可以将其分成两个子字符串 x 和 y ，且满足 s = x + y 。
    随机 决定是要「交换两个子字符串」还是要「保持这两个子字符串的顺序不变」。
    即，在执行这一步骤之后，s 可能是 s = x + y 或者 s = y + x 。
    在 x 和 y 这两个子字符串上继续从步骤 1 开始递归执行此算法。
    给你两个 长度相等 的字符串 s1 和 s2，判断 s2 是否是 s1 的扰乱字符串。
    如果是，返回 true ；否则，返回 false 。

    思路:首先解决一个误区,不能直接贪心,两个字符串包含的每种字符个数一样不一定互相就是扰乱字符串
    比如说abcd不是cadb的扰乱字符串
    定义函数f(boolean),表示s1从l1到r1,s2从l2到r2,这两个字符串是不是扰乱串关系
    每次调用函数f(0,i,0,i) && f(i+1,n-1,i+1,n-1),i从0到n-2,只要有一个成立就是true
    或者是交错f(0,i,n-i-1,n-1)&&f(i+1,n-1,0,n-i-2),i从0到n-2
     */
    public boolean isScramble1(String str1, String str2) {
        char[] s1 = str1.toCharArray();
        char[] s2 = str2.toCharArray();
        int n = s1.length;
        return f(s1,0,n - 1,s2,0,n - 1);
    }
    //s1[l1...r1],s2[l2...r2]是不是扰乱串的关系
    public static boolean f(char[] s1,int l1,int r1,char[] s2,int l2,int r2){
        //说明s1,s2只剩下一个字符,那么只要两个字符是一样的,那么就是扰乱串
        if(l1 == r1){
            return s1[l1] == s2[l2];
        }
        //s1[l1...i][i+1...r1]
        //s2[l2...j][j+1...r2]
        //不交错讨论扰乱关系
        for(int i = l1,j = l2;i < r1;i++,j++){
            if(f(s1,l1,i,s2,l2,j) && f(s1,i + 1,r1,s2,j + 1,r2)){
                return true;
            }
        }
        //交错讨论扰乱关系
        //s1[l1...i][i+1...r1]
        //s2[l2...j-1][j...r2]
        //其中l1...i与j...r2等长
        for(int i = l1,j = r2;i < r1;i++,j--){
            if(f(s1,l1,i,s2,j,r2) && f(s1,i + 1,r1,s2,l2,j - 1)){
                return true;
            }
        }
        return false;
    }
    //由于两个字符串要想成为扰乱字符串,那么必定长度相等,所以可以减小一个参数
    //f修改成f(s1,s2,l1,l2,len)
    //依旧是暴力尝试
    public static boolean f2(char[] s1,char[] s2,int l1,int l2,int len){
        if(len == 1){
            return s1[l1] == s2[l2];
        }
        for(int k = 1;k < len;k++){
            if(f2(s1,s2,l1,l2,k) && f2(s1,s2,l1 + k,l2 + k,len - k)){
                return true;
            }
        }
        for(int i = l1 + 1,j = l2 + len - 1,k = 1;k < len;i++,j--){
            if(f2(s1,s2,l1,j,k) && f2(s1,s2,i,l2,len - k)){
                return true;
            }
        }
        return false;
    }
    public static boolean isScramble2(String str1,String str2){
        char[] s1 = str1.toCharArray();
        char[] s2 = str2.toCharArray();
        int n = s1.length;
        int[][][] dp = new int[n][n][n + 1];
        //dp[l1][l2][len] : int 0-->没展开过
        //int -1 -->展开过,返回的结果是false
        //int 1 -->展开过,返回的结果是true
        return f3(s1,s2,0,0,n,dp);
    }
    public static boolean f3(char[] s1,char[] s2,int l1,int l2,int len,int[][][] dp){
        if(len == 1){
            return s1[l1] == s2[l2];
        }
        if(dp[l1][l2][len] != 0){
            return dp[l1][l2][len] == 1;
        }
        boolean ans = false;
        for(int k = 1;k < len;k++){
            if(f3(s1,s2,l1,l2,k,dp) && f3(s1,s2,l1 + k,l2 + k,len - k,dp)){
                ans = true;
                break;
            }
        }
        if(!ans){
            for(int i = l1 + 1,j = l2 + len - 1,k = 1;k < len;i++,j--,k++){
                if(f3(s1,s2,l1,j,k,dp) && f3(s1,s2,i,l2,len - k,dp)){
                    ans = true;
                    break;
                }
            }
        }
        dp[l1][l2][len] = ans ? 1 : -1;
        return ans;
    }
    //严格位置依赖的版本:
    public static boolean isScramble(String str1,String str2){
        char[] s1 = str1.toCharArray();
        char[] s2 = str2.toCharArray();
        int n = s1.length;
        boolean[][][] dp = new boolean[n][n][n + 1];
        for(int l1 = 0;l1 < n;l1++){
            for(int l2 = 0;l2 < n;l2++){
                dp[l1][l2][1] = s1[l1] == s2[l2];
            }
        }
        for(int len = 2;len <= n;len++){
            for(int l1 = 0;l1 <= n - len;l1++){
                for(int l2 = 0;l2 <= n - len;l2++){
                    for(int k = 1;k < len;k++){
                        if(dp[l1][l2][k] && dp[l1 + k][l2 + k][len - k]){
                            dp[l1][l2][len] = true;
                            break;
                        }
                    }
                    if(!dp[l1][l2][len]){
                        for(int i = l1 + 1,j = l2 + len - 1,k = 1;k < len;i++,j--,k++){
                            if(dp[l1][j][k] && dp[i][l2][len - k]){
                                dp[l1][l2][len] = true;
                                break;
                            }
                        }
                    }
                }
            }
        }
        return dp[0][0][n];
    }
}

