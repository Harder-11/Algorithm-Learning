import java.nio.Buffer;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.util.stream.Stream;


public class Learn {
    /*
    01背包,有依赖的背包
    01背包:每个物品要和不要两种可能性展开
    有依赖的背包:多个物品变成一个复合物品(互斥),每件复合物品要和怎么要多种可能性展开
    不能用01背包来解决,但是非常重要的问题:非负数组前k个最小的子序列和问题

    注意:问情况个数问题和问最大最小值问题不一样!问情况个数在转移方程时没有val[i],并且一定会有一个初始化值
    问最大值时要加上val[i],此时不一定把所有的空间用完了,返回的是val总和的最大值
     */

    /*
    01背包模版
    给定一个正数t,表示背包的容量
    有m个货物,每个货物可以选择1次,每个货物有自己的体积costs[i]和价值values[i]
    返回在不超过总容量的情况下,怎么挑选货物能使货物的价值最大,返回最大的价值

    思路:动态规划背包问题,使用二维dp,dp[i][j]代表前i个物品,总的容量不超过j,那么此时
    最右下角的值就是答案,又有选与不选两种情况
    不选i位置的,那么dp[i][j]=dp[i-1][j]
    选择i位置,那么dp[i][j]=dp[i-1][j-costs[i]]+values[i],此时要判断j和costs[i]大小
     由于每个格子受到自己上方和上方左侧某一个格子的约束,那么要首先把第0行的格子初始值填上
     又第0行代表没有物品,所以价值都是0,所以第一行的元素都是0
     */
    public static int MAXT = 101;
    public static int MAXN = 1001;
    public static int[] costs = new int[MAXN];
    public static int[] vals = new int[MAXN];
    public static int t,m;
    public static int[] dp = new int[MAXT];

    public static int compute(){
        int[][] dp = new int[m + 1][t + 1];
        for(int i = 1;i <= m;i++){
            for(int j = 0;j <= t;j++){
                dp[i][j] = dp[i - 1][j];
                if(j - costs[i] >= 0){
                    dp[i][j] = Math.max(dp[i][j],dp[i - 1][j - costs[i]] + vals[i]);
                }
            }
        }
        return dp[m][t];
    }
    //空间压缩
    public static int compute2(){
        Arrays.fill(dp,1,t + 1,0);
        for(int i = 1;i <= m;i++){
            for(int j = t;j >= costs[i];j--){
                dp[j] = Math.max(dp[j],dp[j - costs[i]] + vals[i]);
            }
        }
        return dp[t];
    }
    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);
        t = sc.nextInt();
        m = sc.nextInt();
        for(int i = 0;i < m;i++){
            costs[i] = sc.nextInt();
            vals[i] = sc.nextInt();
        }
        System.out.println(compute());
        sc.close();
    }
    /*
    题目2:夏季特惠
    某公司游戏平台的夏季特惠开始了，你决定入手一些游戏。
    现在你一共有X元的预算，该平台上所有的 n 个游戏均有折扣，标号为 i 的游戏的原价ai元,现价只要
    bi元,并且你购买该游戏能获得快乐值为wi,由于优惠的存在
    你可能做出一些冲动消费导致最终买游戏的总费用超过预算，
    但只要满足获得的总优惠金额不低于超过预算的总金额，那在心理上就不会觉得吃亏。
    现在你希望在心理上不觉得吃亏的前提下，获得尽可能多的快乐值。
    输入：
    - 第一行包含两个数 n 和 X 。
    - 接下来 n 行包含每个游戏的信息，原价 ai,现价 bi，能获得的快乐值为 wi 。
    输出：
    - 输出一个数字，表示你能获得的最大快乐值。

    思路:先求出每个商品优惠的值,优惠值-现价就是预算的改变值,如果优惠值-现价>=现价,那么一定会
    选上,如果<现价,那么就是选与不选两种情况
     */
    public static int[] cost = new int[501];
    public static long[] val = new long[501];
    public static long[] dp1 = new long[100001];
    public static int n1,m1,x1;
    public static long compute3(){
        Arrays.fill(dp1,0,x1 + 1,0);
        for(int i = 1;i <= m1;i++){
            for(int j = x1;j >= cost[i];j--){
                dp1[j] = Math.max(dp1[j],dp1[j - cost[i]] + val[i]);
            }
        }
        return dp1[x1];
    }
    public static void main2(String[] args) {
        Scanner sc = new Scanner(System.in);
         n1 = sc.nextInt();
         x1 = sc.nextInt();
         m1 = 1;
         long ans = 0,happy = 0;
         for(int i = 1,pre,cur,well;i <= n1;i++){
             pre = sc.nextInt();
             cur = sc.nextInt();
             happy = sc.nextLong();
             well = pre - 2 * cur;
             if(well >= 0){
                 x1 += well;
                 ans += happy;
             } else {
                 cost[m1] = -well;
                 val[m1++] = happy;
             }
         }
         ans += compute3();
         System.out.println(ans);
    }
    /*
    题目3:目标和
    给你一个非负整数数组 nums 和一个整数 target 。
    向数组中的每个整数前添加 '+' 或 '-' ，然后串联起所有整数，可以构造一个 表达式 ：
    例如，nums = [2, 1] ，可以在 2 之前添加 '+' ，在 1 之前添加 '-'
    然后串联起来得到表达式 "+2-1" 。
    返回可以通过上述方法构造的、运算结果等于 target 的不同 表达式 的数目。
     */
    //暴力做法:
    public static int findTargetSumWays(int[] nums, int target) {
        return f1(nums,target,0,0);
    }
    public static int f1(int[] nums,int target,int i,int sum){
        if(i == nums.length){
            return sum == target ? 1 : 0;
        }
        return f1(nums,target,i + 1,sum + nums[i]) + f1(nums,target,i + 1,sum - nums[i]);
    }

    //挂一个缓存表,但是这道题的sum可能是一个负数,就不能用数组而是用HashMap
    //使用HashMap<Integer,Map<Integer,Integer>> 来代替二维dp缓存表
    //对于i,sum-->对应的值是value
    public static int findTargetSumWays2(int[] nums, int target) {
        Map<Integer,Map<Integer,Integer>> dp = new HashMap<>();
        return f2(nums,target,0,0,dp);
    }
    public static int f2(int[] nums,int target,int i,int sum,Map<Integer,Map<Integer,Integer>> dp){
        if(i == nums.length){
            return sum == target ? 1 : 0;
        }
        if(dp.containsKey(i) && dp.get(i).containsKey(sum)){
            return dp.get(i).get(sum);
        }
        int ans = f2(nums,target,i + 1,sum + nums[i],dp) +
                f2(nums,target,i + 1,sum - nums[i],dp);
        dp.putIfAbsent(i,new HashMap<>());
        dp.get(i).put(sum,ans);
        return ans;
    }
    //严格位置依赖的动态规划
    //平移技巧,由于对于dp[i][j],j位置代表的是累加和,此时可能是负数,为了避免负数
    //的出现,那么我们就将j位置的整体往右平移sum(abs(nums[i]))个单位
    public static int findTargetSumWays3(int[] nums,int target){
        int s = 0;
        for(int num : nums){
            s += num;
        }
        //不可能出现的情况,就算所有的是负数因为大于target或者就算所有的都是正数
        //加起来也小于target
        if(target < -s || target > s){
            return 0;
        }
        //由于nums是非负数组,所以此时s就是最大值
        //那么此时最大值是s,最小值就是-s,中间一共的元素就有s*2+1个
        //但凡涉及到j的都往右移动s个单位
        int n = nums.length;
        int m = 2 * s + 1;
        //在选择所有的数字后sum = target,那么此时就是一种情况
        int[][] dp = new int[n + 1][m];
        dp[n][target + s] = 1;
        for(int i = n - 1;i >= 0;i--){
            for(int j = -s;j <= s;j++){
                if(j + nums[i] + s < m) {
                    dp[i][j + s] = dp[i + 1][j + nums[i] + s];
                }
                if(j - nums[i] + s >= 0){
                    dp[i][j + s] += dp[i + 1][j - nums[i] + s];
                }
            }
        }
        return dp[0][s];
    }
    /*
    转化为01背包问题:
    建立两个集合,选择正数的数字添加到正数集合,选择负数的数字添加到负数集合(但是集合里是正数)
    那么一定有sum(A)-sum(B)=target,然后变形得到sum(A)+sum(A)-sum(B)+sum(B)=target+sum(A)+sum(B)
    得到了2*sum(A)=target+数组所有数的累加和,所以sum(A)=(target+数组累加和)/2
    也就是说,任何一个集合,只要是累计和是(target+数组累加和)/2,那么就一定对应一种target的方式
    所以就转化为了01背包问题,找到所有不同的子序列能加出来等于(target+数组累加和)/2

    dp[i][j]:前i个数字,构成的累加和是j,有多少个子序列满足条件
    那么dp[i][j] += dp[i-1][j],dp[i][j]+=dp[i-1][j-nums[i]];(选与不选)
     */
    public static int findTargetSumWays4(int[] nums,int target){
        int sum = 0;
        for(int n : nums){
            sum += n;
        }
        if(sum < -target || sum < target || ((sum + target) & 1) == 1){
            return 0;
        }
        return subsets(nums,(target + sum) >> 1);
    }
    public static int subsets(int[] nums,int t){
        int[] dp = new int[t + 1];
        //构成累加和为0的一定有一种情况(都不选)
        dp[0] = 1;
        for(int i = 0;i < nums.length;i++){
            for(int j = t;j >= nums[i];j--){
                dp[j] += dp[j - nums[i]];
            }
        }
        return dp[t];
    }

    /*
    题目4:最后一块石头的重量
    有一堆石头，用整数数组 stones 表示。其中 stones[i] 表示第 i 块石头的重量。
    每一回合，从中选出任意两块石头，然后将它们一起粉碎。
    假设石头的重量分别为 x 和 y，且 x <= y。那么粉碎的可能结果如下：
    如果 x == y，那么两块石头都会被完全粉碎；
    如果 x != y，那么重量为 x 的石头将会完全粉碎，而重量为 y 的石头新重量为 y-x。
    最后，最多只会剩下一块 石头。返回此石头 最小的可能重量 。如果没有石头剩下，就返回 0。
     */

    //思路:两个集合AB,想让两个集合各自的累加和减完更小,那么实际就是选择一些数组尽可能
    //靠近整体累加和的一半
    public int lastStoneWeightII(int[] stones) {
        int sum = 0;
        for(int num : stones){
            sum += num;
        }
        int near = near(stones,sum / 2);
        return sum - 2 * near;
    }
    //子集累加和不超过t,但是最接近t的累加和是多少
    //01背包问题+空间压缩
    //dp[i][j]前i个数的累加和 <= j
    public int near(int[] nums,int t){
        int[] dp = new int[t + 1];
        for(int num : nums){
            for(int j = t;j >= num;j--){
                dp[j] = Math.max(dp[j],dp[j - num] + num);
            }
        }
        return dp[t];
    }
    /*
    有依赖的背包(模版)
    物品分为两大类：主件和附件
    主件的购买没有限制，钱够就可以；附件的购买有限制，该附件所归属的主件先购买，才能购买这个附件
    例如，若想买打印机或扫描仪这样的附件，必须先购买电脑这个主件
    以下是一些主件及其附件的展示：
    电脑：打印机，扫描仪 | 书柜：图书 | 书桌：台灯，文具 | 工作椅：无附件
    每个主件最多有2个附件，并且附件不会再有附件，主件购买后，怎么去选择归属附件完全随意，钱够就可以
    所有的物品编号都在1~m之间，每个物品有三个信息：价格v、重要度p、归属q
    价格就是花费，价格 * 重要度 就是收益，归属就是该商品是依附于哪个编号的主件
    比如一件商品信息为[300,2,6]，花费300，收益600，该商品是6号主件商品的附件
    再比如一件商品信息[100,4,0]，花费100，收益400，该商品自身是主件(q==0)
    给定m件商品的信息，给定总钱数n，返回在不违反购买规则的情况下最大的收益

    思路:对于每一个主件,都有最多四种情况
    (1)不要这个主件
    (2)只要这个主件
    (3)还要附件1,但是不要附件2(如果有)
    (4)同时要附件1和2(如果有)
    使用boolean[] king来判断是不是主件,是true才展开讨论
    使用fans[]指每个商品的附件个数
    使用follows[][]表示每个附件商品的编号
     */
    public static int MAXN1 = 33001;
    public static int MAXM1 = 61;
    public static int[] cost1 = new int[MAXM1];
    public static int[] val1 = new int[MAXM1];
    public static boolean[] king1 = new boolean[MAXM1];
    public static int[] fans1 = new int[MAXM1];
    public static int[][] follows1 = new int[MAXM1][2];
    public static int[] dp2 = new int[MAXN1];
    public static int n2,m2;
    public static void clean(){
        for(int i = 1;i <= m2;i++){
            fans1[i] = 0;
        }
    }
    public static int compute4(){
        int[][] dp = new int[m2 + 1][n2 + 1];
        //上次展开的商品编号
        int p = 0;
        for(int i = 1,fan1,fan2;i <= m2;i++){
            if(king1[i]){
                for(int j = 0;j <= n2;j++){
                    dp[i][j] = dp[p][j];
                    if(j >= cost1[i]){
                        dp[i][j] = Math.max(dp[i][j],dp[p][j - cost1[i]] + val1[i]);
                    }
                    fan1 = fans1[i] >= 1 ? follows1[i][0] : -1;
                    fan2 = fans1[i] >= 2 ? follows1[i][1] : -1;
                    if(fan1 != -1 && j - cost1[i] - cost1[fan1] >= 0){
                        dp[i][j] = Math.max(dp[i][j],dp[p][j - cost1[i] - cost1[fan1]] + val1[i] + val1[fan1]);
                    }
                    if(fan2 != -1 && j - cost1[i] - cost1[fan2] >= 0){
                        dp[i][j] = Math.max(dp[i][j],dp[p][j - cost1[i] - cost1[fan2]] + val1[i] + val1[fan2]);
                    }
                    if(fan1 != -1 && fan2 != -1 && j - cost1[i] - cost1[fan1] - cost1[fan2] >= 0){
                        dp[i][j] = Math.max(dp[i][j],dp[p][j - cost1[i] - cost1[fan1] - cost1[fan2]] + val1[i] + val1[fan1] + val1[fan2]);
                    }
                }
                p = i;
            }
        }
        return dp[m2][n2];
    }

    public static void main1(String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StreamTokenizer in = new StreamTokenizer(br);
        PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));
        while(in.nextToken() != StreamTokenizer.TT_EOF){
            n2 = (int) in.nval;
            in.nextToken();
            m2 = (int) in.nval;
            clean();
            for(int i = 1,v,p,q;i <= m;i++){
                in.nextToken(); v = (int) in.nval;
                in.nextToken(); p = (int) in.nval;
                in.nextToken(); q = (int) in.nval;
                cost1[i] = v;
                val1[i] = v * p;
                king1[i] = q == 0;
                if(q != 0){
                    follows1[q][fans1[q]++] = i;
                }
            }
            out.println(compute4());
        }
        out.flush();
        out.close();
        br.close();
    }

}



