import java.io.*;
import java.math.*;
import java.nio.Buffer;
import java.util.*;
import java.lang.*;


public class learn {
    /*
    一维动态规划(要熟悉递归)
    动态规划:用空间替代重复计算,包含一整套原理和技巧的总和
    任何一个动态规划都一定对应着一个有重复调用行为的递归
    尝试策略和转移方程就是一回事!!!
     */

    /*
    例题:斐波那契数列
    通过暴力,记忆化搜索,动态规划来处理
     */
    //暴力:
    public static int f1(int i){
        if(i == 0) return 0;
        if(i == 1) return 1;
        return f1(i - 1) + f1(i - 2);
    }
    //记忆化搜索,用dp[]来存储每一个求出来的数值,O(n)
    public static int fib2(int n){
        int[] dp = new int[n + 1];
        Arrays.fill(dp,-1);
        return f2(n,dp);
    }
    public static int f2(int i,int[] dp){
        if(i == 0) return 0;
        if(i == 1) return 1;
        //第i项不是-1,说明之前计算过第i项,那么直接返回dp[i]
        if(dp[i] != -1){
            return dp[i];
        }
        int ans = f2(i - 1,dp) + f2(i - 1,dp);
        dp[i] = ans;
        return ans;
    }
    //使用动态规划
    public static int fib3(int n){
        if(n == 0) return 0;
        if(n == 1) return 1;
        int[] dp = new int[n + 1];
        //初始时斐波那契数列第0项是0,第一项是1
        dp[1] = 1;
        for(int i = 2;i <= n;i++){
            dp[i] = dp[i - 1] + dp[i - 2];
        }
        return dp[n];
    }
    public static int fib4(int n){
        if(n == 0) return 0;
        if(n == 1) return 1;
        int lastLast = 0,last = 1;
        for(int i = 2,cur;i <= n;i++){
            cur = lastLast + last;
            lastLast = last;
            last = cur;
        }
        return last;
    }
    /*
    最低票价
    在一个火车旅行很受欢迎的国度,你提前一年计划了一些火车旅行.在接下来的一年里，
    你要旅行的日子将以一个名为days的数组给出。每一项是一个从1到365的整数。
    火车票有 三种不同的销售方式 ：
    一张 为期一天 的通行证售价为 costs[0] 美元；
    一张 为期七天 的通行证售价为 costs[1] 美元；
    一张 为期三十天 的通行证售价为 costs[2] 美元。
    通行证允许数天无限制的旅行.例如,如果我们在第2天获得一张为期7天的通行证，
    那么我们可以连着旅行7天:第2天、第3天、第4天、第5天、第6天、第7天和第8天。
    返回 你想要完成在给定的列表 days 中列出的每一天的旅行所需要的最低消费 。


     */
    public static int[] durations = {1,7,30};
    public int mincostTickets1(int[] days, int[] costs) {
        return f1(days,costs,0);
    }
    //从下标i位置开始,到最后的最少花费
    public static int f1(int[] days,int[] costs,int i){
        //说明后续已经没有旅行了,那么就没有花费了
        if(i == days.length){
            return 0;
        }
        //i下标:第days[i]天,有一场旅行
        //ans就是最少花费
        int ans = Integer.MAX_VALUE;
        //k是方案的编号:0,1,2
        for(int k = 0,j = i;k < 3;k++){
            //对于每个不同的k值,一直将j加到大于(当前时间 + 旅游天数)的下标为止
            while(j < days.length && days[i] + durations[k] > days[j]){
                j++;
            }
            ans = Math.min(ans,costs[k] + f1(days,costs,j));
        }
        return ans;
    }
    //使用记忆化搜索(只是加上了一个记忆化数组,其他基本上没变)
    public int mincostTickets2(int[] days, int[] costs) {
        int[] dp = new int[days.length];
        for(int i = 0;i < days.length;i++){
            dp[i] = Integer.MAX_VALUE;
        }
        return f2(days,costs,0,dp);
    }
    public static int f2(int[] days,int[] costs,int i,int[] dp){
        if(i == days.length){
            return 0;
        }
        if(dp[i] != Integer.MAX_VALUE){
            return dp[i];
        }
        int ans = Integer.MAX_VALUE;
        for(int k = 0,j = i;k < 3;k++){
            while(j < days.length && days[i] + durations[k] > days[j]){
                j++;
            }
            ans = Math.min(ans,costs[k] + f2(days,costs,j,dp));
        }
        dp[i] = ans;
        return ans;
    }
    //动态规划写法
    public static int mincostTickets3(int[] days,int[] costs){
        //一共365天,那么开366
        int[] dp = new int[366];
        int n = days.length;
        Arrays.fill(dp,0,n + 1,Integer.MAX_VALUE);
        dp[n] = 0;
        //因为我想要的是从0下标开始的返回值,所以i倒序遍历直到0,然后返回dp[0];
        for(int i = n - 1;i >= 0;i--){
            for(int k = 0,j = i;k < 3;k++){
                while(j < days.length && days[i] + durations[k] > days[j]){
                    j++;
                }
                dp[i] = Math.min(dp[i],costs[k] + dp[j]);
            }
        }
        return dp[0];
    }
    /*
    解码方法:
    一条包含字母 A-Z 的消息通过以下映射进行了 编码 ：
    "1" -> 'A'
    "2" -> 'B'
    ...
    "25" -> 'Y'
    "26" -> 'Z'
    然而，在 解码 已编码的消息时，你意识到有许多不同的方式来解码，
    因为有些编码被包含在其它编码当中（"2" 和 "5" 与 "25"）。
    例如，"11106" 可以映射为：
    "AAJF" ，将消息分组为 (1, 1, 10, 6)
    "KJF" ，将消息分组为 (11, 10, 6)
    消息不能分组为  (1, 11, 06) ，因为 "06" 不是一个合法编码（只有 "6" 是合法的）。
    注意，可能存在无法解码的字符串。
    给你一个只含数字的非空字符串 s ，请计算并返回解码方法的总数 。
    如果没有合法的方式解码整个字符串，返回 0。
    题目数据保证答案肯定是一个 32 位 的整数。
     */

    //最暴力的尝试:
    //s:数字字符串
    public static int numDecodings1(String s){
        return f1(s.toCharArray(),0);
    }
    //f方法:s字符串从i出发一共有多少种有效的字符串
    //有两种情况,i自已单独作为一个部分,或者是i 和i+1整体作为一个部分
    //如果i位置的字符是0,那么没法转化直接返回0
    //当到底s.length时,那么就有一种情况,所以return 1;
    public static int f1(char[] s,int i){
        if(i == s.length){
            return 1;
        }
        int ans;
        if(s[i] == '0'){
            ans = 0;
        } else {
            ans = f1(s,i + 1);
            if(i + 1 < s.length && ((s[i] - '0') * 10 + s[i + 1] - '0') <= 26){
                ans += f1(s,i + 2);
            }
        }
        return ans;
    }
    //使用记忆化搜索
    public static int numDecodings2(String s){
        int n = s.length();
        int[] dp = new int[n + 1];
        Arrays.fill(dp,-1);
        return f2(s.toCharArray(),0,dp);
    }
    public static int f2(char[] s,int i,int[] dp){
        if(i == s.length){
            return 1;
        }
        if(dp[i] != -1){
            return dp[i];
        }
        int ans;
        if(s[i] == '0'){
            ans = 0;
        } else {
            ans = f2(s,i + 1,dp);
            if(i + 1 < s.length && ((s[i] - '0') * 10 + s[i + 1] - '0') <= 26){
                ans += f2(s,i + 2,dp);
            }
        }
        dp[i] = ans;
        return ans;
    }
    //使用动态规划
    public static int numDecodings3(String str){
        char[] s = str.toCharArray();
        int n = s.length;
        int[] dp = new int[n + 1];
        dp[n] = 1;
        for(int i = n - 1;i >= 0;i--){
            if(s[i] == '0'){
                dp[i] = 0;
            } else {
                dp[i] = dp[i + 1];
                if(i + 1 < s.length && ((s[i] - '0') * 10 + s[i + 1] - '0') <= 26){
                    dp[i] += dp[i + 2];
                }
            }
        }
        return dp[0];
    }
    //继续优化,由于求i是取决于i + 1和i + 2,所以用两个变量滚动更新就可以了
    //nextnext 代表i+2位置的值,next代表i+1位置的值,那么可以求出i位置的值
    //然后让cur作为next,next作为nextnext就到了下一个位置
    public static int numDecodings4(String str) {
        char[] s = str.toCharArray();
        int n = s.length;
        //dp[n],dp[n + 1]不存在,所以置为0
        int next = 1,nextNext = 0;
        for(int i = n - 1,cur;i >= 0;i--){
            if(s[i] == '0'){
                cur = 0;
            } else {
                cur = next;
                if(i + 1 < n && ((s[i] - '0') * 10 + s[i + 1] - '0') <= 26){
                    cur += nextNext;
                }
            }
            nextNext = next;
            next = cur;
        }
        return next;
    }
    /*
    解码方法II:
    相对于解码方法I,多了一个*字符,这个字符可以表示1 ~9的所有字符,比如1*可以表示11到19的任意一个
    答案可能很大,对10^9 + 7取模

    思路:主要是分类讨论,对于不是'*',那么递归是f(i + 1),对于*,递归是9 * f(i + 1)
    对于i和i+1组合的情况:
    (1)i和i+1都是数字:和I相同,<=26就 + f(i + 2),>26就不加
    (2)i是数字,i+1是*:如果i是1,那么有9种情况(9*f(i+2));如果i是2,那么有6种情况,i>=3,没有情况
    (3)i是*,i+1是数字:如果i+1是1~6,那么i可以是1,2;如果i+1是7~9,i就只能是1
    (4)i和i+1都是*:一共有11~26,15种情况,就是15*f(i+2);
     */
    public static int numDecodingsII1(String str){
        return dfs1(str.toCharArray(),0);
    }
    public static int dfs1(char[] s,int i){
        if(i == s.length){
            return 1;
        }
        if(s[i] == '0'){
            return 0;
        }
        //i位置单独转化
        int ans = dfs1(s,i + 1) * (s[i] == '*' ? 9 : 1);
        //i和i+1位置共同转化,分类讨论
        if(i + 1 < s.length){
            if(s[i] != '*'){
                if(s[i + 1] != '*'){
                    if((s[i] - '0') * 10 + s[i + 1] - '0' <= 26){
                        ans += dfs1(s,i + 2);
                    }
                } else {
                    if(s[i] == '1'){
                        ans += dfs1(s,i + 2) * 9;
                    } else if(s[i] == '2'){
                        ans += dfs1(s,i + 2) * 6;
                    }
                }
            } else {
                if(s[i + 1] != '*'){
                    if(s[i + 1] >= '0' && s[i + 1] <= '6'){
                        ans += dfs1(s,i + 2) * 2;
                    } else {
                        ans += dfs1(s,i + 2);
                    }
                } else {
                    ans += 15 * dfs1(s,i + 2);
                }
            }
        }
        return ans % 1000000007;
    }
    //进行记忆化搜索,加一个记忆化数组dp
    public static long mod = (long) 1e9 + 7;
    public static int numDecodingsII2(String str){
        char[] s = str.toCharArray();
        long[] dp = new long[s.length];
        Arrays.fill(dp,-1);
        return (int) dfs2(s,0,dp);
    }
    public static long dfs2(char[] s,int i,long[] dp){
        if(i == s.length){
            return 1;
        }
        if(s[i] == '0'){
            return 0;
        }
        if(dp[i] != -1){
            return dp[i];
        }
        long ans = dfs2(s,i + 1,dp) * (s[i] == '*' ? 9 : 1);
        //i和i+1位置共同转化,分类讨论
        if(i + 1 < s.length){
            if(s[i] != '*'){
                if(s[i + 1] != '*'){
                    if((s[i] - '0') * 10 + s[i + 1] - '0' <= 26){
                        ans += dfs2(s,i + 2,dp);
                    }
                } else {
                    if(s[i] == '1'){
                        ans += dfs2(s,i + 2,dp) * 9;
                    } else if(s[i] == '2'){
                        ans += dfs2(s,i + 2,dp) * 6;
                    }
                }
            } else {
                if(s[i + 1] != '*'){
                    if(s[i + 1] >= '0' && s[i + 1] <= '6'){
                        ans += dfs2(s,i + 2,dp) * 2;
                    } else {
                        ans += dfs2(s,i + 2,dp);
                    }
                } else {
                    ans += 15 * dfs2(s,i + 2,dp);
                }
            }
        }
        ans %= mod;
        dp[i] = ans;
        return ans;
    }
    //使用动态规划
    public static int numDecodingsII3(String str){
        char[] s = str.toCharArray();
        int n = s.length;
        long[] dp = new long[n + 1];
        dp[n] = 1;
        for(int i = n - 1;i >= 0;i--){
            if(s[i] != '0'){
                dp[i] = (s[i] == '*' ? 9 : 1) * dp[i + 1];
                if(i + 1 < n){
                    if(s[i] != '*'){
                        if(s[i + 1] != '*'){
                            if((s[i] - '0') * 10 + s[i + 1] - '0' <= 26){
                                dp[i] += dp[i + 2];
                            }
                        } else {
                            if(s[i] == '1'){
                                dp[i] += dp[i + 2] * 9;
                            }
                            if(s[i] == '2'){
                                dp[i] += dp[i + 2] * 6;
                            }
                        }
                    } else {
                        if(s[i + 1] != '*'){
                            if(s[i + 1] <= '6'){
                                dp[i] += dp[i + 2] * 2;
                            } else {
                                dp[i] += dp[i + 2];
                            }
                        } else {
                            dp[i] += 15 * dp[i + 2];
                        }
                    }
                }
                dp[i] %= mod;
            }
        }
        return (int)dp[0];
    }
    //用纯粹的动态规划的视角来分析
    /*
    丑数II
    丑数就是只包含质因数为2,3或者5的正整数
    默认的第一个丑数是1,给定一个整数n,找出第n个丑数

    思路:怎么通过递推来得到下一个丑数呢?
    对于第一个丑数1,分别乘上2,3,5,得到2,3,5,第二个丑数2分别乘上2,3,5得到4,6,10
    在2,3,4,5,6,10中找到大于2的最小数,3就是第三个丑数,然后又把3乘上2,3,5....
    优化:将*2,*3,*5当做三个指针,首先在1位置分别*2,*3,*5,找到大于1最小的数2,
    此时因为是*2得到的,那么就将*2指针向后移一位移到2位置,然后*2得到4,又在得到了乘积中选择>2的数,得到3
    此时3对于的是1位置*3的结果,因此把*3指针往后移动到2位置,得到6....
    特别的,如果乘出来的数有相同的时候,那么当这个数是最小的数是,每个指针都往后移动一个

     */
    public int nthUglyNumber(int n) {
        int[] dp = new int[n + 1];
        dp[1] = 1;
        for(int i = 2,i2 = 1,i3= 1,i5 = 1,a,b,c,cur;i <= n;i++){
            a = dp[i2] * 2;
            b = dp[i3] * 3;
            c = dp[i5] * 5;
            cur = Math.min(Math.min(a,b),c);
            if(cur == a){
                i2++;
            }
            if(cur == b){
                i3++;
            }
            if(cur == c){
                i5++;
            }
            dp[i] = cur;
        }
        return dp[n];
    }
    /*
    最长有效括号
    给你一个只包含 '(' 和 ')' 的字符串，找出最长有效（格式正确且连续）括号子串的长度。

    思路:子串在i位置结尾时,往前延伸最多能有多长的最长有效串?
    如果是左括号结尾,那么答案是0,右括号往前延伸
    那么dp[i]就代表往左最多推多远是有效串,然后在dp表中求max就是答案
    如果是左括号,dp[i] = 0,如果是右括号,那么看dp[i - 1],如果此时是k,那么看dp[i - k - 1],如果是
    左括号,那么dp[i] = dp[i - k - 2] + 2 + dp[i - 1](还要看dp[i-k-1]前面是否还可以使一些串有效)
    如果不是,那么就是0
     */
    public int longestValidParentheses(String str) {
        char[] s = str.toCharArray();
        int[] dp = new int[s.length];
        int ans = 0;
        for(int i = 1,pre;i < s.length;i++){
            if(s[i] == ')'){
                pre = i - dp[i - 1] - 1;
                if(pre >= 0 && s[pre] == '('){
                    dp[i] = dp[i - 1] + 2 + (pre > 0 ? dp[pre - 1] : 0);
                }
            }
            ans = Math.max(ans,dp[i]);
        }
        return ans;
    }
}
    /*
    环绕字符串中唯一的子字符串
    定义字符串 base 为一个 "abcdefghijklmnopqrstuvwxyz" 无限环绕的字符串，所以 base 看起来是这样的：
    "...zabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd....".
    给你一个字符串 s ，请你统计并返回 s 中有多少 不同非空子串 也在 base 中出现。

    思路:以字符来做尝试,看每个字符在s串中能在base串中往前延伸的最大长度,如果有重复的字符,那么就找能延伸
    最长的那个字符,因为延伸更长的一定包含延伸更短的所有情况
     */
    public int findSubstringInWraproundString(String str) {
        int n = str.length();
        int[] s = new int[n];
        for(int i = 0;i < n;i++){
            s[i] = str.charAt(i) - 'a';
        }
        int[] dp = new int[26];
        //相当于第一个字符往左延伸的最大长度就是本身1
        dp[s[0]] = 1;
        for(int i = 1,cur,pre,len = 1;i < n;i++){
            cur = s[i];
            pre = s[i - 1];
            if((pre == 25 && cur == 0) || pre == cur - 1){
                len++;
            } else {
                len = 1;
            }
            dp[cur] = Math.max(dp[cur],len);
        }
        int ans = 0;
        for(int i = 0;i < 26;i++){
            ans += dp[i];
        }
        return ans;
    }
    /*
    不同的子序列II
    给定一个字符串 s，计算 s 的 不同非空子序列 的个数。因为结果可能很大所以返回答案需要对10^9+7取余
    字符串的 子序列 是经由原字符串删除一些（也可能不删除）字符但不改变剩余字符相对位置的一个新字符串
    例如，"ace" 是 "abcde" 的一个子序列，但 "aec" 不是。

    思路:比如说是字符串"abaab"
    看有多少子序列是以某一个字符结尾的,从a到z,建立数组int[] cnt,还没有遍历时有一个空集,那么首先
    建立一个变量all = 1,然后开始遍历字符串,对于第一个字符,之前形成的子序列如果统一都在后面加上一个
    a的话,那么出现了以a结尾的子序列,然后来到b,此时新增的子序列就是之前的子序列+b,那么出现了a,b,ab,空集
    以b结尾的子序列有2个,all更新为4,然后来到a,之前的东西保留,在每个集合后面填上a,那么得到了a,aa,ba,aba
    这四种新的集合,但是a是重复集合,此时更新以a结尾的子序列为4,all变为7;然后来到下一个a,每个集合后面填上
    a,此时纯新增了aaa,baa,abaa三个子序列,所以all变成10,a结尾的变成7....然后最后all - 1,得到答案
    可以观察到每次新增的子序列个数实际上就是all - cnt[x - 'a']
     */
    public int distinctSubseqII(String s) {
        int mod = (int) 1e9 + 7;
        char[] str = s.toCharArray();
        int[] cnt = new int[26];
        int all = 1,newAdd;
        for(char x : str){
            newAdd = (all - cnt[x - 'a'] + mod) % mod;
            all = (all + newAdd) % mod;
            cnt[x - 'a'] = (cnt[x - 'a'] + newAdd) % mod;
        }
        return (all - 1 + mod) % mod;
    }
}
