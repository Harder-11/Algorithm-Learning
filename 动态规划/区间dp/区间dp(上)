import java.util.*;
import java.lang.*;
import java.io.*;


public class Learn {
    //区间dp问题
    //区间dp可能性的展开有两种
    //(1)基于两侧端点讨论的可能性展开
    //(2)基于范围上的划分点可能性展开

    /*
    让字符串整体成为回文串的最少插入次数
    给你一个字符串 s ，每一次操作你都可以在字符串的任意位置插入任意字符。
    请你返回让 s 成为回文串的 最少操作次数 。
    「回文串」是正读和反读都相同的字符串。
     */

    //直接写递归
    public int minInsertions(String str) {
        char[] s = str.toCharArray();
        int n = s.length;
        return f1(s, 0, n - 1);
    }

    //s[l...r]这一段的字符串整体都变成回文串至少插入几个字符
    public static int f1(char[] s, int l, int r) {
        if (l == r) {
            return 0;
        }
        if (l + 1 == r) {
            return s[l] == s[r] ? 0 : 1;
        }
        if (s[l] == s[r]) {
            return f1(s, l + 1, r - 1);
        } else {
            return Math.min(f1(s, l, r - 1), f1(s, l + 1, r)) + 1;
        }
    }

    //记忆化搜索:
    public static int minInsertions1(String str) {
        char[] s = str.toCharArray();
        int n = s.length;
        int[][] dp = new int[n][n];
        for (int i = 0; i < n; i++) {
            Arrays.fill(dp[i], -1);
        }
        return f2(s, 0, n - 1, dp);
    }

    public static int f2(char[] s, int l, int r, int[][] dp) {
        if (dp[l][r] != -1) {
            return dp[l][r];
        }
        int ans;
        if (l == r) {
            ans = 0;
        } else if (l + 1 == r) {
            ans = s[l] == s[r] ? 0 : 1;
        } else {
            if (s[l] == s[r]) {
                ans = f2(s, l + 1, r - 1, dp);
            } else {
                ans = Math.min(f2(s, l, r - 1, dp), f2(s, l + 1, r, dp)) + 1;
            }
        }
        dp[l][r] = ans;
        return ans;
    }

    //严格位置依赖的动态规划
    //对于dp[][],由于l<r,那么dp表的左下半区一定不会用到,又当l==r时,,dp[l][r]=0
    //然后特判l+1==r的情况,如果s[l]==s[r],那么是0,否则是1
    //又对于每个格子,受到左边,下边和左下格子的依赖
    public static int minInsertions2(String str) {
        char[] s = str.toCharArray();
        int n = s.length;
        int[][] dp = new int[n][n];
        for (int l = 0; l < n - 1; l++) {
            dp[l][l + 1] = s[l] == s[l + 1] ? 0 : 1;
        }
        for (int l = n - 3; l >= 0; l--) {
            //r = l + 2是因为对角线都是0,对角线后一个已经填了,所以从l+2开始遍历r
            for (int r = l + 2; r < n; r++) {
                if (s[l] == s[r]) {
                    dp[l][r] = dp[l + 1][r - 1];
                } else {
                    dp[l][r] = Math.min(dp[l + 1][r], dp[l][r - 1]) + 1;
                }
            }
        }
        return dp[0][n - 1];
    }

    //空间压缩
    //每个点受到左边,下边和左下三个位置的依赖,所以用一个变量leftDown来记录左下位置的值
    public static int minInsertions3(String str) {
        char[] s = str.toCharArray();
        int n = s.length;
        if (n < 2) {
            return 0;
        }
        int[] dp = new int[n];
        dp[n - 1] = s[n - 2] == s[n - 1] ? 0 : 1;
        for (int l = n - 3, leftDown, backUp; l >= 0; l--) {
            leftDown = dp[l + 1];
            dp[l + 1] = s[l] == s[l + 1] ? 0 : 1;
            for (int r = l + 2; r < n; r++) {
                backUp = dp[r];
                if (s[l] == s[r]) {
                    dp[r] = leftDown;
                } else {
                    dp[r] = Math.min(dp[r - 1], dp[r]) + 1;
                }
                leftDown = backUp;
            }
        }
        return dp[n - 1];
    }
    /*题目2:预测赢家
    给你一个整数数组 nums 。玩家 1 和玩家 2 基于这个数组设计了一个游戏。
    玩家 1 和玩家 2 轮流进行自己的回合，玩家 1 先手。
    开始时，两个玩家的初始分值都是 0 。
    每一回合，玩家从数组的任意一端取一个(数字即，nums[0]或nums[nums.length-1])，
    取到的数字将会从数组中移除(数组长度减 1).玩家选中的数字将会加到他的得分上.当
    数组中没有剩余数字可取时，游戏结束。
    如果玩家 1 能成为赢家，返回 true 。
    如果两个玩家得分相等，同样认为玩家 1 是游戏的赢家，也返回 true 。
    你可以假设每个玩家的玩法都会使他的分数最大化。

    思路:仍然是从递归入手写动态规划
     */
    //递归方式
    public static boolean predictTheWinner(int[] nums){
        int sum = 0;
        for(int num : nums){
            sum += num;
        }
        int n = nums.length;
        //first是指先手拿到的数字最大总和
        int first = f1(nums,0,n - 1);
        int second = sum - first;
        return first >= second;
    }
    //f1:nums[l...r]范围上进行游戏,轮到玩家1
    //返回玩家1最终能获得的最多的分数
    public static int f1(int[] nums,int l,int r){
        if(l == r){
            return nums[l];
        }
        if(l == r - 1){
            return Math.max(nums[l],nums[r]);
        }
        //当玩家1选择左边的数,那么剩下l+1...r,此时轮到玩家2选,那么此时玩家2一定会选剩下
        //最小的,有可能拿左边或者右边,拿左边就是l+2,拿右边就是l+1,r-1
        int p1 = nums[l] + Math.min(f1(nums,l + 2,r),f1(nums,l + 1,r - 1));
        int p2 = nums[r] + Math.min(f1(nums,l + 1,r - 1),f1(nums,l,r - 2));
        return Math.max(p1,p2);
    }
    //严格位置依赖的动态规划,依然是l<r,dp表左下部分不要
    //对于每个格子受到左下方,下方两个,左方两个这三个格子的约束
    public static boolean predictTheWinner1(int[] nums){
        int sum = 0;
        for(int num : nums){
            sum += num;
        }
        int n = nums.length;
        int[][] dp = new int[n][n];
        for(int i = 0;i < n - 1;i++){
            dp[i][i] = nums[i];
            dp[i][i + 1] = Math.max(nums[i],nums[i + 1]);
        }
        dp[n - 1][n - 1] = nums[n - 1];
        for(int l = n - 3;l >= 0;l--){
            for(int r = l + 2;r < n;r++){
                dp[l][r] = Math.max(nums[l] + Math.min(dp[l + 2][r],dp[l + 1][r - 1]),
                        nums[r] + Math.min(dp[l + 1][r - 1],dp[l][r - 2]));
            }
        }
        int first = dp[0][n - 1];
        int second = sum - first;
        return first >= second;
    }
    /*
    题目3:多边形三角形剖分的最低得分
    你有一个凸的 n 边形，其每个顶点都有一个整数值。给定一个整数数组 values
    其中 values[i] 是第 i 个顶点的值（即顺时针顺序 ）。
    假设将多边形 剖分 为 n - 2 个三角形。对于每个三角形，该三角形的值是顶点标记的乘积
    三角剖分的分数是进行三角剖分后所有 n - 2 个三角形的值之和。
    返回 多边形进行三角剖分后可以得到的最低分 。
    基于范围上的划分点可能性展开
    思路:先确定两个端点l,r(比如说是0,5),然后在两个端点之间选择划分点

     */
    //记忆化搜索
    public static int minScoreTriangulation1(int[] arr){
        int n = arr.length;
        int[][] dp = new int[n][n];
        for(int i = 0;i < n;i++){
            for(int j = 0;j < n;j++){
                dp[i][j] = -1;
            }
        }
        return f(arr,0,n - 1,dp);
    }
    public static int f(int[] arr,int l,int r,int[][] dp){
        if(dp[l][r] != -1){
            return dp[l][r];
        }
        int ans = Integer.MAX_VALUE;
        if(l == r || l == r - 1){
            ans = 0;
        } else {
            for(int m = l + 1;m < r;m++){
                ans = Math.min(ans,f(arr,l,m,dp) + f(arr,m,r,dp) + arr[l] * arr[m] * arr[r]);
            }
        }
        dp[l][r] = ans;
        return ans;
    }
    //严格位置依赖的动态规划,任意一个格子都依赖于左侧若干格子和下方若干格子
    //比如(0,4)划分点是1,2,3,那么就依赖于(0,1)(1,4)(0,2)(2,4)(0,3)(3,4)
    //那么就从下往上,从左往右遍历就行
    public static int minScoreTriangulation(int[] arr){
        int n = arr.length;
        int[][] dp = new int[n][n];
        for(int l = n - 3;l >= 0;l--){
            for(int r = l + 2;r < n;r++){
                //全部置为最大,在后面求min时才不会出错
                //然后dp[l][l+1]都是0,不做处理,所以是l+2
                dp[l][r] = Integer.MAX_VALUE;
                for(int m = l + 1;m < r;m++){
                    dp[l][r] = Math.min(dp[l][r],dp[l][m] + dp[m][r] + arr[l] * arr[m] * arr[r]);
                }
            }
        }
        return dp[0][n - 1];
    }
    /*
    题目4:切棍子的最小成本
    有一根长度为 n 个单位的木棍，棍上从 0 到 n 标记了若干位置。例如，长度为 6 的棍子可以标记如下：
    给你一个整数数组 cuts ，其中 cuts[i] 表示你需要将棍子切开的位置。
    你可以按顺序完成切割，也可以根据需要更改切割的顺序。
    每次切割的成本都是当前要切割的棍子的长度，切棍子的总成本是历次切割成本的总和。
    对棍子进行切割将会把一根木棍分成两根较小的木棍（这两根木棍的长度和就是切割前木棍的长度）。
    返回切棍子的 最小总成本 。

    思路将cuts数组排序,排序后将数组的首尾各加上0和n,比如n=8,cuts=[2,4,6],那么就将cuts变成[0,2,4,6,8],
    这样便于求棍子的长度,比如在1-3范围内选择2作为切点,那么此时的棍子长度就是范围后一个位置的值-范围前一个位置的值就是0
    那么对于每个分割点m,得到的值就是(l...m-1)+(m+1...r)+该区间棍子长度
     */

    //记忆化搜索
    public static int minCost1(int n,int[] cuts){
        int m = cuts.length;
        Arrays.sort(cuts);
        int[] arr = new int[m + 2];
        arr[0] = 0;
        for(int i = 1;i <= m;i++){
            arr[i] = cuts[i - 1];
        }
        arr[m + 1] = n;
        int[][] dp = new int[m + 2][m + 2];
        for(int i = 1;i <= m;i++){
            for(int j = 1;j <= m;j++){
                dp[i][j] = -1;
            }
        }
        return f1(arr,1,m,dp);
    }
    //切点[l...r],决定一个顺序
    //让切点都切完,总代价最小
    public static int f1(int[] arr,int l,int r,int[][] dp){
        if(l > r){
            return 0;
        }
        if(l == r){
            return arr[r + 1] - arr[l - 1];
        }
        if(dp[l][r] != -1){
            return dp[l][r];
        }
        int ans = Integer.MAX_VALUE;
        for(int k = l;k <= r;k++){
            ans = Math.min(ans,f1(arr,l,k - 1,dp) + f1(arr,k + 1,r,dp));
        }
        ans += arr[r + 1] - arr[l - 1];
        dp[l][r] = ans;
        return ans;
    }
    //严格位置依赖版本
    public static int minCost2(int n,int[] cuts){
        int m = cuts.length;
        Arrays.sort(cuts);
        int[] arr = new int[m + 2];
        for(int i = 1;i <= m;i++){
            arr[i] = cuts[i - 1];
        }
        arr[m + 1] = n;
        int[][] dp = new int[m + 2][m + 2];
        for(int i = 1;i <= m;i++) {
            dp[i][i] = arr[i + 1] - arr[i - 1];
        }
        for(int l = m - 1,next;l >= 1;l--){
            for(int r = l + 1;r <= m;r++){
                next = Integer.MAX_VALUE;
                for(int k = l;k <= r;k++){
                    next = Math.min(next,dp[l][k - 1] + dp[k + 1][r]);
                }
                dp[l][r] = arr[r + 1] - arr[l - 1] + next;
            }
        }

        return dp[1][m];
    }
    /*
    题目5:戳气球
    有 n 个气球，编号为0 到 n - 1，每个气球上都标有一个数字
    这些数字存在数组 nums 中。
    现在要求你戳破所有的气球。戳破第 i 个气球，
    你可以获得 nums[i - 1] * nums[i] * nums[i + 1] 枚硬币。
    这里的 i - 1 和 i + 1 代表和 i 相邻的两个气球的序号。
    如果 i - 1或 i + 1 超出了数组的边界，那么就当它是一个数字为 1 的气球。
    求所能获得硬币的最大数量。

    思路:扩充数组,在左右两侧补1,因为本身边界就是当做数字是1的数字
    不能求到最先打爆的气球,因为当气球打爆之后,两侧的气球无法得知自己新的邻居是什么
    这样需要很多变量来记录左右两侧的气球,很不方便
    那么可以反过来思考,那么就尝试按照每个气球最后打爆
     */
    public static int maxCoins(int[] nums){
        int n = nums.length;
        int[] arr = new int[n + 2];
        arr[0] = arr[n + 1] = 1;
        for(int i = 0;i < n;i++){
            arr[i + 1] = nums[i];
        }
        int[][] dp = new int[n + 2][n + 2];
        for(int i = 1;i <= n;i++){
            for(int j = i;j <= n;j++){
                dp[i][j] = -1;
            }
        }
        return f2(arr,1,n,dp);
    }
    //arr[l...r]这些气球决定一个顺序,获得最大的得分,返回
    //并且一定有:arr[l-1]和arr[r+1]的气球一定没爆
    //由于此时是假设的最后打爆的气球,比如现在调用的是3~6,那么2,7气球都还在
    //此时遍历到3气球,此时可以直接调用f(4,6),因为3最后打爆,此时(4,6)两边的气球都还在,满足条件
    //然后3气球打爆得到的硬币就是arr[3] * arr[2] * arr[6](自己乘上两边的)
    public static int f2(int[] arr,int l,int r,int[][] dp){
        if(dp[l][r] != -1){
            return dp[l][r];
        }
        int ans;
        if(l == r){
            ans = arr[l - 1] * arr[l] * arr[l + 1];
        } else {
            //这里其实可以合并,只不过要先初始化ans,合并成for(int k = l;k <= r;k++)
            ans = Math.max(arr[l - 1] * arr[l] * arr[r + 1] + f2(arr,l + 1,r,dp),
                    arr[l - 1] * arr[r] * arr[r + 1] + f2(arr,l,r - 1,dp));
            for(int k = l + 1;k < r;k++){
                ans = Math.max(ans,arr[l - 1] * arr[k] * arr[r + 1] + f2(arr,l,k - 1,dp) + f2(arr,k + 1,r,dp));
            }
        }
        dp[l][r] = ans;
        return ans;
    }
    //严格位置依赖的动态规划
    public static int maxCoins1(int[] nums){
        int n = nums.length;
        int[] arr = new int[n + 2];
        arr[0] = arr[n + 1] = 1;
        for(int i = 0;i < n;i++){
            arr[i + 1] = nums[i];
        }
        int[][] dp = new int[n + 2][n + 2];
        for(int i = 1;i <= n;i++){
            dp[i][i] = arr[i - 1] * arr[i] * arr[i + 1];
        }
        for(int l = n;l >= 1;l--){
            for(int r = l + 1;r <= n;r++){
                for(int k = l;k <= r;k++){
                    dp[l][r] = Math.max(dp[l][r],arr[l - 1] * arr[k] * arr[r + 1] + dp[l][k - 1] + dp[k + 1][r]);
                }
            }
        }
        return dp[1][n];
    }
    /*题目6:布尔运算
    给定一个布尔表达式和一个期望的布尔结果 result
    布尔表达式由 0 (false)、1 (true)、& (AND)、 | (OR) 和 ^ (XOR) 符号组成。
    实现一个函数，算出有几种可使该表达式得出 result 值的括号方法
    示例 1:
    输入: s = "1^0|0|1", result = 0
    输出: 2
    解释: 两种可能的括号方法是
    1^(0|(0|1))
    1^((0|0)|1)

    思路:枚举最后一次运算的符号,比如1号是&,那么就是0~0范围答案是1方法总数 * 2~n范围答案是1的方法总数
    其他位运算同理
     */
    //记忆化搜索
    public int countEval(String str, int result) {
        char[] s = str.toCharArray();
        int n = s.length;
        int[][][] dp = new int[n][n][];
        int[] ft = f(s,0,n - 1,dp);
        return ft[result];
    }
    //s[l....r]是表达式的一部分
    //此时l,l+2,l+4...都是0或者1,l+1,l+3...都是位运算符
    //返回的小数组长度为2,ans[0]:代表false的方法数有多少种,ans[1]:代表true的方法数有多少种
    //由于这道题传参复杂,传的参数是一个数组,所以说很难写出严格位置依赖的动态规划
    public static int[] f(char[] s,int l,int r,int[][][] dp){
        if(dp[l][r] != null){
            return dp[l][r];
        }
        int f = 0;
        int t = 0;
        //只剩一个字符,那么一定是0或者1
        if(l == r){
            f = s[l] == '0' ? 1 : 0;
            t = s[l] == '1' ? 1 : 0;
        } else {
            int[] tmp;
            for(int k = l + 1,a,b,c,d;k < r;k += 2){
                tmp = f(s,l,k - 1,dp);
                a = tmp[0];
                b = tmp[1];
                tmp = f(s,k + 1,r,dp);
                c = tmp[0];
                d = tmp[1];
                if(s[k] == '&'){
                    f += a * c + a * d + b * c;
                    t += b * d;
                } else if(s[k] == '|'){
                    f += a * c;
                    t += a * d + b * c + b * d;
                } else {
                    f += a * c + b * d;
                    t += a * d + b * c;
                }
            }
        }
        int[] ft = new int[]{f,t};
        dp[l][r] = ft;
        return ft;
    }
}


