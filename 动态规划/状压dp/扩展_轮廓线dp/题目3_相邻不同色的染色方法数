import java.lang.*;
import java.io.*;
import java.util.*;


public class Learn {
    /*
    题目3:相邻不同色的染色方法数(p2435)
    给定两个参数n和m，表示n行m列的空白区域，一开始所有格子都没有颜色
    给定参数k，表示有k种颜色，颜色编号0~k-1
    你需要给每个格子染色，但是相邻的格子颜色不能相同
    相邻包括上、下、左、右四个方向
    并且给定了第0行和第n-1行的颜色状况，输入保证一定有效
    那么你只能在1~n-2行上染色，返回染色的方法数，答案对376544743取模
    2 <= k <= 4
    k = 2时，1 <= n <= 10^7，1 <= m <= 10^5
    3 <= k <= 4时，1 <= n <= 100，1 <= m <= 8

    首先看数据的量,先分析k==2的情况,如果0行和n-1行每一位都不一样,那么此时1~n-2有偶数行此时
    有1种情况,如果0行和n-1行一样,此时1~n-2的行数是奇数那么此时有1种情况,其他情况都是0

    当此时颜色数量到达4时,那么此时用00,01,10,11来表示四种颜色,那么此时每两个二进制位来
    表示一个颜色,那么此时提取颜色就是(s >> (j * 2)) & 3
    在s中把j号格的颜色改成v:s & (~(3 << (j * 2))) | (v << (j * 2))

    注意,本题必须改为状态压缩版本,否则会MLE
     */
    public static int MOD = 376544743;

    public static int LIMIT1 = 100001;
    public static int LIMIT2 = 8;
    public static int[] start = new int[LIMIT1];
    public static int[] end = new int[LIMIT1];
    public static int[][] dp = new int[LIMIT2 + 1][1 << (LIMIT2 << 1)];
    //第一行的状况和最后一行的状况
    public static int startStatus,endStatus;
    public static int n,m,k,maxs;
    public static int special(){
        if((n & 1) == 0){
            for(int i = 0;i < m;i++){
                if(start[i] == end[i]){
                    return 0;
                }
            }
        } else {
            for(int i = 0;i < m;i++){
                if(start[i] != end[i]){
                    return 0;
                }
            }
        }
        return 1;
    }
    public static int compute() {
        startStatus = endStatus = 0;
        for (int j = 0; j < m; j++) {
            startStatus = set(startStatus, j, start[j]);
            endStatus = set(endStatus, j, end[j]);
        }
        //对应递归里的当i来到n-1行,此时判断s是否和最后一行的情况有重复的
        //此时就是列来到第0列,所以dp[0][s]
        for (int s = 0; s < maxs; s++) {
            dp[0][s] = different(s, endStatus) ? 1 : 0;
        }
        for (int i = n - 2; i >= 1; i--) {
            // 处理j == m(最后一列)
            //当来到最后一列,那么后面一行的第一列的状态和当前状态是一样的,所以dp[m][s]=dp[0][s]
            //注意,这里是从下往上遍历的(调用的是f(0,0)),所以是dp[m][s] = dp[0][s]
            for (int s = 0; s < maxs; s++) {
                dp[m][s] = dp[0][s];
            }
            // 普通位置
            for (int j = m - 1; j >= 0; j--) {
                for (int s = 0; s < maxs; s++) {
                    int ans = 0;
                    for (int color = 0; color < k; color++) {
                        if ((j == 0 || get(s, j - 1) != color) && get(s, j) != color) {
                            ans = (ans + dp[j + 1][set(s, j, color)]) % MOD;
                        }
                    }
                    dp[j][s] = ans;
                }
            }
        }
        return dp[0][startStatus];
    }

    public static boolean different(int a,int b){
        for(int j = 0;j < m;j++){
            if(get(a,j) == get(b,j)){
                return false;
            }
        }
        return true;
    }
    public static int get(int s,int j){
        return (s >> (2 * j)) & 3;
    }
    //颜色状况s中,把j号格的颜色设置成v,然后把新的s返回
    //此时就先把j号为的两个位先置为0,然后再OR操作
    public static int set(int s,int j,int v){
        return s & (~(3 << (j << 1))) | (v << (j << 1));
    }

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StreamTokenizer in = new StreamTokenizer(br);
        PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));
        in.nextToken();
        n = (int) in.nval;
        in.nextToken();
        m = (int) in.nval;
        in.nextToken();
        k = (int) in.nval;
        maxs = 1 << (m << 1);
        for (int i = 0; i < m; i++) {
            in.nextToken();
            start[i] = (int) in.nval;
        }
        for (int i = 0; i < m; i++) {
            in.nextToken();
            end[i] = (int) in.nval;
        }
        if (k == 2) {
            out.println(special());
        } else {
            out.println(compute());
        }
        out.flush();
        out.close();
        br.close();
    }
}



