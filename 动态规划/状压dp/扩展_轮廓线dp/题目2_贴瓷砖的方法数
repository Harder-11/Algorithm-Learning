import java.lang.*;
import java.io.*;
import java.util.*;


public class Learn {
    /*
    题目2:贴瓷砖的方法数(poj 2411)
    给定两个参数n和m,表示n行m列的空白区域
    有无限多的1*2规格的瓷砖,目标是严丝合缝地铺满所有空白区域
    返回有多少种铺满的方法,1<=n,m<=11

    定义函数:f(i,j,s):当前来到i行j列,s表示是否竖摆轮廓线状态,返回后续有几种方法
    对于第0行,横着摆,那么就是f(0,2,0000),如果竖着摆,那么就是f(0,1,1000)
    对于后面的行,在每一列摆砖时要看右侧和上侧时候有砖
     */
    public static int MAXN = 11;
    public static long[][][] dp = new long[MAXN][MAXN][1 << MAXN];
    public static int n,m,maxs;
    public static long compute(){
        for(int i = 0;i < n;i++){
            for(int j = 0;j < m;j++){
                for(int s = 0;s < maxs;s++){
                    dp[i][j][s] = -1;
                }
            }
        }
        return f(0,0,0);
    }
    //当前来到i行j列
    //i-1行中[j...m-1]列有没有砖作为竖砖的上点,状况用s[j...m-1]表示
    //i行中,[0...j-1]列有没有座位竖砖的上点,状况用s[0..j-1]表示
    //s表示轮廓线的情况,返回后续有几种摆放的方法
    public static long f(int i,int j,int s){
        if(i == n){
            return 1;
        }
        if(j == m){
            return f(i + 1,0,s);
        }
        if(dp[i][j][s] != -1){
            return dp[i][j][s];
        }
        long ans = 0;
        //此时上方有竖砖把当前位置给占了,那么直接跳到i,j+1位置,然后把i,j位置设为0
        if(get(s,j) == 1){
            ans = f(i,j + 1,set(s,j,0));
        } else {
            //此时竖着摆
            if(i + 1 < n){
                ans = f(i,j + 1,set(s,j,1));
            }
            //此时横着摆,还要看后面一格的状态是不是1
            if(j + 1 < m && get(s,j + 1) == 0){
                ans += f(i,j + 2,s);
            }
        }
        dp[i][j][s] = ans;
        return ans;
    }

    public static int get(int s,int j){
        return (s >> j) & 1;
    }
    public static int set(int s,int j,int v){
        return v == 0 ? (s & (~(1 << j))) : (s | (1 << j));
    }


    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StreamTokenizer in = new StreamTokenizer(br);
        PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));
        while (in.nextToken() != StreamTokenizer.TT_EOF) {
            n = (int) in.nval;
            in.nextToken();
            m = (int) in.nval;
            maxs = 1 << m;
            if (n != 0 || m != 0) {
                out.println(compute());
            }
        }
        out.flush();
        out.close();
        br.close();
    }
}



