import java.lang.*;
import java.io.*;
import java.util.*;


public class Learn {
    /*
    题目2:用三种不同颜色为网络涂色
    给你两个整数 m 和 n 。构造一个 m x n 的网格，其中每个单元格最开始是白色。
    请你用 红、绿、蓝 三种颜色为每个单元格涂色。所有单元格都需要被涂色。
    涂色方案需要满足：不存在相邻两个单元格颜色相同的情况 。
    返回网格涂色的方法数。因为答案可能非常大,返回对 10^9 + 7 取余的结果。

    思路:不给无色状态,然后红色给状态0,绿色给状态1,蓝色给状态2
    先用dfs把第0行所有的状态先求出来
     */
    public static int MAXN = 1001;
    public static int MAXM = 5;
    public static int MAXS = (int) Math.pow(3,MAXM);
    public static int MOD = 1000000007;
    public static int n,m,maxs;
    public static int[][][] dp = new int[MAXN][MAXM][MAXS];
    public static int[] first = new int[MAXS];
    public static int size;
    public static void build(int rows,int cols){
        n = Math.max(rows,cols);
        m = Math.min(rows,cols);
        maxs = (int) Math.pow(3,m);
        for(int i = 0;i < n;i++){
            for(int j = 0;j < m;j++){
                for(int s = 0;s < maxs;s++){
                    dp[i][j][s] = -1;
                }
            }
        }
        size = 0;
        dfs(0,0,1);
    }
    //取得第0行所有的有效状态
    public static void dfs(int j,int s,int bit){
        if(j == m){
            first[size++] = s;
        } else {
            int left = j == 0 ? -1 : get(s,bit / 3);
            if(left != 0){
                dfs(j + 1,set(s,bit,0),bit * 3);
            }
            if(left != 1){
                dfs(j + 1,set(s,bit,1),bit * 3);
            }
            if(left != 2){
                dfs(j + 1,set(s,bit,2),bit * 3);
            }
        }
    }
    public static int f(int i,int j,int s,int bit){
        if(i == n){
            return 1;
        }
        if(j == m){
            return f(i + 1,0,s,1);
        }
        if(dp[i][j][s] != -1){
            return dp[i][j][s];
        }
        int up = get(s,bit);
        int left = j == 0 ? -1 : get(s,bit / 3);
        int ans = 0;
        if(up != 0 && left != 0){
            ans = (ans + f(i,j + 1,set(s,bit,0),bit * 3)) % MOD;
        }
        if(up != 1 && left != 1){
            ans = (ans + f(i,j + 1,set(s,bit,1),bit * 3)) % MOD;
        }
        if(up != 2 && left != 2){
            ans = (ans + f(i,j + 1,set(s,bit,2),bit * 3)) % MOD;
        }
        dp[i][j][s] = ans;
        return ans;
    }
    public static int colorTheGrid(int rows, int cols) {
        build(rows,cols);
        int ans = 0;
        for(int i = 0;i <size;i++){
            ans = (ans + f(1,0,first[i],1)) % MOD;
        }
        return ans;
    }
    public static int get(int s,int bit){
        return s / bit % 3;
    }
    public static int set(int s,int bit,int v){
        return s - get(s,bit) * bit + v * bit;
    }


    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StreamTokenizer in = new StreamTokenizer(br);
        PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));

        out.flush();
        out.close();
        br.close();
    }
}



