/*
二叉树的高频题,不包括树形dp
 */
import java.util.*;
public class learn {
    public static class TreeNode{
        public int val;
        public TreeNode left;
        public TreeNode right;
        public TreeNode(int val){
            this.val = val;
        }
    }

    //1.二叉树的层序遍历,使用map来记录层数,Queue装Integer类型
    public static List<List<Integer>> levelOrder1(TreeNode root){
        List<List<Integer>> ans = new ArrayList<>();
        if(root != null) {
            Queue<TreeNode> queue = new LinkedList<>();
            HashMap<TreeNode, Integer> levels = new HashMap<>();
            queue.add(root);
            levels.put(root, 0);
            while (!queue.isEmpty()) {
                TreeNode cur = queue.poll();
                int level = levels.get(cur);
                if (ans.size() == level) {
                    ans.add(new ArrayList<>());
                }//由于level是从0层开始的,所以如果size == level,说明List少了,就要新建一层List
                ans.get(level).add(cur.val);//往ans的指定层添加元素
                if (cur.left != null) {
                    queue.add(cur.left);
                    levels.put(cur.left, level + 1);
                }
                if (cur.right != null) {
                    queue.add(cur.right);
                    levels.put(cur.right, level + 1);
                }
            }
        }
        return ans;
    }
    //也可以不同map,用Queue装TreeNode类型,使用bfs一次处理一层
    public static List<List<Integer>> levelOrder2(TreeNode root){
        List<List<Integer>> ans = new ArrayList<>();
        if(root == null) return ans;
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        while(!queue.isEmpty()){
            List<Integer> t = new ArrayList<>();
            int qSize = queue.size();
            for(int i = 0;i < qSize;++i){
                TreeNode head = queue.poll();
                t.add(head.val);
                if(head.left != null) queue.add(head.left);
                if(head.right != null) queue.add(head.right);
            }
            ans.add(t);
        }
        return ans;
    }
    //利用TreeNode数组模拟队列:实现第二种
    public static int MAXN = 2001;//(因为二叉树结点个数小于等于2000)
    public static TreeNode[] queue = new TreeNode[MAXN];
    public static int l,r;
    public static List<List<Integer>> levelOrder3(TreeNode root){
        List<List<Integer>> ans = new ArrayList<>();
        if(root == null) return ans;
        l = r = 0;//用r和l的差值作为Queue的size
        queue[r++] = root;//将root结点放入queue
        while(l < r){//当r == l是此时Queue就为空(说明后面的结点已经没有子节点使得r++,此时就遍历完了)
            int size = r - l;
            ArrayList<Integer> t = new ArrayList<>();
            for(int i = 0;i < size;++i){
                TreeNode cur = queue[l++];
                t.add(cur.val);
                if(cur.left != null){
                    queue[r++] = cur.left;
                }
                if(cur.right != null){
                    queue[r++] = cur.right;
                }
            }
            ans.add(t);
        }
        return ans;
    }
    //2.二叉树的最大特殊宽度
    //最大宽度指每一层两个非空结点的距离最大(距离要算上本身),距离要把null算上
    //把所有的null节点补上,让该树变成一个完全二叉树,所以第i个结点的左儿子是2i,右儿子的2i + 1
    //所以思路就是创建一个队列,每层遍历找到最大宽度,每层更新
    public static int MAXN2 = 3001;
    public static TreeNode[] nq = new TreeNode[MAXN2];//结点队列
    public static int[] iq = new int[MAXN2];//编号序列
    public static int left,right;
    public static int widthOfBinaryTree(TreeNode root){
        if(root == null) return 0;
        int ans = 1;
        left = right = 0;
        nq[right] = root;//nq和iq一定同步
        iq[right++] = 1;
        while(left < right){
            int size = right - left;
            ans = Math.max(ans,iq[right - 1] - iq[left] + 1);//更新上一层的最大宽度,因为这里r先加了一,所以这里要减一
            //这里ans放在这个位置是因为如果后面if代码执行了的话,那么必定会再循环while,
            //通过if没执行,那么这里判断的就是最后一层,后面就不需要比较了
            for(int i = 0;i < size;++i){
                TreeNode node = nq[left];
                int id = iq[left++];
                if(node.left != null){
                    nq[right] = node.left;
                    iq[right++] = id * 2;
                }
                if(node.right != null){
                    nq[right] = node.right;
                    iq[right++] = id * 2 + 1;
                }
            }
        }
        return ans;
    }
    //3.求二叉树的最大深度
    public static int maxDepth(TreeNode root){
        return root == null ? 0 : Math.max(maxDepth(root.left),maxDepth(root.right)) + 1;
    }
    //4.求二叉树的最小深度(必须到达叶节点);
    public static int minDepth(TreeNode root){
        if(root == null) return 0;
        if(root.left == null && root.right == null) return 1;
        int left = Integer.MAX_VALUE;
        int right = Integer.MAX_VALUE;//将左右两边的深度定位MAX_VALUE,排除干扰
        if(root.left != null){
            left = minDepth(root.left);
        }
        if(root.right != null){
            right = minDepth(root.right);
        }
        return Math.min(left,right) + 1;
    }
    //5.由先序和中序重构二叉树
    //找到根节点,中序数组根节点的左边元素全部在左子树,右边全部在右子树
    public static TreeNode buildTree(int[] pre,int[] in){
        if(pre == null || in == null || pre.length != in.length) return null;
        HashMap<Integer,Integer> map = new HashMap<>();
        //为了能最快找到前序的root在中序的位置,用map来记录每个结点位置下标
        for(int i = 0;i < in.length;++i){
            map.put(in[i],i);
        }
        return dfs(pre,0,pre.length - 1,in,0,in.length - 1,map);
    }
    public static TreeNode dfs(int[] pre,int l1,int r1,int[] in,int l2,int r2,HashMap<Integer,Integer> map){
        if(l1 > r1){//无效范围
            return null;
        }
        TreeNode head = new TreeNode(pre[l1]);//root就是此时pre在[L1,R1]的第一个值,
        //因此建立根节点head = TreeNode(pre[l1])
        if(l1 == r1){
            return head;
        }
        int find = map.get(pre[l1]);//找到中序根节点的下标,将中序分为左右两部分
        head.left = dfs(pre,l1 + 1,l1 + find - l2,in,l2,find - 1,map);
        //对于左边,继续递归,此时左边的根节点就是L1 + 1,左侧结束的位置就是find - 1
        //可以画出pre 和 in两个数组,然后分别画出l1,r1,l2,r2,find,然后找关系
        head.right = dfs(pre,l1 + find - l2 + 1,r1,in,find + 1,r2,map);
        return head;
    }
    //6.判断完全二叉树
    //使用bfs一直查找是否有结点孩子不全(可以没有孩子,也可以有两个)
    //使用数组来模拟队列
    public static int MAX = 101;
    public static TreeNode[] Q = new TreeNode[MAX];
    public static int l0,r0;
    public static boolean isCompleteTree(TreeNode h){
        if(h == null) return true;
        l0 = r0 = 0;
        queue[r++] = h;
        //是否遇到过左右两个孩子不双全的结点
        boolean leaf = false;
        while(l < r){
            h = queue[l++];
            if((h.left == null && h.right != null) || (leaf && (h.left != null || h.right != null))){
                //(h.left != null || h.right != null)就是判断不是叶节点
                return false;
            }
            if(h.left != null){
                queue[r++] = h.left;
            }
            if(h.right != null){
                queue[r++] = h.right;
            }
            //遇到了左右两个孩子不双全的结点
            if(h.left == null || h.right == null){
                leaf = true;
            }
        }
        return true;
    }
    //7.使用小于O(n)的方法求完全二叉树的结点个数
    //方法:得到树的高度H,然后看右子树的高度是否为H,如果是,那么左树一定满,结点为2^(H-1) - 1,然后递归看右树结点
    //如果不是H,那么右树的高数是H - 2,所以此时可以把右树的结点个数算出来为2^(H-2) - 1,然后遍历左子树
    public static int countNodes(TreeNode head){
        if(head == null) return 0;
        return dfs(head,1,mostLeft(head,1));
    }
    //dfs参数:level表示当前结点在第几层,h代表最大层数
    public static int dfs(TreeNode cur,int level,int h){
        if(level == h) return 1;
        if(mostLeft(cur.right,level + 1) == h){
            //cur右树的最左结点扎到了最深层,那么可以直接求出左树的节点个数
            return (1 << (h - level)) + dfs(cur.right,level + 1,h);
            //否则就可以求出右树的结点个数
        } else return (1 << (h - level - 1)) + dfs(cur.left,level + 1,h);
    }
    //当前结点是cur,并且在level层
    //返回从cur一直不停向左,能扎到几层,然后根据上述方法求当前结点的左右子树节点的个数,然后一直递归
    public static int mostLeft(TreeNode cur,int level){
        while(cur != null){
            level++;
            cur = cur.left;
        }
        return level - 1;//因为遇到空才停,level多加了一次,所以减一
    }
}

