#include <bits/stdc++.h>
using namespace std;
using ll = long long;
const int INF = 0x3f3f3f3f;
const int N = 200005;
const int mod = 1e9 + 7;

//树链剖分 + 线段树维护 --> 树上修改与查询
//此时新加两个数组
//id[u]:存u剖分后的新编号(由重链来重新编号)
//nw[cnt]:存新编号在树中所对应的节点的权值
//此时dfs1求到fa,dep,sz,son数组,dfs2求到top,id,nw数组
//这里w是指的每个节点的点值
//建立线段树,当查询两个节点之和的时候,就可以将数剖分为若干重链,然后用线段树来查询
//这样查询的每条重链的编号都是连续的,方便线段树查询
//总复杂度:O(m(logn)^2)
struct tree{
    int l,r;
    ll add,sum;
} tr[N << 2];
int w[N];
vector<int> e[N];
int fa[N],dep[N],sz[N],son[N];
int top[N],id[N],nw[N],cnt;

void pushup(int u){
    tr[u].sum = tr[u << 1].sum + tr[u << 1 | 1].sum;
}
void pushdown(int p){
    if(tr[p].add){
        tr[p << 1].sum += tr[p].add * (tr[p << 1].r - tr[p << 1].l + 1);
        tr[p << 1 | 1].sum += tr[p].add * (tr[p << 1 | 1].r - tr[p << 1 | 1].l + 1);
        tr[p << 1].add += tr[p].add;
        tr[p << 1 | 1].add += tr[p].add;
        tr[p].add = 0;
    }
}
//对于build方法,传参(1,1,n)即可建好线段树
void build(int u,int l,int r){
    tr[u] = {l,r,0,nw[r]};
    if(l == r) return;
    int mid = (l + r) >> 1;
    build(u << 1,l,mid);
    build(u << 1 | 1,mid + 1,r);
    pushup(u);
}
//修改操作:将树上u到v的最短路径上所有结点的数值都加上z
void update(int u,int l,int r,int k){
    if(l <= tr[u].l && r >= tr[u].r){
        tr[u].add += k;
        tr[u].sum += k * (tr[u].r - tr[u].l + 1);
        return;
    }
    pushdown(u);
    int mid = (tr[u].l + tr[u].r) >> 1;
    if(l <= mid) update(u << 1,l,r,k);
    if(r >= mid + 1) update(u << 1 | 1,l,r,k);
    pushup(u);
}
void update_path(int u,int v,int k){
    while(top[u] != top[v]){
        if(dep[top[u]] < dep[top[v]]) swap(u,v);
        update(1,id[top[u]],id[u],k);
        u = fa[top[u]];
    }
    if(dep[u] < dep[v]) swap(u,v);
    update(1,id[v],id[u],k);
}
ll query(int u,int l,int r){
    if(l <= tr[u].l && r >= tr[u].r) return tr[u].sum;
    pushdown(u);
    int mid = (tr[u].l + tr[u].r) >> 1;
    ll ans = 0;
    if(l <= mid) ans += query(u << 1,l,r);
    if(r > mid) ans += query(u << 1 | 1,l,r);
    return ans;
}
//查询两个节点之间的总节点值的和
//每次都通过比较后swap保证u的深度更深
//每次调用query方法都是查询的一条重链
ll query_path(int u,int v){
    ll ans = 0;
    while(top[u] != top[v]){
        if(dep[top[u]] < dep[top[v]]) swap(u,v);
        ans += query(1,id[top[u]],id[u]);
        u = fa[top[u]];
    }
    //最后剩下根节点和可能剩下的重链头结点再进行一次查询即可
    //实际和树链剖分求LCA问题是一样的,这样u来到LCA位置,然后v在u的下方,再查找一次即可
    //每次查询的时候u和v一定是在同一条重链上的
    if(dep[u] < dep[v]) swap(u,v);
    ans += query(1,id[v],id[u]);
    return ans;
}
//修改子树:(根节点是u)
void update_tree(int u,int k){
    update(1,id[u],id[u] + sz[u] - 1,k);
}
//查询子树(根节点是u)
ll query_tree(int u){
    return query(1,id[u],id[u] + sz[u] - 1);
}

void dfs1(int u,int f){
    fa[u] = f;
    dep[u] = dep[f] + 1;
    sz[u] = 1;
    for(int v : e[u]){
        if(v == f) continue;
        dfs1(v,u);
        sz[u] += sz[v];
        if(sz[son[u]] < sz[v]) son[u] = v;
    }
}
//结点编号都是从1开始,所以cnt初始化为0
void dfs2(int u,int t){
    top[u] = t;
    id[u] = ++cnt;
    nw[cnt] = w[u];
    if(!son[u]) return;
    dfs2(son[u],t);
    for(int v : e[u]){
        if(v == fa[u] || v == son[u]) continue;
        dfs2(v,v);
    }
}

void solve(){}

int main(){
    int t;
    cin >> t;
    while(t--){
        solve();
    }
    return 0;
}