#include <bits/stdc++.h>
using namespace std;
using ll = long long;
const int INF = 0x3f3f3f3f;
const int N = 200005;
const int mod = 1e9 + 7;

/*
树链剖分
重儿子:父节点的所有子节点中子树结点数目最多的结点
轻儿子:父节点中除重儿子以外的儿子
重边:父节点和重儿子连成的边
轻边:父节点和轻儿子连成的边
重链:由多条重链链接而成的路径

结论:1.整棵树会被剖分为若干条重链
2.轻儿子一定是每条重链的顶点(特别的根节点是轻儿子)
3.任意一条路径被切分成不超过logn条链(!!!非常重要)路径是指的一条完整的从叶到叶的路径
*/
//fa[u]:存u的父节点
//dep[u]:存u的深度
//son[u]:存u的重儿子
//sz[u]:存以u为根的子树的结点数
//top[u]:存u所在重链的顶点
//流程:第一遍dfs,求到fa,dep,son数组,第二遍dfs求到top数组
//然后让两个游标沿着各自的重链向上跳,条到同一条重链上时,深度较小的那个游标所指向的点就是LCA
//总复杂度:O(n+mlogn)
vector<int> e[N];
int fa[N],dep[N],son[N],sz[N],top[N];
//第一遍dfs,求fa,son,dep数组
void dfs1(int u,int f){
    fa[u] = f;
    dep[u] = dep[f] + 1;
    sz[u] = 1;
    for(int v : e[u]){
        if(v == f) continue;
        dfs1(v,u);
        sz[u] += sz[v];
        //更改u的重儿子,当sz[son[u]] < sz[v],那么说明u的重儿子是v
        if(sz[son[u]] < sz[v]) son[u] = v;
    }
}
//第二遍dfs,求到top函数
void dfs2(int u,int t){
    top[u] = t;//记录链头
    if(!son[u]) return;//没有重儿子就直接返回
    dfs2(son[u],t);//搜索重儿子
    for(int v : e[u]){
        if(v == fa[u] || v == son[u]) continue;
        dfs2(v,v);//搜索轻儿子,轻儿子的重链顶点就是本身,所以dfs2(v,v)
    }
}
//求LCA
int lca(int u,int v){
    //没在同一条重链上
    while(top[u] != top[v]){
        //比较两个点的链头深度,这样保证u的深度是更深的那一个
        if(dep[top[u]] < dep[top[v]]){
            swap(u,v);
        }
        u = fa[top[u]];
    }
    return dep[u] < dep[v] ? u : v;
}
void solve(){}
int main(){
    int t; 
    cin >> t;
    while(t--){
        solve();
    }
    return 0;
}