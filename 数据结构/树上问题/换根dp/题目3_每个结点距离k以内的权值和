import java.lang.*;
import java.io.*;
import java.util.*;


public class Learn {
    /*
    题目4:每个结点距离k以内的权值和
    给定一棵n个点的树，每个点有点权
    到达每个节点的距离不超过k的节点就有若干个
    把这些节点权值加起来，就是该点不超过距离k的点权和
    打印每个节点不超过距离k的点权和
    注意k并不大
    注意:Java会爆栈

    定义一个数组sum[u][i]:所有到u的距离为i的点的点权和(u自己的子树内)
    那么此时sum[u][0]=u,sum[父][i]+=sum[子][i-1]
    然后定义dp[v][i]:v作为根节点时,整棵树上到v的距离为i的结点权值和
    dp[v][0]=v,dp[v][1]=sum[v][1]+u
    当i>=2时,dp[v][i]=sum[v][i]+dp[u][i-1]-sum[v][i-2]
    这里-sum[v][i-2]就是减去同时是u也是v子节点的那些节点,此时距离就是i-2
     */
    public static int MAXN = 10001;
    public static int MAXK = 21;
    public static int n,k;
    public static int[] head = new int[MAXN];
    public static int[] next = new int[MAXN << 1];
    public static int[] to = new int[MAXN << 1];
    public static int cnt;
    //sum[u][i]:以u为头的子树内,距离为i的结点权值和
    public static int[][] sum = new int[MAXN][MAXK];
    //dp[u][i]:以u作为根,距离为i的权值和
    public static int[][] dp = new int[MAXN][MAXK];

    public static void build(){
        cnt = 1;
        Arrays.fill(head,1,n + 1,0);
    }
    public static void addEdge(int u,int v){
        next[cnt] = head[u];
        to[cnt] = v;
        head[u] = cnt++;
    }
    public static void dfs1(int u,int f){
        for(int e = head[u],v;e != 0;e = next[e]){
            v = to[e];
            if(v != f){
                dfs1(v,u);
            }
        }
        for(int e = head[u],v;e != 0;e = next[e]){
            v = to[e];
            if(v != f){
                for(int j = 1;j <= k;j++){
                    sum[u][j] += sum[v][j - 1];
                }
            }
        }
    }
    public static void dfs2(int u,int f){
        for(int e = head[u],v;e != 0;e = next[e]){
            v = to[e];
            if(v != f){
                dp[v][0] = sum[v][0];
                dp[v][1] = sum[v][1] + sum[u][0];
                for(int i = 2;i <= k;i++){
                    dp[v][i] = sum[v][i] + dp[u][i - 1] - sum[v][i - 2];
                }
                dfs2(v,u);
            }
        }
    }

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StreamTokenizer in = new StreamTokenizer(br);
        PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));
        in.nextToken();
        n = (int) in.nval;
        build();
        in.nextToken();
        k = (int) in.nval;
        for (int i = 1, u, v; i < n; i++) {
            in.nextToken();
            u = (int) in.nval;
            in.nextToken();
            v = (int) in.nval;
            addEdge(u, v);
            addEdge(v, u);
        }
        for (int i = 1; i <= n; i++) {
            in.nextToken();
            sum[i][0] = (int) in.nval;
        }
        dfs1(1, 0);
        for (int i = 0; i <= k; i++) {
            dp[1][i] = sum[1][i];
        }
        dfs2(1, 0);
        for (int i = 1, ans; i <= n; i++) {
            ans = 0;
            for (int j = 0; j <= k; j++) {
                ans += dp[i][j];
            }
            out.println(ans);
        }
        out.flush();
        out.close();
        br.close();
    }
}



