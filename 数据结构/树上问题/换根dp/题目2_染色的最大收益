import java.lang.*;
import java.io.*;
import java.util.*;


public class Learn {
    /*
    对于换根dp的套路就是:
    先以结点1为根节点进行树的遍历,收集信息,dfs1过程
    然后得到1结点作为根的答案,然后从1结点开始再进行树的遍历,求解每个节点作为根的
    答案,dfs2过程
    题目2:染色的最大收益(CF1187E)
    给定一棵n个点的树，初始时所有节点全是白点
    第一次操作，你可以选择任意点染黑
    以后每次操作，必须选择已经染黑的点的相邻点继续染黑，一直到所有的点都被染完
    每次都获得，当前被染色点的白色联通块大小，作为收益
    返回可获得的最大收益和

    思路:一旦确定了开始点,那么收益是确定的,与染色顺序无关
    当u作为根节点转移成v作为根节点时时,收益的变化
    (1)染v时,增加n-size[v](此时u及其另外一颗子树都会算上)
    (2)染了v染u时,相比于u作为根,联通的大小就少了size[v],所以还要减去size[v]
    所以此时转移方程就是dp[v]=dp[u]+n-size[v]-size[v]
     */
    public static int MAXN = 200001;
    public static int n;
    public static int[] head = new int[MAXN];
    public static int[] next = new int[MAXN << 1];
    public static int[] to = new int[MAXN << 1];
    public static int cnt;
    public static int[] size = new int[MAXN];
    public static long[] dp = new long[MAXN];
    public static void build(){
        cnt = 1;
        Arrays.fill(head,1,n + 1,0);
        Arrays.fill(size,1,n + 1,0);
        Arrays.fill(dp,1,n + 1,0);
    }
    public static void addEdge(int u,int v){
        next[cnt] = head[u];
        to[cnt] = v;
        head[u] = cnt++;
    }
    //dfs1:结点i作为自己这棵子树最先染的点
    public static void dfs1(int u,int f){
        size[u] = 1;
        for(int e = head[u],v;e != 0;e = next[e]){
            v = to[e];
            if(v != f){
                dfs1(v,u);
                size[u] += size[v];
                //父节点染整棵树的收益肯定要算上子树的
                dp[u] += dp[v];
            }
        }
        //最后还要加上size[u],因为之前没算染以u为根的整棵树的收益
        dp[u] += size[u];
    }
    public static void dfs2(int u,int f){
        for(int e = head[u],v;e != 0;e = next[e]){
            v = to[e];
            if(v != f){
                dp[v] = dp[u] + n - size[v] - size[v];
                dfs2(v,u);
            }
        }
    }

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StreamTokenizer in = new StreamTokenizer(br);
        PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));
        in.nextToken();
        n = (int) in.nval;
        build();
        for (int i = 1, u, v; i < n; i++) {
            in.nextToken();
            u = (int) in.nval;
            in.nextToken();
            v = (int) in.nval;
            addEdge(u, v);
            addEdge(v, u);
        }
        dfs1(1, 0);
        dfs2(1, 0);
        long ans = 0;
        for (int i = 1; i <= n; i++) {
            ans = Math.max(ans, dp[i]);
        }
        out.println(ans);
        out.flush();
        out.close();
        br.close();
    }
}



