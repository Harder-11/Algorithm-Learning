import java.lang.*;
import java.io.*;
import java.util.*;


public class Learn {
    /*
    题目2:松鼠的新家(p3258)
    有n个节点形成一棵树
    给定一个由点编号组成的数组，表示松鼠依次要去往的地点
    (此时访问是按顺序从a1开始到a2,然后a2到a3,以此类推)
    松鼠每走到一个节点都必须拿一个糖果，否则松鼠就停止前进
    松鼠来到最后一个地点时不需要吃糖果
    打印每个节点上至少准备多少糖果才能让松鼠依次走完数组里的节点
    输出:第i行输出编号为i的房间至少要放多少个糖果
    注意:本题Java依然会爆栈

    思路:就是一个普通的树上差分问题,但是要注意,每个结点(1除外)都重复计算了一次,所以除1号结点外的每个结点-1就行
    本题使用tarjan算法求最近公共祖先
     */
    public static int MAXN = 300001;
    // 依次去往节点的顺序
    public static int[] travel = new int[MAXN];
    // 每个节点需要分配多少糖果
    public static int[] num = new int[MAXN];
    // 链式前向星建图
    public static int[] headEdge = new int[MAXN];
    public static int[] edgeNext = new int[MAXN << 1];
    public static int[] edgeTo = new int[MAXN << 1];
    public static int tcnt;
    // 以下结构都是tarjan算法所需要的
    public static int[] headQuery = new int[MAXN];
    public static int[] queryNext = new int[MAXN << 1];
    public static int[] queryTo = new int[MAXN << 1];
    public static int[] queryIndex = new int[MAXN << 1];
    public static int qcnt;
    public static boolean[] visited = new boolean[MAXN];
    // unionfind数组是tarjan算法专用的并查集结构
    public static int[] unionfind = new int[MAXN];
    // father数组不用作并查集，就是记录每个节点的父亲节点
    public static int[] father = new int[MAXN];
    // ans数组是tarjan算法的输出结果，记录每次旅行两端点的最低公共祖先
    public static int[] ans = new int[MAXN];
    public static void build(int n){
        tcnt = qcnt = 1;
        Arrays.fill(headEdge,1,n + 1,0);
        Arrays.fill(num,1,n + 1,0);
        Arrays.fill(visited,1,n + 1,false);
        Arrays.fill(headQuery,1,n + 1,0);
        for(int i = 1;i <= n;i++){
            unionfind[i] = i;
        }
    }
    public static int find(int i){
        if(i != unionfind[i]){
            unionfind[i] = find(unionfind[i]);
        }
        return unionfind[i];
    }
    public static void addEdge(int u,int v){
        edgeNext[tcnt] = headEdge[u];
        edgeTo[tcnt] = v;
        headEdge[u] = tcnt++;
    }
    public static void addQuery(int u,int v,int i){
        queryNext[qcnt] = headQuery[u];
        queryTo[qcnt] = v;
        queryIndex[qcnt] = i;
        headQuery[u] = qcnt++;
    }
    public static void dfs(int u,int f){
        for(int e = headEdge[u],v;e != 0;e = edgeNext[e]){
            v = edgeTo[e];
            if(v != f){
                dfs(v,u);
            }
        }
        for(int e = headEdge[u],v;e != 0;e = edgeNext[e]){
            v = edgeTo[e];
            if(v != f){
                num[u] += num[v];
            }
        }
    }
    public static void tarjan(int u,int f){
        visited[u] = true;
        for(int e = headEdge[u];e != 0;e = edgeNext[e]){
            int v = edgeTo[e];
            if(v != f){
                tarjan(v,u);
            }
        }
        for(int e = headQuery[u],v;e != 0;e = queryNext[e]){
            v = queryTo[e];
            if(visited[v]){
                ans[queryIndex[e]] = find(v);
            }
        }
        unionfind[u] = f;
        father[u] = f;
    }
    public static void compute(int n){
        tarjan(1,0);
        for(int i = 1,u,v,lca,lcaFather;i < n;i++){
            u = travel[i];
            v = travel[i + 1];
            lca = ans[i];
            lcaFather = father[lca];
            num[u]++;
            num[v]++;
            num[lca]--;
            num[lcaFather]--;
        }
        dfs(1,0);
        //从a2号节点开始每次都重复算了一次所以全部--
        for(int i = 2;i <= n;i++){
            num[travel[i]]--;
        }
    }

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StreamTokenizer in = new StreamTokenizer(br);
        PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));
        in.nextToken();
        int n = (int) in.nval;
        build(n);
        for (int i = 1; i <= n; i++) {
            in.nextToken();
            travel[i] = (int) in.nval;
        }
        for (int i = 1, u, v; i < n; i++) {
            in.nextToken();
            u = (int) in.nval;
            in.nextToken();
            v = (int) in.nval;
            addEdge(u, v);
            addEdge(v, u);
        }
        for (int i = 1; i < n; i++) {
            addQuery(travel[i], travel[i + 1], i);
            addQuery(travel[i + 1], travel[i], i);
        }
        compute(n);
        for (int i = 1; i <= n; i++) {
            out.println(num[i]);
        }
        out.flush();
        out.close();
        br.close();
    }
}



