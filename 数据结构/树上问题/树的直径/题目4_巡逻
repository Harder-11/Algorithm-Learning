
import java.lang.*;
import java.io.*;
import java.util.*;


public class Learn {
    /*
     题目4:巡逻(p3629)
     一共n个节点，编号1~n，结构是一棵树，每条边都是双向的
     警察局在1号点，警车每天从1号点出发，一定要走过树上所有的边，最后回到1号点
     现在为了减少经过边的数量，你可以新建k条边，把树上任意两点直接相连
     并且每天警车必须经过新建的道路正好一次
     计算出最佳的新建道路的方案，返回巡逻走边数量的最小值
     1<=n<=1e5, 1<=k<=2

     思路:当k=1,将直径的首尾相连,直径外的道路每条边就要走两次,直径内的就只用走一次
     那么此时答案就是2*(n-1)-直径+1
     难点,当k=2时怎么添边?有以下情况
     (1)建路形成的环没有公共边(类似于一个蝴蝶形状),此时答案是2(n-1)-两个环的边的数量+2(两条新建的路)
     (2)建路形成的环有公共边,此时公共边都会走两次
     那么此时走的边数=2*(n-1)-(环1路边数-公共边)-(环2路边数-公共边)+2
     那么选哪两个环最值呢?
     --先找树的直径,然后将直径的所有边都标为-1,然后在剩下的边里面找最长路径(此时-1就代表公共边会导致
     答案+1,很巧妙的一个变换)
     那么转化之后答案就是2*(n-1)-直径1-直径2+2
     */
    public static int MAXN = 100001;
    public static int n,k;
    public static int[] head = new int[MAXN];
    public static int[] next = new int[MAXN << 1];
    public static int[] to = new int[MAXN << 1];
    public static int cnt,start,end;
    public static int[] dist = new int[MAXN];
    public static int[] last = new int[MAXN];
    public static int diameter1,diameter2;
    public static boolean[] diameterPath = new boolean[MAXN];
    public static void build() {
        cnt = 1;
        Arrays.fill(head, 1, n + 1, 0);
        diameter1 = 0;
        diameter2 = 0;
        Arrays.fill(diameterPath, 1, n, false);
    }
    public static void addEdge(int u,int v){
        next[cnt] = head[u];
        to[cnt] = v;
        head[u] = cnt++;
    }
    public static void dfs(int u,int f,int c){
        last[u] = f;
        dist[u] = c + dist[f];
        for(int e = head[u];e != 0;e = next[e]){
            if(to[e] != f){
                dfs(to[e],u,1);
            }
        }
    }
    //树型dp求直径长度(第二次求直径,此时有负数权值的边)
    public static void dp(int u,int f){
        for(int e = head[u],v;e != 0;e = next[e]){
            v = to[e];
            if(v != f){
                dp(v,u);
            }
        }
        for(int e = head[u],v,w;e != 0;e = next[e]){
            v = to[e];
            if(v != f){
                //此时当该节点v和父节点u都在直径路径上,那么此时节点就是-1
                w = diameterPath[u] && diameterPath[v] ? -1 : 1;
                diameter2 = Math.max(diameter2,dist[u] + dist[v] + w);
                dist[u] = Math.max(dist[u],dist[v] + w);
            }
        }
    }
    public static void road(){
        dfs(1,0,0);
        start = 1;
        for(int i = 2;i <= n;i++){
            if(dist[i] > dist[start]){
                start = i;
            }
        }
        dfs(start,0,0);
        end = 1;
        for(int i = 2;i <= n;i++){
            if(dist[i] > dist[end]){
                end = i;
            }
        }
        diameter1 = dist[end];
    }
    public static int compute(){
        road();
        if(k == 1){
            return 2 * (n - 1) - diameter1 + 1;
        } else {
            for(int i = end;i != 0;i = last[i]){
                diameterPath[i] = true;
            }
            Arrays.fill(dist,1,n + 1,0);
            dp(1,0);
            return 2 * (n - 1) - diameter1 - diameter2 + 2;
        }
    }

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StreamTokenizer in = new StreamTokenizer(br);
        PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));
        in.nextToken();
        n = (int) in.nval;
        in.nextToken();
        k = (int) in.nval;
        build();
        for (int i = 1, u, v; i < n; i++) {
            in.nextToken();
            u = (int) in.nval;
            in.nextToken();
            v = (int) in.nval;
            addEdge(u, v);
            addEdge(v, u);
        }
        out.println(compute());
        out.flush();
        out.close();
        br.close();
    }
}



