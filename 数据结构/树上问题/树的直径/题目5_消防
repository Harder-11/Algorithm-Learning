
import java.lang.*;
import java.io.*;
import java.util.*;


public class Learn {
    /*
    题目5:消防(p2491)
    一共n个节点，编号1~n，有n-1条边连接成一棵树，每条边上有非负权值
    给定一个非负整数s，表示可以在树上选择一条长度不超过s的路径
    然后在这条路径的点上建立消防站，每个居民可以去往这条路径上的任何消防站
    目标：哪怕最远的居民走到消防站的距离也要尽量少
    返回最远居民走到消防站的最短距离

    思路:首先求到直径,然后求到直径上面的每个点作为根节点走不是直径的边的最大长度是多少
    然后使用滑动窗口维护直径上<=s的部分,其中大小是[l,r),用优先队列维护窗口最大值,此时最远距离
    就是每个结点求出来的每个点作为根节点走不是直径的边的最大长度,和start到l,r到end距离取最大值
     */
    public static int MAXN = 30001;
    public static int n,s;
    public static int[] head = new int[MAXN];
    public static int[] next = new int[MAXN << 1];
    public static int[] to = new int[MAXN << 1];
    public static int[] weight = new int[MAXN << 1];
    public static int cnt,start,end,diameter;
    public static int[] last = new int[MAXN];
    public static int[] dist = new int[MAXN];
    //pred[i]:i结点在直径上,和前一个点的距离
    public static int[] pred = new int[MAXN];
    public static boolean[] diameterPath = new boolean[MAXN];
    public static int[] maxDist = new int[MAXN];
    public static int[] queue = new int[MAXN];
    public static void build(){
        cnt = 1;
        Arrays.fill(head,1,n + 1,0);
        Arrays.fill(diameterPath,1,n + 1,false);
    }
    public static void addEdge(int u,int v,int w){
        next[cnt] = head[u];
        to[cnt] = v;
        weight[cnt] = w;
        head[u] = cnt++;
    }
    public static void road(){
        dfs(1,0,0);
        start = 1;
        for(int i = 2;i <= n;i++){
            if(dist[i] > dist[start]){
                start = i;
            }
        }
        dfs(start,0,0);
        end = 1;
        for(int i = 2;i <= n;i++){
            if(dist[i] > dist[end]){
                end = i;
            }
        }
        diameter = dist[end];
    }
    public static void dfs(int u,int f,int w){
        last[u] = f;
        dist[u] = dist[f] + w;
        pred[u] = w;
        for(int e = head[u];e != 0;e = next[e]){
            if(to[e] != f){
                dfs(to[e],u,weight[e]);
            }
        }
    }
    public static int maxDistanceExceptDiameter(int u,int f,int c){
        int ans = 0;
        for(int e = head[u],v;e != 0;e = next[e]){
            v = to[e];
            if(!diameterPath[v] && v != f){
                ans = Math.max(ans,maxDistanceExceptDiameter(v,u,c + weight[e]));
            }
        }
        return ans;
    }
    public static void distance(){
        for(int i = end;i != 0;i = last[i]){
            diameterPath[i] = true;
        }
        for(int i = end;i != 0;i = last[i]){
            maxDist[i] = maxDistanceExceptDiameter(i,0,0);
        }
    }
    //compute方法,使用滑动窗口+优先队列来维护最大值
    //这里是从右到左的滑动窗口,因为last数组只允许从end往start走
    public static int compute(){
        int suml = 0,sumr = 0;
        //h->head,t->tail分别代表单调队列的头和尾
        int h = 0,t = 0;
        int ans = Integer.MAX_VALUE;
        for(int l = end,r = end;l != 0;l = last[l]){
            while(r != 0 && sumr - suml + pred[r] <= s){
                while(h < t && maxDist[queue[t - 1]] <= maxDist[r]){
                    t--;
                }
                sumr += pred[r];
                queue[t++] = r;
                r = last[r];
            }
            //这里使用了单调队列优化滑动窗口,所以窗口内的最大值就是maxDist[queue[h]]
            ans = Math.min(ans,Math.max(Math.max(suml,maxDist[queue[h]]),diameter - sumr));
            if(queue[h] == l){
                h++;
            }
            suml += pred[l];
        }
        return ans;
    }

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StreamTokenizer in = new StreamTokenizer(br);
        PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));
        in.nextToken();
        n = (int) in.nval;
        in.nextToken();
        s = (int) in.nval;
        build();
        for (int i = 1, u, v, w; i < n; i++) {
            in.nextToken();
            u = (int) in.nval;
            in.nextToken();
            v = (int) in.nval;
            in.nextToken();
            w = (int) in.nval;
            addEdge(u, v, w);
            addEdge(v, u, w);
        }
        road();
        distance();
        out.println(compute());
        out.flush();
        out.close();
        br.close();
    }
}



