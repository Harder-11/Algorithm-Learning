import javax.swing.*;
import java.lang.*;
import java.io.*;
import java.util.*;


public class Learn {
    /*
    一个结论:如果边的权值都是正,假设结点a和结点b的最近公共祖先是c
    那么a到b的路径长度=头结点到a的长度+头结点到b的长度-2*头结点到c的长度

    题目4:紧急集合(p4281)
    一共有n个节点，编号1 ~ n，一定有n-1条边连接形成一颗树
    从一个点到另一个点的路径上有几条边，就需要耗费几个金币
    每条查询(a, b, c)表示有三个人分别站在a、b、c点上
    他们想集合在树上的某个点，并且想花费的金币总数最少
    一共有m条查询，打印m个答案
     1 <= n <= 5 * 10^5
     1 <= m <= 5 * 10^5

     有两种情况:第一种是a,b,c的共同最近公共祖先是同一个节点
     第二种是a,b的最近公共祖先x,a和c,b和c的最近公共祖先是y,其中y比x更高,那么此时到更低的最近公共祖先处
     注:本题Java会爆MLE
    */
    public static int MAXN = 500001;
    public static int LIMIT = 19;
    public static int power;
    public static int[] head = new int[MAXN];
    public static int[] next = new int[MAXN << 1];
    public static int[] to = new int[MAXN << 1];
    public static int cnt;
    public static int[] deep = new int[MAXN];
    public static int[][] stJump = new int[MAXN][LIMIT];
    public static int together;
    public static long cost;
    public static void build(int n){
        power = log2(n);
        cnt = 1;
        Arrays.fill(head,1,n + 1,0);
    }
    public static int log2(int n){
        int ans = 0;
        while((1 << ans) <= (n >> 1)){
            ans++;
        }
        return ans;
    }
    public static void addEdge(int u,int v){
        next[cnt] = head[u];
        to[cnt] = v;
        head[u] = cnt++;
    }
    public static void dfs(int u,int f){
        deep[u] = deep[f] + 1;
        stJump[u][0] = f;
        for(int p = 1;p <= power;p++){
            stJump[u][p] = stJump[stJump[u][p - 1]][p - 1];
        }
        for(int e = head[u];e != 0;e = next[e]){
            if(to[e] != f){
                dfs(to[e],u);
            }
        }
    }
    public static int lca(int a,int b){
        if(deep[a] < deep[b]){
            int tmp = a;
            a = b;
            b = tmp;
        }
        for(int p = power;p >= 0;p--){
            if(deep[stJump[a][p]] >= deep[b]){
                a = stJump[a][p];
            }
        }
        if(a == b){
            return a;
        }
        for(int p = power;p >= 0;p--){
            if(stJump[a][p] != stJump[b][p]){
                a = stJump[a][p];
                b = stJump[b][p];
            }
        }
        return stJump[a][0];
    }
    //核心代码
    public static void compute(int a,int b,int c){
        int h1 = lca(a,b),h2 = lca(a,c),h3 = lca(b,c);
        int high = h1 != h2 ? (deep[h1] < deep[h2] ? h1 : h2) : h1;
        int low = h1 != h2 ? (deep[h1] > deep[h2] ? h1 : h2) : h3;
        //汇聚在低的那个祖先汇聚一定是路程最短
        together = low;
        cost = (long) deep[a] + deep[b] + deep[c] - 2 * deep[high] - deep[low];
    }



    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StreamTokenizer in = new StreamTokenizer(br);
        PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));
        in.nextToken();
        int n = (int) in.nval;
        in.nextToken();
        int m = (int) in.nval;
        build(n);
        for (int i = 1, u, v; i < n; i++) {
            in.nextToken();
            u = (int) in.nval;
            in.nextToken();
            v = (int) in.nval;
            addEdge(u, v);
            addEdge(v, u);
        }
        dfs(1, 0);
        for (int i = 1, a, b, c; i <= m; i++) {
            in.nextToken();
            a = (int) in.nval;
            in.nextToken();
            b = (int) in.nval;
            in.nextToken();
            c = (int) in.nval;
            compute(a, b, c);
            out.println(together + " " + cost);
        }
        out.println();
        out.flush();
        out.close();
        br.close();
    }
}



