
import java.lang.*;
import java.io.*;
import java.util.*;


public class Learn {
    /*
    题目5:货车运输(p1967)
    一共有n座城市，编号1 ~ n
    一共有m条双向道路，每条道路(u, v, w)表示有一条限重为w，从u到v的双向道路
    从一点到另一点的路途中，汽车载重不能超过每一条道路的限重
    每条查询(a, b)表示从a到b的路线中，汽车允许的最大载重是多少
    如果从a到b无法到达，那么认为答案是-1
    一共有q条查询，返回答案数组
    1 <= n <= 10^4
    1 <= m <= 5 * 10^4
    1 <= q <= 3 * 10^4
    0 <= w <= 10^5
    1 <= u, v, a, b <= n

    思路:能走权值大的边就走,所以是最大生成树保证联通就行
    建好树之后使用ST表,其中stMin[i][p]表示i号结点往上跳2^p层的最小权值是多少
    此时st[i][p]=min(st[i][p-1],st[st[i][p-1]][p-1])
    */
    public static int MAXN = 10001;
    public static int MAXM = 50001;
    public static int LIMIT = 21;
    public static int power;
    public static int[][] edges = new int[MAXM][3];
    //Kruskal算法需要的并查集
    public static int[] father = new int[MAXN];
    public static boolean[] visited = new boolean[MAXN];
    public static int[] head = new int[MAXN];
    public static int[] next = new int[MAXM << 1];
    public static int[] to = new int[MAXM << 1];
    public static int[] weight = new int[MAXM << 1];
    public static int cnt;
    public static int[] deep = new int[MAXN];
    public static int[][] stJump = new int[MAXN][LIMIT];
    public static int[][] stMin = new int[MAXN][LIMIT];
    public static int log2(int n){
        int ans = 0;
        while((1 << ans) <= (n >> 1)){
            ans++;
        }
        return ans;
    }
    public static int find(int i){
        if(i != father[i]){
            father[i] = find(father[i]);
        }
        return father[i];
    }
    public static void addEdge(int u,int v,int w){
        next[cnt] = head[u];
        to[cnt] = v;
        weight[cnt] = w;
        head[u] = cnt++;
    }
    public static void build(int n) {
        power = log2(n);
        cnt = 1;
        for (int i = 1; i <= n; i++) {
            father[i] = i;
        }
        Arrays.fill(visited, 1, n + 1, false);
        Arrays.fill(head, 1, n + 1, 0);
    }
    public static void kruskal(int m){
        Arrays.sort(edges,1,m + 1,(a,b) -> b[2] - a[2]);
        for(int i = 1,a,b,fa,fb;i <= m;i++){
            a = edges[i][0];
            b = edges[i][1];
            fa = find(a);
            fb = find(b);
            if(fa != fb){
                father[fa] = fb;
                addEdge(a,b,edges[i][2]);
                addEdge(b,a,edges[i][2]);
            }
        }
    }
    //w是父亲结点f到当前结点u的权值
    public static void dfs(int u,int w,int f){
        visited[u] = true;
        if(f == 0){
            deep[u] = 1;
            stJump[u][0] = u;
            stMin[u][0] = Integer.MAX_VALUE;
        } else {
            deep[u] = deep[f] + 1;
            stJump[u][0] = f;
            stMin[u][0] = w;
        }
        for(int p = 1;p <= power;p++){
            stJump[u][p] = stJump[stJump[u][p - 1]][p - 1];
            stMin[u][p] = Math.min(stMin[u][p - 1],stMin[stJump[u][p - 1]][p - 1]);
        }
        for(int e = head[u];e != 0;e = next[e]){
            if(!visited[to[e]]){
                dfs(to[e],weight[e],u);
            }
        }
    }
    public static int lca(int a,int b){
        if(find(a) != find(b)){
            return -1;
        }
        if(deep[a] < deep[b]){
            int tmp = a;
            a = b;
            b = tmp;
        }
        int ans = Integer.MAX_VALUE;
        for(int p = power;p >= 0;p--){
            if(deep[stJump[a][p]] >= deep[b]){
                ans = Math.min(ans,stMin[a][p]);
                a = stJump[a][p];
            }
        }
        if(a == b){
            return ans;
        }
        for(int p = power;p >= 0;p--){
            if(stJump[a][p] != stJump[b][p]){
                ans = Math.min(ans,Math.min(stMin[a][p],stMin[b][p]));
                a = stJump[a][p];
                b = stJump[b][p];
            }
        }
        //之后还要跳一步,所以这里还要比较一次
        ans = Math.min(ans,Math.min(stMin[a][0],stMin[b][0]));
        return ans;
    }


    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StreamTokenizer in = new StreamTokenizer(br);
        PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));
        in.nextToken();
        int n = (int) in.nval;
        in.nextToken();
        int m = (int) in.nval;
        for (int i = 1; i <= m; i++) {
            in.nextToken();
            edges[i][0] = (int) in.nval;
            in.nextToken();
            edges[i][1] = (int) in.nval;
            in.nextToken();
            edges[i][2] = (int) in.nval;
        }
        build(n);
        kruskal(m);
        //由于整个图可能有若干个集团,所以要每个点都递归
        for (int i = 1; i <= n; i++) {
            if (!visited[i]) {
                dfs(i, 0, 0);
            }
        }
        in.nextToken();
        int q = (int) in.nval;
        for (int i = 1, a, b; i <= q; i++) {
            in.nextToken();
            a = (int) in.nval;
            in.nextToken();
            b = (int) in.nval;
            out.println(lca(a, b));
        }
        out.flush();
        out.close();
        br.close();
    }
}



