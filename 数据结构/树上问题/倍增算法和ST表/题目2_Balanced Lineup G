import java.lang.*;
import java.io.*;
import java.util.*;


public class Learn {
    /*
    构建最大值和最小值的ST表
    题目2:Balanced Lineup G(p2880)
    给定一个长度为n的数组arr,一共有m次查询
    每次查询arr[l...r]上的最大值和最小值
    每次查询只需要打印最大值和最小值之差

    思路:基于最大值的ST表
    此时ST表stJump[i][j]的含义从i开始往下数2^j个数,其中最大值是多少
    此时转移方程就是st[i][p] = max(st[i][p-1],st[i+2^(p-1)][p-1])
    (转移方程本质就是把2^p拆成前2^(p-1)里的最大值和后2^(p-1)里的最大值作比较)
     */

    /*
    ST表的使用范围:
    如果A区间和B区间可能有重叠的部分
    但是并不影响A+B区间的答案,就能通过A区间答案和B区间答案加工出来
    那么对应的区间询问,就是一个可重复贡献问题
    例如:区间最大值,区间最小值,区间公约数等,但是区间求和不符合要求
    再例如:区间按位与,区间按位或,ST表都能高效解决

    ST表的优势和劣势
    RMQ(Range Max/Min Query)问题可以用ST表维护,也可以用线段树维护
    ST表的优势:构建过程的时间是O(nlogn),单词查询时间是O(1),代码量较小
    劣势:需要的空间较大,能维护的信息非常有限,不支持修改操作
     */
    public static int MAXN = 50001;
    public static int LIMIT = 16;
    public static int[] arr = new int[MAXN];
    //log2[i] : 查询<=i的情况下,最大的2的幂是多少
    public static int[] log2 = new int[MAXN];
    public static int[][] stMax = new int[MAXN][LIMIT];
    public static int[][] stMin = new int[MAXN][LIMIT];
    public static void build(int n){
        log2[0] = -1;
        for(int i = 1;i <= n;i++){
            log2[i] = log2[i >> 1] + 1;
            //第0列是自己往后走2^0个数,就是本身
            stMax[i][0] = arr[i];
            stMin[i][0] = arr[i];
        }
        for(int p = 1;p <= log2[n];p++){
            //这里i循环退出的条件就是i+2^(p-1)<n
            for(int i = 1;i + (1 << p) - 1 <= n;i++){
                stMax[i][p] = Math.max(stMax[i][p - 1],stMax[i + (1 << (p - 1))][p - 1]);
                stMin[i][p] = Math.min(stMin[i][p - 1],stMin[i + (1 << (p - 1))][p - 1]);
            }
        }
    }
    public static int query(int l,int r){
        int p = log2[r - l + 1];
        //此时p是小于等于r-l+1的最大的二的次幂,所以这里要判断前p个和后p个的最大,最小值
        //(就算有重合部分也没关系)
        int a = Math.max(stMax[l][p],stMax[r - (1 << p) + 1][p]);
        int b = Math.min(stMin[l][p],stMin[r - (1 << p) + 1][p]);
        return a - b;
    }

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StreamTokenizer in = new StreamTokenizer(br);
        PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));
        in.nextToken();
        int n = (int) in.nval;
        in.nextToken();
        int m = (int) in.nval;
        for (int i = 1; i <= n; i++) {
            in.nextToken();
            arr[i] = (int) in.nval;
        }
        build(n);
        for (int i = 1, l, r; i <= m; i++) {
            in.nextToken();
            l = (int) in.nval;
            in.nextToken();
            r = (int) in.nval;
            out.println(query(l, r));
        }
        out.println();
        out.flush();
        out.close();
        br.close();
    }
}


