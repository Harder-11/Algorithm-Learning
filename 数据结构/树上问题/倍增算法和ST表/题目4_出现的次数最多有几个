import java.lang.*;
import java.io.*;
import java.util.*;


public class Learn {
    /*
    题目4:出现的次数最多有几个?
    给定一个长度为n的数组arr,该数组一定是有序的
    一共有m次查询,每次查询arr[l...r]上出现的次数最多的数有几个?

    思路:将相同的数字当做一个桶,由于是有序的,那么记录每个桶的左右边界和桶内元素的个数
    对于每个查询就按桶来看
     */
    public static int MAXN = 100001;
    public static int LIMIT = 17;
    public static int[] arr = new int[MAXN];
    public static int[] log2 = new int[MAXN];
    //将不同的数分到不同的桶中
    public static int[] bucket = new int[MAXN];
    //i号桶的左边界
    public static int[] left = new int[MAXN];
    //i号桶的右边界
    public static int[] right = new int[MAXN];
    //对每个桶词频统计的ST表
    public static int[][] stMax = new int[MAXN][LIMIT];
    public static void build(int n){
        arr[0] = -0x3f3f3f3f;
        int cnt = 0;
        //精简的写法,同时更新left和right数组
        for(int i = 1;i <= n;i++) {
            if (arr[i - 1] != arr[i]) {
                right[cnt] = i - 1;
                left[++cnt] = i;
            }
            //不需要对词频进行统计,右边界-左边界+1就是词频
            //这里的bucket实际就是把arr中的每个数字换成了其从小到大排序的编号(从1开始)
            bucket[i] = cnt;
        }
        right[cnt] = n;
        log2[0] = -1;
        for(int i = 1;i <= n;i++){
            log2[i] = log2[i >> 1] + 1;
            stMax[i][0] = right[i] - left[i] + 1;
        }
        for(int p = 1;p <= log2[cnt];p++){
            for(int i = 1;i + (1 << p) - 1 <= cnt;i++){
                stMax[i][p] = Math.max(stMax[i][p - 1],stMax[i + (1 << (p - 1))][p - 1]);
            }
        }
    }
    public static int query(int l,int r){
        if(l > r){
            int tmp = l;
            l = r;
            r = tmp;
        }
        int lbucket = bucket[l];
        int rbucket = bucket[r];
        //此时属于一个桶里面
        if(lbucket == rbucket){
            return r - l + 1;
        }
        //c是中间部分
        //a是最左侧的桶在l~r范围上的数字有几个
        //b是最右侧的桶在l~r范围上的数字有几个
        int a = right[lbucket] - l + 1,b = r - left[rbucket] + 1,c = 0;
        //查中间的桶的最大数字
        if(lbucket + 1 < rbucket){
            int from = lbucket + 1,to = rbucket - 1,p = log2[to - from + 1];
            c = Math.max(stMax[from][p],stMax[to - (1 << p) + 1][p]);
        }
        return Math.max(a,Math.max(b,c));
    }



    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StreamTokenizer in = new StreamTokenizer(br);
        PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));

        out.println();
        out.flush();
        out.close();
        br.close();
    }
}


