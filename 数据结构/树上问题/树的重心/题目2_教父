
import java.lang.*;
import java.io.*;
import java.util.*;


public class Learn {
    /*
    题目2:教父
    一共有n个结点,编号1~n,有n-1条边形成一棵树
    返回所有的重心点

    思路:树的重心第二种求解方式
    以某个节点为根时,每棵子树的结点数不超过总结点树的一半,那么这个节点是重心
    使用maxSub[u]来统计每个结点的最大子树的总结点数,然后遍历是否满足<=n/2
    */
    public static int MAXN = 50001;

    public static int n;

    public static int[] head = new int[MAXN];

    public static int[] next = new int[MAXN << 1];

    public static int[] to = new int[MAXN << 1];

    public static int cnt;

    public static int[] size = new int[MAXN];

    public static int[] maxsub = new int[MAXN];
    public static void build(){
        cnt = 1;
        Arrays.fill(head,1,n + 1,0);
    }
    public static void addEdge(int u,int v){
        next[cnt] = head[u];
        to[cnt] = v;
        head[u] = cnt++;
    }
    public static void dfs(int u,int f){
        size[u] = 1;
        maxsub[u] = 0;
        for(int e = head[u];e != 0;e = next[e]){
            int v = to[e];
            if(v != f){
                dfs(v,u);
                size[u] += size[v];
                maxsub[u] = Math.max(maxsub[u],size[v]);
            }
        }
        maxsub[u] = Math.max(maxsub[u],n - size[u]);
    }



    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StreamTokenizer in = new StreamTokenizer(br);
        PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));
        in.nextToken();
        n = (int) in.nval;
        build();
        for (int i = 1, u, v; i < n; i++) {
            in.nextToken();
            u = (int) in.nval;
            in.nextToken();
            v = (int) in.nval;
            addEdge(u, v);
            addEdge(v, u);
        }
        dfs(1, 0);
        int m = 0;
        int[] centers = new int[2];
        for (int i = 1; i <= n; i++) {
            if (maxsub[i] <= n / 2) {
                centers[m++] = i;
            }
        }
        if (m == 1) {
            out.println(centers[0]);
        } else { // m == 2
            out.println(centers[0] + " " + centers[1]);
        }
        out.flush();
        out.close();
        br.close();
    }
}



