
import java.lang.*;
import java.io.*;
import java.util.*;


public class Learn {
    /*
    题目3:牛群聚集(p2986)
    一共有n个节点，编号1~n，每个点有牛的数量
    一共有n-1条边把所有点联通起来形成一棵树，每条边有权值
    想把所有的牛汇聚在一点，希望走过的总距离最小
    返回总距离最小是多少

    利用重心的性质：
    树上的边权如果都>=0，不管边权怎么分布，所有节点都走向重心的总距离和最小
    使用点权和就行,size[u]=size[a]+size[b]+....+u的点权,此时求到重心
    求到重心之后统计边权path[x],然后每个点的点权 * path[x]就是答案

    注意,此题Java会爆栈,C++不会
    */
    public static int MAXN = 100001;
    public static int n;
    //i号农场牛的数量
    public static int[] cow = new int[MAXN];
    public static int cowSum;
    public static int[] head = new int[MAXN];
    public static int[] next = new int[MAXN << 1];
    public static int[] to = new int[MAXN << 1];
    public static int[] weight = new int[MAXN << 1];
    public static int cnt;
    public static int best,center;
    //从1号结点开始dfs过程中,以i为头的树,点权和(牛的总量)
    public static int[] size = new int[MAXN];
    //path[i]:从重心结点开始dfs的过程中,从重心到达i节点距离
    public static int[] path = new int[MAXN];
    public static void build(){
        cnt = 1;
        Arrays.fill(head,1,n + 1,0);
        cowSum = 0;
        best = Integer.MAX_VALUE;
    }
    public static void addEdge(int u,int v,int w){
        next[cnt] = head[u];
        to[cnt] = v;
        weight[cnt] = w;
        head[u] = cnt++;
    }
    //求到重心的位置
    public static void findCenter(int u,int f) {
        size[u] = cow[u];
        for (int e = head[u], v; e != 0; e = next[e]) {
            v = to[e];
            if (v != f) {
                findCenter(v, u);
            }
        }
        int maxsub = 0;
        for(int e = head[u],v;e != 0;e = next[e]){
            v = to[e];
            if(v != f){
                size[u] += size[v];
                maxsub = Math.max(maxsub,size[v]);
            }
        }
        maxsub = Math.max(maxsub,cowSum - size[u]);
        if(maxsub < best){
            best = maxsub;
            center = u;
        }
    }
    //建立每个结点的path值
    public static void setWeights(int u,int f){
        for(int e = head[u],v;e != 0;e = next[e]){
            v = to[e];
            if(v != f){
                path[v] = path[u] + weight[e];
                setWeights(v,u);
            }
        }
    }
    //求答案,此时不需要size数组了
    public static long compute(){
        for(int i = 1;i <= n;i++){
            cowSum += cow[i];
        }
        findCenter(1,0);
        path[center] = 0;
        setWeights(center,0);
        long ans = 0;
        for(int i = 1;i <= n;i++){
            ans += (long) cow[i] * path[i];
        }
        return ans;
    }

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StreamTokenizer in = new StreamTokenizer(br);
        PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));
        in.nextToken();
        n = (int) in.nval;
        build();
        for (int i = 1; i <= n; i++) {
            in.nextToken();
            cow[i] = (int) in.nval;
        }
        for (int i = 1, u, v, w; i < n; i++) {
            in.nextToken();
            u = (int) in.nval;
            in.nextToken();
            v = (int) in.nval;
            in.nextToken();
            w = (int) in.nval;
            addEdge(u, v, w);
            addEdge(v, u, w);
        }
        out.println(compute());
        out.flush();
        out.close();
        br.close();
    }
}



