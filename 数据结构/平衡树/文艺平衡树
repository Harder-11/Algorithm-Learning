#include <bits/stdc++.h>
using namespace std;
using ll = long long;
const int INF = 0x3f3f3f3f;
const int N = 200005;
const int mod = 1e9 + 7;

/*
文艺平衡树(p3391)
维护一个有序数列,提供以下操作:
翻转一个区间[l,r]
输出一行n个整数,表示原始序列经过m次翻转之后的结果

splay树可以动态维护一个有序序列,中序遍历就是该有序序列
splay树也可以维护一个区间翻转序列,中序遍历就是每次区间翻转之后的序列
*/

struct node {
    int s[2],p,v;
    int size,tag;//懒标记,在区间翻转的时候可以进行懒更新
    void init(int p1,int v1){
        p = p1;
        v = v1;
        size = 1;
    }
} tr[N];
int root,idx,n,m;

void pushup(int x){
    tr[x].size = tr[tr[x].s[0]].size + tr[tr[x].s[1]].size + 1;
}

void rotate(int x){
    int y = tr[x].p,z = tr[y].p;
    int k = tr[y].s[1] == x;
    tr[y].s[k] = tr[x].s[k ^ 1];
    tr[tr[x].s[k ^ 1]].p = y;
    tr[x].s[k ^ 1] = y;
    tr[y].p = x;
    tr[z].s[tr[z].s[1] == y] = x;
    tr[x].p = z;
    pushup(y),pushup(x);
}

void splay(int x,int k){
    while(tr[x].p != k){
        int y = tr[x].p,z = tr[y].p;
        if(z != k){
            (tr[y].s[0] == x) ^ (tr[z].s[0] == y) ? rotate(x) : rotate(y);
        }
        rotate(x);
    }
    if(k == 0) root = x;
}

void insert(int v){
    int x = root,p = 0;
    while(x){
        p = x;
        x = tr[x].s[v > tr[x].v];
    }
    x = ++idx;
    tr[p].s[v > tr[p].v] = x;
    tr[x].init(p,v);
    splay(x,0);
}


//下传懒更新
void pushdown(int x){
    if(tr[x].tag){
        swap(tr[x].s[0],tr[x].s[1]);
        tr[tr[x].s[0]].tag ^= 1;
        tr[tr[x].s[1]].tag ^= 1;
        tr[x].tag = 0;
    }
}


//返回第k个节点编号
int get_k(int k){
    int x = root;
    while(1){
        pushdown(x);
        int y = tr[x].s[0];
        if(tr[y].size + 1 < k){
            k -= tr[y].size + 1;
            x = tr[x].s[1];
        } else if(tr[y].size >= k) x = y;
        else return x;
    }
}

//中序遍历
void output(int x){
    pushdown(x);
    if(tr[x].s[0]) output(tr[x].s[0]);
    if(tr[x].v >= 1 && tr[x].v <= n){
        cout << tr[x].v << " ";
    }
    if(tr[x].s[1]) output(tr[x].s[1]);
}

void solve(){
    insert(INF),insert(-INF);
    cin >> n >> m;
    for(int i = 1;i <= n;i++) insert(i);
    while(m--){
        //把[l,r]夹在l - 1,r + 1之间
        int l,r;
        cin >> l >> r;
        //由于有一个-INF的哨兵,所以要向右偏移一个位置
        l = get_k(l),r = get_k(r + 2);
        //把区间所有的节点都旋转到同一颗子树上面
        splay(l,0),splay(r,l);
        //打上懒标记
        tr[tr[r].s[0]].tag ^= 1;
    }
    output(root);
}

int main(){
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    int t = 1;
    //cin >> t;
    while(t--){
        solve();
    }
    return 0;
}