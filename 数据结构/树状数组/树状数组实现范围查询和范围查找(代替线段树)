import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.*;
import java.lang.*;
import java.io.*;


public class Learn {
    /*
    树状数组范围增加,范围查询模版(p3372)
    实现query[l,r],只需要实现query(k)(1...k的累加和)
    仍然使用差分数组,对于原数组的元素A[i]=D[1]+D[2]+...+D[i]
    那么范围查询时A1+A2+A3+...+Ak=(D1)+(D1+D2)+(D1+D2+D3)+.....
    那么此时就是k*D1+(k-1)D2+(k-2)D3+....+(k-(k-1))Dk
    合并起来就是k*(i从1到k对Di求和) - i从1到k对(i-1)*Di求和
    那么此时使用两个树状数组来维护i从1到k对Di求和,和i从1到k对(i-1)Di求和
     */
    public static int MAXN = 100001;
    //维护原始差分信息
    public static long[] info1 = new long[MAXN];
    //维护差分数组加工后的信息:(i-1)Di
    public static long[] info2 = new long[MAXN];
    public static int n,m;
    public static int lowbit(int i){
        return i & -i;
    }
    public static void add(long[] tree,int i,long v){
        while(i <= n){
            tree[i] += v;
            i += lowbit(i);
        }
    }
    public static long sum(long[] tree,int i){
        long ans = 0;
        while(i > 0){
            ans += tree[i];
            i -= lowbit(i);
        }
        return ans;
    }
    //原始数组中[l...r]每个数值+v
    public static void add(int l,int r,long v){
        add(info1,l,v);
        add(info1,r + 1,-v);
        add(info2,l,(l - 1) * v);
        add(info2,r + 1,-(r * v));
    }
    public static long range(int l,int r){
        return sum(info1,r) * r - sum(info1,l - 1) * (l - 1) -
                sum(info2,r) + sum(info2,l - 1);
    }
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StreamTokenizer in = new StreamTokenizer(br);
        PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));
        while (in.nextToken() != StreamTokenizer.TT_EOF) {
            n = (int) in.nval;
            in.nextToken();
            m = (int) in.nval;
            long cur;
            for(int i = 1;i <= n;i++){
                in.nextToken();
                cur = (long) in.nval;
                add(i,i,cur);
            }
            long v;
            for(int i = 1,op,l,r;i <= m;i++){
                in.nextToken();
                op = (int) in.nval;
                if(op == 1){
                    in.nextToken();
                    l = (int) in.nval;
                    in.nextToken();
                    r = (int) in.nval;
                    in.nextToken();
                    v = (long) in.nval;
                    add(l,r,v);
                } else {
                    in.nextToken();
                    l = (int) in.nval;
                    in.nextToken();
                    r = (int) in.nval;
                    System.out.println(range(l,r));
                }
            }
        }
        out.flush();
        out.close();
        br.close();
    }
}