import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.*;
import java.lang.*;
import java.io.*;


public class Learn {
    /*
    题目1:逆序对数量(p1908)
    给定一个长度为n的数组arr,如果i < j且arr[i] > arr[j],那么(i,j)就是一个逆序对
    求arr中逆序对的数量
    1 <= n <= 5e5,1 <= arr[i] <= 1e9

    方法1:归并分治,建立函数f(l,r),统计l,r范围内逆序对的数量并返回,同时在统计完成后让arr[l...r]有序
    这样在归并之后可以用双指针来统计逆序对(O(n)的复杂度,所以总复杂度是O(nlogn)),更方便
    方法2:树状数组,建立一个词频数组,然后从右往左遍历,查当前点右侧<=89的前缀和有多少个,然后将该位置的值
    添加到词频数组中,那么此时用树状数组代替词频统计数组,又因为arr[i]会到1e9,那么就要离散化处理
    将原数组进行排序,然后去重,最后将下标代替原始的值,这样得到的答案和原数组也是一样的
     */
    public static int MAXN = 500001;
    public static int[] arr = new int[MAXN];
    public static int[] sort = new int[MAXN];
    public static int[] tree = new int[MAXN];
    public static int n,m;
    public static int lowbit(int i){
        return i & -i;
    }
    public static void add(int i,int v){
        while(i <= m){
            tree[i] += v;
            i += lowbit(i);
        }
    }
    public static long sum(int i){
        long ans = 0;
        while(i > 0){
            ans += tree[i];
            i -= lowbit(i);
        }
        return ans;
    }
    public static long compute(){
        Arrays.sort(sort,1,n + 1);
        m = 1;
        for(int i = 2;i <= n;i++){
            if(sort[m] != sort[i]){
                sort[++m] = sort[i];
            }
        }
        long ans = 0;
        for(int i = 1;i <= n;i++){
            arr[i] = rank(arr[i]);
        }
        for(int i = n;i >= 1;i--){
            add(arr[i],1);
            ans += sum(arr[i] - 1);
        }
        return ans;
    }
    public static int rank(int v){
        int l = 1,r = m,mid;
        int ans = 0;
        while(l <= r){
            mid = (l + r) >> 1;
            if(sort[mid] >= v){
                ans = mid;
                r = mid - 1;
            } else {
                l = mid + 1;
            }
        }
        return ans;
    }
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StreamTokenizer in = new StreamTokenizer(br);
        PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));
        in.nextToken();
        n = (int) in.nval;
        for(int i = 1;i <= n;i++){
            in.nextToken();
            arr[i] = (int) in.nval;
            sort[i] = arr[i];
        }
        System.out.println(compute());
        out.flush();
        out.close();
        br.close();
    }
}