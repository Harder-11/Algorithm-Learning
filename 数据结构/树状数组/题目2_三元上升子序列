import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.*;
import java.lang.*;
import java.io.*;


public class Learn {
    /*
    题目2:三元上升子序列(p1637)
    给定一个数组arr,如果i<j<k且arr[i]<arr[j]<arr[k]
    那么称(i,j,k)为一个升序三元组,返回arr中升序三元组的数量
    1 <= n <= 3e4

    思路:建立两个数组分别是up1,up2,表示以v结尾的上升一元组和二元组的数量(词频)
    那么此时up2就是找<=up2[i]的前缀和,所以就是单点增加,范围查找来找到up2的值(从右往左遍历)
    那么上升三元组的数量就是上升二元组的数量的前缀和,那么在up2中找前缀和就可以得到答案
     */
    public static int MAXN = 30001;
    public static int[] arr = new int[MAXN];
    public static int[] sort = new int[MAXN];
    public static long[] tree1 = new long[MAXN];
    public static long[] tree2 = new long[MAXN];
    public static int n,m;
    public static int lowbit(int i){
        return i & -i;
    }
    public static void add(long[] tree,int i,long c){
        while(i <= m){
            tree[i] += c;
            i += lowbit(i);
        }
    }
    public static long sum(long[] tree,int i){
        long ans = 0;
        while(i > 0){
            ans += tree[i];
            i -= lowbit(i);
        }
        return ans;
    }
    public static long compute(){
        Arrays.sort(sort,1,n + 1);
        m = 1;
        for(int i = 2;i <= n;i++){
            if(sort[m] != sort[i]){
                sort[++m] = sort[i];
            }
        }
        for(int i = 1;i <= n;i++){
            arr[i] = rank(arr[i]);
        }
        long ans = 0;
        for(int i = 1;i <= n;i++){
            ans += sum(tree2,arr[i] - 1);
            add(tree1,arr[i],1);
            add(tree2,arr[i],sum(tree1,arr[i] - 1));
        }
        return ans;
    }
    public static int rank(int v){
        int l = 1,r = m,mid;
        int ans = 0;
        while(l <= r){
            mid = (l + r) >> 1;
            if(sort[mid] >= v){
                ans = mid;
                r = mid - 1;
            } else {
                l = mid + 1;
            }
        }
        return ans;
    }
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StreamTokenizer in = new StreamTokenizer(br);
        PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));
        in.nextToken();
        n = (int) in.nval;
        for(int i = 1;i <= n;i++){
            in.nextToken();
            arr[i] = (int) in.nval;
            sort[i] = arr[i];
        }
        System.out.println(compute());
        out.flush();
        out.close();
        br.close();
    }
}