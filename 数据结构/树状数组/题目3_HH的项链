import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.*;
import java.lang.*;
import java.io.*;


public class Learn {
    /*
     题目3:HH的项链(p1972)
     一共有n个位置，每个位置颜色给定，i位置的颜色是arr[i]
     一共有m个查询，question[i] = {li, ri}
     表示第i条查询想查arr[li..ri]范围上一共有多少种不同颜色
     返回每条查询的答案
     1 <= n、m、arr[i] <= 10^6
     1 <= li <= ri <= n

     思路:树状数组 + 离线处理
     对于查询数组,将右边界进行排序(连同下标一起),准备一个数组用于记录;同时维持一个map,其中key是颜色,value是颜色出现
     的最右位置,初识时value都是0
     此时开始遍历arr,当此时的颜色在map中不存在时,就填入map中,然后修改记录数组当前位置+1
     如果颜色已经在map中,得到此时颜色在map中记录的最右位置i
     那么此时修改map中的颜色的最右位置,然后把记录数组i位置改为0,将当前位置改为1
     直到来到此时排序后的查询数组的第一个r位置,然后利用树状数组进行查询范围和,得到的答案添加
     到ans数组中(此时查询数组是带着原始下标i的)
     */
    public static int MAXN = 1000010;
    public static int[] tree = new int[MAXN];
    public static int[][] query = new int[MAXN][3];
    public static int[] ans = new int[MAXN];
    public static int[] map = new int[MAXN];
    public static int[] arr = new int[MAXN];
    public static int n,m;
    public static int lowbit(int i){
        return i & -i;
    }
    public static void add(int i,int v){
        while(i <= n){
            tree[i] += v;
            i += lowbit(i);
        }
    }
    public static int sum(int i){
        int ans = 0;
        while(i > 0){
            ans += tree[i];
            i -= lowbit(i);
        }
        return ans;
    }
    public static int range(int l,int r) {
        return sum(r) - sum(l - 1);
    }
    public static void compute(){
        Arrays.sort(query,1,m + 1,(a,b)->a[1] - b[1]);
        for(int s = 1,q = 1,l,r,i;q <= m;q++){
            r = query[q][1];
            for(;s <= r;s++){
                int color = arr[s];
                if(map[color] != 0){
                    add(map[color],-1);
                }
                add(s,1);
                map[color] = s;
            }
            l = query[q][0];
            i = query[q][2];
            ans[i] = range(l,r);
        }
    }

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StreamTokenizer in = new StreamTokenizer(br);
        PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));
        in.nextToken();
        n = (int) in.nval;
        for(int i = 1;i <= n;i++){
            in.nextToken();
            arr[i] = (int) in.nval;
        }
        in.nextToken();
        m = (int) in.nval;
        for(int i = 1;i <= m;i++){
            in.nextToken();
            query[i][0] = (int) in.nval;
            in.nextToken();
            query[i][1] = (int) in.nval;
            query[i][2] = i;
        }
        compute();
        for(int i = 1;i <= m;i++){
            System.out.println(ans[i]);
        }
        out.flush();
        out.close();
        br.close();
    }
}