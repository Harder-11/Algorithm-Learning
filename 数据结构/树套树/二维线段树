#include <iostream>
#include <cstring>
#include <algorithm>
using namespace std;
using ll = long long;
const int INF = 0x3f3f3f3f;
const int N = 1050;
const int mod = 1e9 + 7;
const double eps = 1e-9;
const int hs = 1331;
#define uls u << 1
#define urs u << 1 | 1
#define vls v << 1
#define vrs v << 1 | 1
#define mid ((l + r) >> 1)

/*
二维线段树,可以维护二维表的信息,比如区域和,区域最值等
二维线段树就是线段树套线段树,在外层线段树的每个结点上再开一棵内层线段树
外层线段树用来维护行的数据,内层线段树用来维护列的数据

以维护区间和为例,点修(3,2)+5
1.外层经过的节点均入内
2.内层经过的结点均修改
时间 Q * logN * logM

如果要查询区间和,比如(2,2)到(4,3)的区间和
1.外层覆盖即入内
2.内层覆盖即返回
*/

int n,sum[N << 2][N << 2];

void changeY(int u,int v,int l,int r,int y,int a){
    //修改值的时候,内层经过的点全部都修改
    sum[u][v] += a;
    if(l == r) return;
    if(y <= mid) changeY(u,vls,l,mid,y,a);
    else changeY(u,vrs,mid + 1,r,y,a);
}

void changeX(int u,int l,int r,int x,int y,int a){
    //外层经过的节点仍然是全部都修改
    changeY(u,1,1,n,y,a);
    if(l == r) return;
    if(x <= mid) changeX(uls,l,mid,x,y,a);
    else changeX(urs,mid + 1,r,x,y,a);
}

int queryY(int u,int v,int l,int r,int y1,int y2){
    //内层覆盖即返回
    if(y1 <= l && y2 >= r) return sum[u][v];
    if(y2 <= mid) return queryY(u,vls,l,mid,y1,y2);
    else if(y1 >= mid + 1) return queryY(u,vrs,mid + 1,r,y1,y2);
    //以上条件都不满足,那么就在两边查找
    else return queryY(u,vls,l,mid,y1,mid) + queryY(u,vrs,mid + 1,r,mid + 1,y2);
}

int queryX(int u,int l,int r,int x1,int x2,int y1,int y2){
    if(x1 <= l && r <= x2) return queryY(u,1,1,n,y1,y2);
    if(x2 <= mid) return queryX(uls,l,mid,x1,x2,y1,y2);
    else if(x1 >= mid + 1) return queryX(urs,mid + 1,r,x1,x2,y1,y2);
    else return queryX(uls,l,mid,x1,mid,y1,y2) + queryX(urs,mid + 1,r,mid + 1,x2,y1,y2);
}

void solve(){
    int op,x,y,a,x1,x2,y1,y2;
    while(~scanf("%d",&op)){
    if(op==0) scanf("%d",&n),
              memset(sum,0,sizeof(sum));
    if(op==1) scanf("%d%d%d",&x,&y,&a),
              changeX(1,1,n,x+1,y+1,a);
    if(op==2) scanf("%d%d%d%d",&x1,&y1,&x2,&y2),
              printf("%d\n",queryX(1,1,n,x1+1,x2+1,y1+1,y2+1));
    if(op==3) break;
    }
}

int main(){
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    int t = 1;
    //cin >> t;
    while(t--){
        solve();
    }
    return 0;
}