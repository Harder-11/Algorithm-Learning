import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.*;
import java.lang.*;
import java.io.*;


public class Learn {
    /*
    线段树支持范围增加,范围查询
    维护最大值

    */
    public static int MAXN = 100001;
    public static long[] arr = new long[MAXN];
    public static long[] max = new long[MAXN << 2];
    public static long[] add = new long[MAXN << 2];
    public static void up(int i){
        max[i] = Math.max(max[i << 1],max[i << 1 | 1]);
    }
    public static void lazy(int i,long v){
        max[i] += v;
        add[i] += v;
    }
    public static void down(int i){
        if(add[i] != 0){
            lazy(i << 1,add[i]);
            lazy(i << 1 | 1,add[i]);
            add[i] = 0;
        }
    }
    public static void build(int l,int r,int i){
        if(l == r){
            max[i] = arr[i];
        } else {
            int mid = (l + r) >> 1;
            build(l,mid,i << 1);
            build(mid + 1,r,i << 1 | 1);
            up(i);
        }
    }
    public static void add(int jobl,int jobr,long jobv,int l,int r,int i){
        if(jobl <= l && jobr >= r){
            lazy(i,jobv);
        } else {
            int mid = (l + r) >> 1;
            down(i);
            if(jobl <= mid){
                add(jobl,jobr,jobv,l,mid,i << 1);
            }
            if(jobr >= mid + 1){
                add(jobl,jobr,jobv,mid + 1,r,i << 1 | 1);
            }
            up(i);
        }
    }
    public static long query(int jobl,int jobr,int l,int r,int i){
        if(jobl <= l && r <= jobr){
            return max[i];
        }
        int mid = (l + r) >> 1;
        down(i);
        long ans = Long.MIN_VALUE;
        if(jobl <= mid){
            ans = Math.max(ans,query(jobl,jobr,l,mid,i << 1));
        }
        if(jobr >= mid + 1){
            ans = Math.max(ans,query(jobl,jobr,mid + 1,r,i << 1 | 1));
        }
        return ans;
    }

    public static void main(String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StreamTokenizer in = new StreamTokenizer(br);
        PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));
        out.flush();
        out.close();
        br.close();
    }

}