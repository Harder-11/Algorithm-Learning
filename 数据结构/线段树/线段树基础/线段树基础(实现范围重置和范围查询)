import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.*;
import java.lang.*;
import java.io.*;


public class Learn {
    /*
    线段树实现范围重置和范围查询
    创建一个boolean update[i]表示是否有重置任务,change[i]表示要重置的数
    然后此时sum[i]=(r-l+1)*change[i]
    此时是将update作为lazy数组往下递推

    */
    public static int MAXN = 100001;
    public static long[] arr = new long[MAXN];
    public static long[] sum = new long[MAXN << 2];
    public static long[] change = new long[MAXN << 2];
    public static boolean[] update = new boolean[MAXN << 2];
    public static void up(int i){
        sum[i] = sum[i << 1] + sum[i << 1 | 1];
    }
    public static void lazy(int i,long v,int n){
        sum[i] = v * n;
        change[i] = v;
        update[i] = true;
    }
    public static void down(int i,int rn,int ln){
        if(update[i]){
            lazy(i << 1,change[i],ln);
            lazy(i << 1 | 1,change[i],rn);
            update[i] = false;
        }
    }
    public static void build(int l,int r,int i){
        if(l == r){
            sum[i] = arr[l];
        } else {
            int mid = (l + r) >> 1;
            build(l,mid,i << 1);
            build(mid + 1,r,i << 1 | 1);
            up(i);
        }
        change[i] = 0;
        update[i] = false;
    }
    public static void update(int jobl,int jobr,long jobv,int l,int r,int i){
        if(jobl <= l && jobr >= r){
            lazy(i,jobv,r - l + 1);
        } else {
            int mid = (l + r) >> 1;
            down(i,mid - l + 1,r - mid);
            if(jobl <= mid){
                update(jobl,jobr,jobv,l,mid,i << 1);
            }
            if(jobr >= mid + 1){
                update(jobl,jobr,jobv,mid + 1,r,i << 1 | 1);
            }
            up(i);
        }
    }
    public static long query(int jobl,int jobr,int l,int r,int i){
        if(jobl <= l && jobr >= r){
            return sum[i];
        }
        int mid = (l + r) >> 1;
        down(i,mid - l + 1,r - mid);
        long ans = 0;
        if(jobl <= mid){
            ans += query(jobl,jobr,l,mid,i << 1);
        }
        if(jobr >= mid + 1){
            ans += query(jobl,jobr,mid + 1,r,i << 1 | 1);
        }
        return ans;
    }

    public static void main(String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StreamTokenizer in = new StreamTokenizer(br);
        PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));
        out.flush();
        out.close();
        br.close();
    }

}