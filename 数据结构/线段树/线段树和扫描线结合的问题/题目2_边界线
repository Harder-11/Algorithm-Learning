import java.lang.*;
import java.io.*;
import java.util.*;


public class Learn {
    /*
    天际线问题(p1904)
    题目略

    思路:注意的点(1):对于两栋楼互相紧挨着不好处理,那么对于每栋大楼的右边界都-1
    (2)由于横坐标的范围很大,那么此时需要离散化:把所有房子的左右端点以及右端点减去1
    存在一个数组中,然后排序,利用排序后的下标(从1开始给之前的坐标重新赋值)
    (将右端点减去1一并排序同样是为了解决两栋房子左右端点重合的问题)
    建立一个大根堆,存放[高,右边界],根据高度排序,然后从1开始遍历,只要左边界<=i就存入
    堆中,然后每次查是否有过期的,最后得到一个每个位置的高度数组,然后去重即可
     */
    public static int MAXN = 10001;
    public static int[] xsort = new int[MAXN];
    public static int[] height = new int[MAXN];
    public List<List<Integer>> getSkyline(int[][] arr) {
        int n = arr.length;
        int m = prepare(arr,n);
        PriorityQueue<int[]> heap = new PriorityQueue<>((a,b)->b[0] - a[0]);
        for(int i = 1,j = 0;i <= m;i++){
            for(;j < n && arr[j][0] <= i;j++){
                heap.add(new int[]{arr[j][2],arr[j][1]});
            }
            while(!heap.isEmpty() && heap.peek()[1] < i){
                heap.poll();
            }
            if(!heap.isEmpty()){
                height[i] = heap.peek()[0];
            }
        }
        List<List<Integer>> ans = new ArrayList<>();
        for(int i = 1,pre = 0;i <= m;i++){
            if(pre != height[i]){
                ans.add(Arrays.asList(xsort[i],height[i]));
            }
            pre = height[i];
        }
        return ans;
    }
    public static int rank(int n,int v){
        int ans = 0;
        int l = 1,r = n,mid;
        while(l <= r){
            mid = (l + r) >> 1;
            if(xsort[mid] >= v){
                ans = mid;
                r = mid - 1;
            } else {
                l = mid + 1;
            }
        }
        return ans;
    }
    public static int prepare(int[][] arr,int n){
        int size = 0;
        for(int i = 0;i < n;i++){
            xsort[++size] = arr[i][0];
            xsort[++size] = arr[i][1] - 1;
            xsort[++size] = arr[i][1];
        }
        Arrays.sort(xsort,1,size + 1);
        int m = 1;
        for(int i = 1;i <= size;i++){
            if(xsort[m] != xsort[i]){
                xsort[++m] = xsort[i];
            }
        }
        for(int i = 0;i < n;i++){
            arr[i][0] = rank(m,arr[i][0]);
            arr[i][1] = rank(m,arr[i][1] - 1);
        }
        Arrays.sort(arr,0,n,(a,b)->a[0] - b[0]);
        Arrays.fill(height,1,m + 1,0);
        return m;
    }



    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StreamTokenizer in = new StreamTokenizer(br);
        PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));

        out.flush();
        out.close();
        br.close();
    }
}


