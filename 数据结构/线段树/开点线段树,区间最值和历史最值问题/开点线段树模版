import java.lang.*;
import java.io.*;
import java.util.*;


public class Learn {
    /*
    开点线段树,区间最值操作和历史最值
    开点线段树:可以支持很大的范围,一开始不为每个范围都分配空间
    当真的需要开辟左侧,右侧的空间时再临时申请
    父范围的空间编号i,利用cnt自增给左右两侧申请的空间,记录在left[i]和right[i]里
    除此之外和线段树没有区别

    适用范围:需要支持的范围很大,但是实际操作的数目并不大
    此时用开点线段树去尝试(实际是赌),使用的空间约等于:操作数量 * 数高 * 2,适量调大即可
    但是开点线段树在标准稍微严一点的题就会被卡,所以不常用
    */

    /*
    题目1:动态开点线段树(p2781)
    一共有n个位置,编号1~n,一开始所有的位置都是0,实现如下两个操作,一共会调用m次
    操作1 l r v : 把l~r范围内的每个数增加v
    操作2 l r : 返回l~r范围的累加和
    1<=n<=1e9,1<=m<=1e3
     */
    public static int LIMIT = 80001;
    public static int cnt;
    public static int[] left = new int[LIMIT];
    public static int[] right = new int[LIMIT];
    public static long[] sum = new long[LIMIT];
    public static long[] add = new long[LIMIT];
    public static void up(int h,int l,int r){
        sum[h] = sum[l] + sum[r];
    }
    public static void lazy(int i,long v,int n){
        sum[i] += v * n;
        add[i] += v;
    }
    public static void down(int i,int ln,int rn){
        if(add[i] != 0){
            if(left[i] == 0){
                left[i] = ++cnt;
            }
            if(right[i] == 0){
                right[i] = ++cnt;
            }
            lazy(left[i],add[i],ln);
            lazy(right[i],add[i],rn);
            add[i] = 0;
        }
    }
    public static void add(int jobl,int jobr,long jobv,int l,int r,int i){
        if(jobl <= l && r <= jobr){
            lazy(i,jobv,r - l + 1);
        } else {
            int mid = (l + r) >> 1;
            down(i,mid - l + 1,r - mid);
            if(jobl <= mid){
                if(left[i] == 0){
                    left[i] = ++cnt;
                }
                add(jobl,jobr,jobv,l,mid,left[i]);
            }
            if(jobr >= mid + 1){
                if(right[i] == 0){
                    right[i] = ++cnt;
                }
                add(jobl,jobr,jobv,mid + 1,r,right[i]);
            }
            up(i,left[i],right[i]);
        }
    }
    public static long query(int jobl,int jobr,int l,int r,int i){
        if(jobl <= l && r <= jobr){
            return sum[i];
        }
        int mid = (l + r) >> 1;
        down(i,mid - l + 1,r - mid);
        long ans = 0;
        if(jobl <= mid){
            if(left[i] != 0){
                ans += query(jobl,jobr,l,mid,left[i]);
            }
        }
        if(jobr >= mid + 1){
            if(right[i] != 0){
                ans += query(jobl,jobr,mid + 1,r,right[i]);
            }
        }
        return ans;
    }
    public static void clear(){
        Arrays.fill(left,1,cnt + 1,0);
        Arrays.fill(right,1,cnt + 1,0);
        Arrays.fill(sum,1,cnt + 1,0);
        Arrays.fill(add,1,cnt + 1,0);
    }

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StreamTokenizer in = new StreamTokenizer(br);
        PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));
        in.nextToken();
        int n = (int) in.nval;
        in.nextToken();
        int m = (int) in.nval;
        cnt = 1;
        long jobv;
        for (int i = 1, op, jobl, jobr; i <= m; i++) {
            in.nextToken();
            op = (int) in.nval;
            if (op == 1) {
                in.nextToken();
                jobl = (int) in.nval;
                in.nextToken();
                jobr = (int) in.nval;
                in.nextToken();
                jobv = (long) in.nval;
                add(jobl, jobr, jobv, 1, n, 1);
            } else {
                in.nextToken();
                jobl = (int) in.nval;
                in.nextToken();
                jobr = (int) in.nval;
                out.println(query(jobl, jobr, 1, n, 1));
            }
        }
        out.flush();
        out.close();
        br.close();
    }

}


