#include <bits/stdc++.h>
using namespace std;
using ll = long long;
const int INF = 0x3f3f3f3f;
const int N = 200005;
const int mod = 1e9 + 7;
const double eps = 1e-9;
const int hs = 1331;
const double PI = acos(-1);
#define ls u << 1
#define rs u << 1 | 1

/*
利用权值线段树代替splay树或者FHQ Treap
思路:把除了操作4以外其他操作所设计的数,先离散化,再用权值线段树
来维护这些数的出现次数,即可实现所有的操作

*/

int n,m,id,opt[N],a[N],b[N];
int sum[N << 2];

void pushup(int u){
    sum[u] = sum[ls] + sum[rs];
}

void change(int u,int l,int r,int x,int k){
    if(l == r){
        sum[u] += k;
        return;
    }
    int mid = (l + r) >> 1;
    if(x <= mid) change(ls,l,mid,x,k);
    else change(rs,mid + 1,r,x,k);
    pushup(u);
}

//求排名,即求前缀和
int q_rank(int u,int l,int r,int x,int y){
    if(x <= l && r <= y) return sum[u];
    int s = 0;
    int mid = (l + r) >> 1;
    if(x <= mid) s += q_rank(ls,l,mid,x,y);
    if(y >= mid + 1) s += q_rank(rs,mid + 1,r,x,y);
    return s;
}

//查询排名x的数
int q_num(int u,int l,int r,int x){
    if(l == r) return l;
    int mid = (l + r) >> 1;
    //如果x <= sum[ls]就往左子树找,否则往右子树找,同时x - sum[ls]
    if(x <= sum[ls]) return q_num(ls,l,mid,x);
    else return q_num(rs,mid + 1,r,x - sum[ls]);
}

void solve(){
    cin >> n;
    for(int i = 1;i <= n;i++){
        cin >> opt[i] >> a[i];
        if(opt[i] != 4) b[++m] = a[i];
    }
    sort(b + 1,b + m + 1);
    m = unique(b + 1,b + m + 1) - b - 1;
    for(int i = 1;i <= n;i++){
        if(opt[i] != 4) id = lower_bound(b + 1,b + m + 1,a[i]) - b;
        if(opt[i] == 1) change(1,1,m,id,1);
        if(opt[i] == 2) change(1,1,m,id,-1);
        if(opt[i] == 3){
            cout << (id > 1 ? (q_rank(1,1,m,1,id - 1) + 1) : 1) << '\n';
        }
        if(opt[i] == 4){
            cout << b[q_num(1,1,m,a[i])] << '\n';
        }
        if(opt[i] == 5){
            int rk = q_rank(1,1,m,1,id - 1);
            cout << b[q_num(1,1,m,rk)] << '\n';
        }
        if(opt[i] == 6){
            int rk = q_rank(1,1,m,1,id) + 1;
            cout << b[q_num(1,1,m,rk)] << '\n';
        }
    }
}

int main(){
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    int t = 1;
    //cin >> t;
    while(t--){
        solve();
    }
    return 0;
}