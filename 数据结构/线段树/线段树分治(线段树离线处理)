#include <bits/stdc++.h>
using namespace std;
using ll = long long;
const int INF = 0x3f3f3f3f;
const int N = 400005;
const int mod = 1e9 + 7;
const double eps = 1e-9;
const int hs = 1331;
const double PI = acos(-1);
#define ls u << 1
#define rs u << 1 | 1
#define mid ((l + r) >> 1)
mt19937_64 rnd(chrono::steady_clock::now().time_since_epoch().count());
typedef unsigned long long ull;

/*
线段树分治(线段树与离线询问)
离线优化:对时间区间[1,k]建一棵线段树,对于每条边,将它存在的时间线
[l,r]最多分为O(logk)段,用vector挂在线段树的结点上
线段树分治过程:
1.遍历的时候,从根节点出发,每到一个节点,将挂在该节点上的所有边合并,然后递归处理
左右儿子;如果发现有某条边合并之后会出现奇环,那么当前线段树节点所对应的时间区间都不会出现
二分图,逐个输出NO
2.到达叶节点的时候,如果合并了所有挂在当前节点的上的边,依旧满足二分图的性质,那么可以直接输出YES
3.回溯的时候,由于并查集不支持删边,我们使用可撤销并查集,即用一个栈记录下所有对并查集的操作
由于可撤销,那么不能路径压缩,为保证时间复杂度,要按秩合并(按两棵树的高度合并)
*/

int n,m,k,fa[N],high[N],top;
//栈
struct node {
    //这里记录的是更高的那一棵树
    int x,y,hy;
} st[N];
//结点
vector<pair<int,int>> tr[N];
bool ans[N];

int find(int x){
    while(x != fa[x]) x = fa[x];
    return fa[x];
}

//合并集合
void merge(int x,int y){
    x = find(x),y = find(y);
    if(high[x] > high[y]) swap(x,y);
    st[++top] = {x,y,high[y]};
    fa[x] = y;
    //注意这里特判,等高的话高度要 +1
    high[y] += (high[x] == high[y]);
}

void insert(int u,int l,int r,int L,int R,pair<int,int> e){
    if(L > r || R < l) return;
    if(L <= l && r <= R){
        //往线段树上挂边
        tr[u].push_back(e);
        return;
    }
    insert(ls,l,mid,L,R,e);
    insert(rs,mid + 1,r,L,R,e);
}

//线段树分治
void calc(int u,int l,int r){
    //0没有奇环
    int flag = 0;
    int now = top;
    for(auto e : tr[u]){
        merge(e.first,e.second + n);
        merge(e.second,e.first + n);
        if(find(e.first) == find(e.second)){
            flag = 1;
            break;
        }
    }
    if(!flag){
        if(l == r) ans[l] = 1;
        else {
            calc(ls,l,mid);
            calc(rs,mid + 1,r);
        }
    }
    while(top > now){
        node t = st[top--];
        fa[t.x] = t.x;
        high[t.y] = t.hy;
    }
}

void solve(){
    cin >> n >> m >> k;
    for(int i = 1;i <= 2 * n;i++) fa[i] = i;
    for(int i = 1,x,y,l,r;i <= m;i++){
        cin >> x >> y >> l >> r;
        insert(1,1,k,l + 1,r,{x,y});
    }
    calc(1,1,k);
    for(int i = 1;i <= k;i++){
        cout << (ans[i] ? "Yes" : "No") << '\n';
    }
}

int main(){
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    int t = 1;
    //cin >> t;
    while(t--){
        solve();
    }
    return 0;
}