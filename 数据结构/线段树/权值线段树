#include <bits/stdc++.h>
using namespace std;
using ll = long long;
const int INF = 0x3f3f3f3f;
const int N = 500005;
const int mod = 1e9 + 7;
const double eps = 1e-9;
const int hs = 1331;
const double PI = acos(-1);
#define ls u << 1
#define rs u << 1 | 1

/*
逆序对问题(权值线段树 + 离散化)
权值线段树可以维护区间内数的出现次数,区间范围是数据的值域
离散化仍然是:排序,去重,二分
*/

//b是辅助数组,帮助离散化
int n,m,a[N],b[N];
//s用来维护区间和
int sum[N << 2];

void pushup(int u){
    sum[u] = sum[ls] + sum[rs];
}

void change(int u,int l,int r,int x){
    if(l == r){
        sum[u]++;
        return;
    }
    int mid = (l + r) >> 1;
    if(x <= mid) change(ls,l,mid,x);
    else change(rs,mid + 1,r,x);
    pushup(u);
}

ll query(int u,int l,int r,int x,int y){
    if(x <= l && r <= y) return sum[u];
    ll s = 0;
    int mid = (l + r) >> 1;
    if(x <= mid) s += query(ls,l,mid,x,y);
    if(y > mid) s += query(rs,mid + 1,r,x,y);
    return s;
}

void solve(){
    cin >> n;;
    for(int i = 1;i <= n;i++){
        cin >> a[i];
        b[i] = a[i];
    }
    sort(b + 1,b + n + 1);
    ll s = 0;
    for(int i = 1;i <= n;i++){
        int id = lower_bound(b + 1,b + n + 1,a[i]) - b;
        change(1,1,n,id);
        //查询有多少大于它的数
        s += query(1,1,n,id + 1,n);
    }
    cout << s << '\n';
}

int main(){
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    int t = 1;
    //cin >> t;
    while(t--){
        solve();
    }
    return 0;
}