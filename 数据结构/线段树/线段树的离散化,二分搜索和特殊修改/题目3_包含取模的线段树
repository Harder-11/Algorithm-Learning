import java.lang.*;
import java.io.*;
import java.util.*;


public class Learn {
    /*
    题目3:包含取模的线段树(CF438D)
    操作 1 l r : 查询arr[l...r]上的累加和
    操作 2 l r x : 把arr[l...r]上的每个数字对x取模
    操作 3 k x : 把arr[k]上的数字设置为x
    1<=n,m<=1e5,操作1得到的结果可能超过int范围

    对于取模,依然不能再O(1)的复杂度内算出sum数组,那么就不能懒更新,只能一个一个算
    注意到,只要最大的数字是1,那么不论怎么模都是1,那么此时可以剪枝
    同时只要一个数字k取模比自己更小的数,那么此时模完之后k一定减小到小于原先的一半
    所以取余操作(保证x < k)最多取logk次,那么当max < x,就不进行操作
     */
    public static int MAXN = 100001;
    public static int[] arr = new int[MAXN];
    public static long[] sum = new long[MAXN << 2];
    public static int[] max = new int[MAXN << 2];
    public static void up(int i){
        sum[i] = sum[i << 1] + sum[i << 1 | 1];
        max[i] = Math.max(max[i << 1],max[i << 1 | 1]);
    }
    public static void build(int l,int r,int i){
        if(l == r){
            sum[i] = max[i] = arr[l];
        } else {
            int mid = (l + r) >> 1;
            long ans = 0;
            build(l,mid,i << 1);
            build(mid + 1,r,i << 1 | 1);
            up(i);
        }
    }
    public static long query(int jobl,int jobr,int l,int r,int i){
        if(jobl <= l && jobr >= r){
            return sum[i];
        }
        int mid = (l + r) >> 1;
        long ans = 0;
        if(jobl <= mid){
            ans += query(jobl,jobr,l,mid,i << 1);
        }
        if(jobr >= mid + 1){
            ans += query(jobl,jobr,mid + 1,r,i << 1 | 1);
        }
        return ans;
    }
    public static void mod(int jobl,int jobr,int jobv,int l,int r,int i){
        if(jobv > max[i]){
            return;
        }
        if(l == r){
            sum[i] %= jobv;
            max[i] %= jobv;
        } else {
            int mid = (l + r) >> 1;
            if(jobl <= mid){
                mod(jobl,jobr,jobv,l,mid,i << 1);
            }
            if(jobr >= mid + 1){
                mod(jobl,jobr,jobv,mid + 1,r,i << 1 | 1);
            }
            up(i);
        }
    }
    public static void update(int jobi,int jobv,int l,int r,int i){
        if(l == r){
            sum[i] = max[i] = jobv;
        } else {
            int mid = (l + r) >> 1;
            if(jobi <= mid){
                update(jobi,jobv,l,mid,i << 1);
            } else {
                update(jobi,jobv,mid + 1,r,i << 1 | 1);
            }
            up(i);
        }
    }
    public static void main(String[] args) throws IOException {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        for(int i = 1;i <= n;i++){
            arr[i] = sc.nextInt();
        }
        build(1,n,1);
        for(int i = 0;i < m;i++){
            int op = sc.nextInt();
            if(op == 1){
                int l = sc.nextInt();
                int r = sc.nextInt();
                System.out.println(query(l,r,1,n,1));
            } else if(op == 2){
                int l = sc.nextInt();
                int r = sc.nextInt();
                int x = sc.nextInt();
                mod(l,r,x,1,n,1);
            } else {
                int k = sc.nextInt();
                int x = sc.nextInt();
                update(k,x,1,n,1);
            }
        }
    }
}

