import java.lang.*;
import java.io.*;
import java.util.*;


public class Learn {
    /*
    题目2:范围上开平方并求和(p4145)
    给定一个长度为n的数组arr,实现以下两种类型的操作
    操作0 l r : 把arr[l...r]范围上的所有数开平方,结果向下取整
    操作1 l r : 查询arr[l...r]范围上所有数字的累加和
    两种操作一共发生m次,数据种有可能l>r,遇到这种情况请交换l和r
    1<=n,m<=1e5,1<=arr[i]<=1e12

    此时由于是开平方操作,那么此时不能进行懒更新,因为在lazy操作时无法直接用O(1)的复杂度
    去更新sum数组(直接增加的话可以是n*v,但是开平方只能一个一个求)
    剪枝:如果一个范围的最大值是1,那么此时不用往下走了,对于1e12,最多开6次根号就可以回到1
    所以最大的操作次数就是n*6*树的高度(只针对于叶节点),所以还要维持最大值的更新
     */
    public static int MAXN = 100001;
    public static long[] arr = new long[MAXN];
    public static long[] sum = new long[MAXN << 2];
    public static long[] max = new long[MAXN << 2];
    public static void up(int i) {
        sum[i] = sum[i << 1] + sum[i << 1 | 1];
        max[i] = Math.max(max[i << 1],max[i << 1 | 1]);
    }
    public static void build(int l,int r,int i) {
        if(l == r){
            sum[i] = arr[l];
            max[i] = arr[l];
        } else {
            int mid = (l + r) >> 1;
            build(l,mid,i << 1);
            build(mid + 1,r,i << 1 | 1);
            up(i);
        }
    }
    //最核心的方法
    //这里和常规的线段树不一样,所以不能lazy方法,也就没有down方法
    //只有根据范围最大进行剪枝,多次调用sqrt
    public static void sqrt(int jobl,int jobr,int l,int r,int i){
        if(l == r){
            long sqrt = (long) Math.sqrt(max[i]);
            sum[i] = sqrt;
            max[i] = sqrt;
        } else {
            int mid = (l + r) >> 1;
            if(jobl <= mid && max[i << 1] > 1){
                sqrt(jobl,jobr,l,mid,i << 1);
            }
            if(jobr >= mid + 1 && max[i << 1 | 1] > 1){
                sqrt(jobl,jobr,mid + 1,r,i << 1 | 1);
            }
            up(i);
        }
    }
    public static long query(int jobl,int jobr,int l,int r,int i){
        if(jobl <= l && jobr >= r){
            return sum[i];
        }
        int mid = (l + r) >> 1;
        long ans = 0;
        if(jobl <= mid) {
            ans += query(jobl,jobr,l,mid,i << 1);
        }
        if(jobr >= mid + 1) {
            ans += query(jobl,jobr,mid + 1,r,i << 1 | 1);
        }
        return ans;
    }
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StreamTokenizer in = new StreamTokenizer(br);
        PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));
        in.nextToken();
        int n = (int) in.nval;
        for (int i = 1; i <= n; i++) {
            in.nextToken();
            arr[i] = (long) in.nval;
        }
        build(1, n, 1);
        in.nextToken();
        int m = (int) in.nval;
        for (int i = 1, op, jobl, jobr, tmp; i <= m; i++) {
            in.nextToken();
            op = (int) in.nval;
            in.nextToken();
            jobl = (int) in.nval;
            in.nextToken();
            jobr = (int) in.nval;
            if (jobl > jobr) {
                tmp = jobl;
                jobl = jobr;
                jobr = tmp;
            }
            if (op == 0) {
                sqrt(jobl, jobr, 1, n, 1);
            } else {
                out.println(query(jobl, jobr, 1, n, 1));
            }
        }
        out.flush();
        out.close();
        br.close();
    }
}

