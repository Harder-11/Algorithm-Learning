import java.lang.*;
import java.io.*;
import java.util.*;


public class Learn {
    //线段树维护更多的信息
    /*
    题目4:平均数和方差(p1471)
    给定一个长度为n的数组arr，操作分为三种类型，一共调用m次
    操作 1 l r : arr数组中[l, r]范围上每个数字加上k，k为double类型
    操作 2 l r : 查询arr数组中[l, r]范围上所有数字的平均数，返回double类型
    操作 3 l r : 查询arr数组中[l, r]范围上所有数字的方差，返回double类型

    维持两个信息:累加和和平方和
    那么此时平均值就是累加和/n,对于方差公式,将其展开化简得到方差就是
    (平方和/n-2*平均值*累加和/n+平均值的平方)
    重点就是平方和怎么快速算?更新之后的平方和就是(a1+v)^2+.....+(an+v)^2
    化简得到就是老的累加和+2*v*之前的累加和+n*v^2,所以要先更新平方和

    注意:本题Java会MLE!!!!但是C++可以过
    并且Java读取要用StringTokenizer
    */
    public static int MAXN = 100001;
    public static double[] arr = new double[MAXN];
    public static double[] sum1 = new double[MAXN << 2];
    public static double[] sum2 = new double[MAXN << 2];
    public static double[] addv = new double[MAXN << 2];
    public static void up(int i){
        sum1[i] = sum1[i << 1] + sum1[i << 1 | 1];
        sum2[i] = sum2[i << 1] + sum2[i << 1 | 1];
    }
    public static void lazy(int i,double v,int n){
        sum2[i] += sum2[i] * v * 2 + v * v * n;
        sum1[i] += v * n;
        addv[i] += v;
    }
    public static void down(int i,int ln,int rn){
        if(addv[i] != 0){
            lazy(i << 1,addv[i],ln);
            lazy(i << 1 | 1,addv[i],rn);
            addv[i] = 0;
        }
    }
    public static void build(int l,int r,int i){
        if(l == r){
            sum1[i] = arr[l];
            sum2[i] = arr[l] * arr[l];
        } else {
            int mid = (l + r) >> 1;
            build(l,mid,i << 1);
            build(mid + 1,r,i << 1 | 1);
            up(i);
        }
        addv[i] = 0;
    }
    public static void add(int jobl,int jobr,double jobv,int l,int r,int i){
        if(jobl <= l && jobr >= r){
            lazy(i,jobv,r - l + 1);
        } else {
            int mid = (l + r) >> 1;
            down(i,mid - l + 1,r - mid);
            if(jobl <= mid){
                add(jobl,jobr,jobv,l,mid,i << 1);
            }
            if(jobr >= mid + 1){
                add(jobl,jobr,jobv,mid + 1,r,i << 1 | 1);
            }
            up(i);
        }
    }
    public static double query(double[] sum,int jobl,int jobr,int l,int r,int i){
        if(jobl <= l && jobr >= r){
            return sum[i];
        }
        int mid = (l + r) >> 1;
        down(i,mid - l + 1,r - mid);
        double ans = 0;
        if(jobl <= mid){
            ans += query(sum,jobl,jobr,l,mid,i << 1);
        }
        if (jobr >= mid + 1) {
            ans += query(sum,jobl,jobr,mid + 1,r,i << 1 | 1);
        }
        return ans;
    }


    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StreamTokenizer in = new StreamTokenizer(br);
        PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));

        out.flush();
        out.close();
        br.close();
    }

}


