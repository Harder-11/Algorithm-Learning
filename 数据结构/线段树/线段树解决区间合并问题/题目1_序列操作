import java.lang.*;
import java.io.*;
import java.util.*;


public class Learn {
    /*
    线段树解决区间合并问题
    区间合并类最经典的问题:连续1的最长字串长度
    此时线段树维护的信息是
    1.连续1的最长子串长度(len)
    2.连续1的最长前缀长度(pre)
    3.连续1的最长后缀(suf)
    那么此时左侧pre+右侧suf和len做比较就可以维护最长子串的长度
     */
    /*
    题目1:序列操作(p2572)
    一个长度为n的数组arr,内部只有01两种值
    对于这个序列有五种变换操作和询问操作
    操作 0 l r : 把l~r范围上所有数字全改成0
    操作 1 l r : 把l~r范围上所有数字全改成1
    操作 2 l r : 把l~r范围上所有数字全取反
    操作 3 l r : 询问l~r范围上有多少个1
    操作 4 l r : 询问l~r范围上连续1的最长子串长度

    对于操作0,1就是重置操作,使用boolean[] update来记录是否更新
    对于操作3,使用累计和来计算有多少1(因为全是0和1)
    对于操作4,就是用线段树来维护最长子串长度和最长前缀和最长后缀长度
    有因为有取反,那么还要维护len0,pre0,suf0来维护全是0的子串的长度和前后缀长度
     */
    public static int MAXN = 100001;
    public static int[] arr = new int[MAXN];
    public static int[] sum = new int[MAXN << 2];
    public static int[] len0 = new int[MAXN << 2];
    public static int[] pre0 = new int[MAXN << 2];
    public static int[] suf0 = new int[MAXN << 2];
    public static int[] len1 = new int[MAXN << 2];
    public static int[] pre1 = new int[MAXN << 2];
    public static int[] suf1 = new int[MAXN << 2];
    //懒更新信息,范围上所有的数字都被重置成了什么
    public static int[] change = new int[MAXN << 2];
    //懒更新信息,范围上有没有重置任务
    public static boolean[] update = new boolean[MAXN << 2];
    //懒更新信息,范围上有没有翻转任务
    public static boolean[] reverse = new boolean[MAXN << 2];
    public static void up(int i,int ln,int rn){
        int l = i << 1;
        int r = i << 1 | 1;
        sum[i] = sum[l] + sum[r];
        len0[i] = Math.max(Math.max(len0[l],len0[r]),suf0[l] + pre0[r]);
        //如果左侧0的数量等于左侧的总数量,那么就加上右侧的0前缀,后面的同理
        pre0[i] = len0[l] < ln ? pre0[l] : (pre0[l] + pre0[r]);
        suf0[i] = len0[r] < rn ? suf0[r] : (suf0[l] + suf0[r]);
        len1[i] = Math.max(Math.max(len1[l],len1[r]),suf1[l] + pre1[r]);
        pre1[i] = len1[l] < ln ? pre1[l] : (pre1[l] + pre1[r]);
        suf1[i] = len1[r] < rn ? suf1[r] : (suf1[l] + suf1[r]);
    }
    public static void down(int i,int ln,int rn){
        if(update[i]){
            updateLazy(i << 1,change[i],ln);
            updateLazy(i << 1 | 1,change[i],rn);
            update[i] = false;
        }
        if(reverse[i]){
            reverseLazy(i << 1,ln);
            reverseLazy(i << 1 | 1,rn);
            reverse[i] = false;
        }
    }
    //重置成了v这个数
    public static void updateLazy(int i,int v,int n){
        sum[i] = v * n;
        len0[i] = pre0[i] = suf0[i] = v == 0 ? n : 0;
        len1[i] = pre1[i] = suf1[i] = v == 1 ? n : 0;
        change[i] = v;
        update[i] = true;
        //操作优先级,此时只要重置了,那么此时reverse就被取消了
        reverse[i] = false;
    }
    //reverse就全部交换
    public static void reverseLazy(int i,int n){
        sum[i] = n - sum[i];
        int tmp;
        tmp = len0[i];
        len0[i] = len1[i];
        len1[i] = tmp;
        tmp = pre0[i];
        pre0[i] = pre1[i];
        pre1[i] = tmp;
        tmp = suf0[i];
        suf0[i] = suf1[i];
        suf1[i] = tmp;
        reverse[i] = !reverse[i];
    }
    public static void build(int l,int r,int i){
        if(l == r){
            sum[i] = arr[l];
            len0[i] = pre0[i] = suf0[i] = arr[l] == 0 ? 1 : 0;
            len1[i] = pre1[i] = suf1[i] = arr[l] == 1 ? 1 : 0;
        } else {
            int mid = (l + r) >> 1;
            build(l,mid,i << 1);
            build(mid + 1,r,i << 1 | 1);
            up(i,mid - l + 1,r - mid);
        }
        update[i] = false;
        reverse[i] = false;
    }
    public static void update(int jobl,int jobr,int jobv,int l,int r,int i){
        if(jobl <= l && jobr >= r){
            updateLazy(i,jobv,r - l + 1);
        } else {
            int mid = (l + r) >> 1;
            down(i,mid - l + 1,r - mid);
            if(jobl <= mid){
                update(jobl,jobr,jobv,l,mid,i << 1);
            }
            if(jobr >= mid + 1){
                update(jobl,jobr,jobv,mid + 1,r,i << 1 | 1);
            }
            up(i,mid - l + 1,r - mid);
        }
    }
    public static void reverse(int jobl,int jobr,int l,int r,int i){
        if(jobl <= l && jobr >= r){
            reverseLazy(i,r - l + 1);
        } else {
            int mid = (l + r) >> 1;
            down(i,mid - l + 1,r - mid);
            if(jobl <= mid){
                reverse(jobl,jobr,l,mid,i << 1);
            }
            if(jobr >= mid + 1){
                reverse(jobl,jobr,mid + 1,r,i << 1 | 1);
            }
            up(i,mid - l + 1,r - mid);
        }
    }
    public static int querySum(int jobl,int jobr,int l,int r,int i){
        if(jobl <= l && jobr >= r){
            return sum[i];
        }
        int mid = (l + r) >> 1;
        down(i,mid - l + 1,r - mid);
        int ans = 0;
        if(jobl <= mid){
            ans += querySum(jobl,jobr,l,mid,i << 1);
        }
        if(jobr >= mid + 1){
            ans += querySum(jobl,jobr,mid + 1,r,i << 1 | 1);
        }
        return ans;
    }
    public static int[] queryLongest(int jobl,int jobr,int l,int r,int i){
        if(jobl <= l && jobr >= r){
            return new int[]{len1[i],pre1[i],suf1[i]};
        } else {
            int mid = (l + r) >> 1;
            int ln = mid - l + 1;
            int rn = r - mid;
            down(i,ln,rn);
            //只牵扯左边或者右边的查询
            if(jobr <= mid){
                return queryLongest(jobl,jobr,l,mid,i << 1);
            }
            if(jobl >= mid + 1){
                return queryLongest(jobl,jobr,mid + 1,r,i << 1 | 1);
            }
            int[] l3 = queryLongest(jobl,jobr,l,mid,i << 1);
            int[] r3 = queryLongest(jobl,jobr,mid + 1,r,i << 1 | 1);
            int llen = l3[0],lpre = l3[1],lsuf = l3[2];
            int rlen = r3[0],rpre = r3[1],rsuf = r3[2];
            int len = Math.max(Math.max(llen,rlen),lsuf + rpre);
            // 任务实际影响了左侧范围的几个点 -> mid - Math.max(jobl, l) + 1
            int pre = llen < mid - Math.max(jobl,l) + 1 ? lpre : (lpre + rpre);
            // 任务实际影响了右侧范围的几个点 -> Math.min(r, jobr) - mid
            int suf = rlen < Math.min(r,jobr) - mid ? rsuf : (lsuf + rsuf);
            return new int[]{len,pre,suf};
        }
    }

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StreamTokenizer in = new StreamTokenizer(br);
        PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));
        in.nextToken();
        int n = (int) in.nval;
        in.nextToken();
        int m = (int) in.nval;
        for (int i = 1; i <= n; i++) {
            in.nextToken();
            arr[i] = (int) in.nval;
        }
        build(1, n, 1);
        for (int i = 1, op, jobl, jobr; i <= m; i++) {
            in.nextToken();
            op = (int) in.nval;
            in.nextToken();
            jobl = (int) in.nval + 1;
            in.nextToken();
            jobr = (int) in.nval + 1;
            if (op == 0) {
                update(jobl, jobr, 0, 1, n, 1);
            } else if (op == 1) {
                update(jobl, jobr, 1, 1, n, 1);
            } else if (op == 2) {
                reverse(jobl, jobr, 1, n, 1);
            } else if (op == 3) {
                out.println(querySum(jobl, jobr, 1, n, 1));
            } else {
                out.println(queryLongest(jobl, jobr, 1, n, 1)[0]);
            }
        }
        out.flush();
        out.close();
        br.close();
    }

}


