import java.lang.*;
import java.io.*;
import java.util.*;


public class Learn {
    /*
    题目4:旅馆(p2894)
    一共有n个房间，编号1~n，一开始都是空房
    实现如下两种操作，会一共调用m次
    操作 1 x   : 找到至少有连续x个空房间的区域，返回最左编号
              如果有多个满足条件的区域，返回其中最左区域的最左编号
              如果找不到打印0，并且不办理入住
              如果找到了打印最左编号，并且从最左编号开始办理x个人的入住
    操作 2 x y : 从x号房间开始往下数y个房间，一律清空
    操作1有打印操作，操作2没有
    1 <= n 、m <= 50000

    思路:线段树维护连续0的最大长度,连续0的最大前缀和后缀长度
     */
    public static int MAXN = 50001;
    public static int[] len = new int[MAXN << 2];
    //连续空房的最长前缀长度
    public static int[] pre = new int[MAXN << 2];
    //连续空房的最长后缀长度
    public static int[] suf = new int[MAXN << 2];
    //懒更新,看范围上的数字被改成了什么
    public static int[] change = new int[MAXN << 2];
    public static boolean[] update = new boolean[MAXN << 2];
    public static void up(int i,int ln,int rn){
        int l = i << 1;
        int r = i << 1 | 1;
        len[i] = Math.max(Math.max(len[l],len[r]),suf[l] + pre[r]);
        pre[i] = len[l] < ln ? pre[l] : (pre[l] + pre[r]);
        suf[i] = len[r] < rn ? suf[r] : (suf[r] + suf[l]);
    }
    public static void lazy(int i,int v,int n){
        len[i] = pre[i] = suf[i] = v == 0 ? n : 0;
        change[i] = v;
        update[i] = true;
    }
    public static void down(int i,int ln,int rn){
        if(update[i]){
            lazy(i << 1,change[i],ln);
            lazy(i << 1 | 1,change[i],rn);
            update[i] = false;
        }
    }
    public static void build(int l,int r,int i){
        if(l == r){
            len[i] = pre[i] = suf[i] = 1;
        } else {
            int mid = (l + r) >> 1;
            build(l,mid,i << 1);
            build(mid + 1,r,i << 1 | 1);
            up(i,mid - l + 1,r - mid);
        }
        update[i] = false;
    }
    public static void update(int jobl,int jobr,int jobv,int l,int r,int i){
        if(jobl <= l && jobr >= r){
            lazy(i,jobv,r - l + 1);
        } else {
            int mid = (l + r) >> 1;
            down(i,mid - l + 1,r - mid);
            if(jobl <= mid){
                update(jobl,jobr,jobv,l,mid,i << 1);
            }
            if(jobr >= mid + 1){
                update(jobl,jobr,jobv,mid + 1,r,i << 1 | 1);
            }
            up(i,mid - l + 1,r - mid);
        }
    }
    //在l...r范围上,在满足空房长度>=x的条件下,返回尽量靠左的位置
    //递归需要遵守的潜台词:l...r范围上一定存在连续空房长度>=x的区域
    public static int queryLeft(int x,int l,int r,int i){
        if(l == r){
            return l;
        } else {
            int mid = (l + r) >> 1;
            down(i,mid - l + 1,r - mid);
            //以下三种情况,左边的空房有长度 >= x的,那么就在左边找,不用找后面的了(找最左)
            //左右连起来的空房长度>=x,那么此时直接返回mid-suf[i<<1]+1
            //如果以上都不成立,就调用右边
            if(len[i << 1] >= x){
                return queryLeft(x,l,mid,i << 1);
            }
            if(suf[i << 1] + pre[i << 1 | 1] >= x){
                return mid - suf[i << 1] + 1;
            }
            return queryLeft(x,mid + 1,r,i << 1 | 1);
        }
    }

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StreamTokenizer in = new StreamTokenizer(br);
        PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));
        in.nextToken();
        int n = (int) in.nval;
        build(1, n, 1);
        in.nextToken();
        int m = (int) in.nval;
        for (int i = 1, op, x, y, left; i <= m; i++) {
            in.nextToken();
            op = (int) in.nval;
            if (op == 1) {
                in.nextToken();
                x = (int) in.nval;
                if (len[1] < x) {
                    left = 0;
                } else {
                    left = queryLeft(x, 1, n, 1);
                    update(left, left + x - 1, 1, 1, n, 1);
                }
                out.println(left);
            } else {
                in.nextToken();
                x = (int) in.nval;
                in.nextToken();
                y = (int) in.nval;
                update(x, Math.min(x + y - 1, n), 0, 1, n, 1);
            }
        }
        out.flush();
        out.close();
        br.close();
    }

}


