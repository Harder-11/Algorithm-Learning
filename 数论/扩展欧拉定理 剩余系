#include <bits/stdc++.h>
using namespace std;
using ll = long long;
const int INF = 0x3f3f3f3f;
const int N = 200005;
const int mod = 1e9 + 7;
const double esp = 1e-6;
const int hash = 1331;
const double PI = acos(-1);


/*
剩余系,欧拉定理和扩展欧拉定理

1.剩余类(同余类),给定一个正整数n,把所有整数根据模n的余数r∈[0,n-1]分为n类
每一类表示为Cr = nx + r的形式,这类数所构成的集合称为剩余类

2.完全剩余系(完系)
给定一个正整数n,有n个不同的模n的剩余类,从这n个不同的剩余类中各取出一个元素,总共n个数,将
这些数构成一个新的集合,这个集合就是模n的完全剩余类
比如n=5,此时{0,1,2,3,4}和{5,1,-3,8,9}都是模n下的完全剩余类

3.简化剩余系:
给定一个正整数n,有φ(n)个不同的模n的余数r与n互质的剩余类,从这φ(n)个剩余类中各取出一个元素
总共φ(n)个数,讲这些数构成的新的集合称为模n的简化剩余系
比如n=5,{1,2,3,4}就是一个模5的简化剩余系
比如n=10,{1,3,7,9}是模10的简化剩余系
显然模n的简化剩余系中所有的数都与n互质

4.欧拉函数:1~n中与n互质的数的个数称为欧拉函数,记为φ(n)
φ(n) = n * π(i=1,s)(pi-1)/pi(其中pi是n的质因子)

5.欧拉定理:如果gcd(a,m) = 1,则a^(φ(m)) % m = 1(a^(φ(m))与1同余)
比如,a = 3,m = 4,此时3^(φ(4)) = 3^2 = 9 % 4 = 1
证明:构造一个与m互质的序列
设{r1,r2,r3...r(φ(m))}是一个模m的简化剩余系
那么{ar1,ar2,....ar(φ(m))}也是一个模m的简化剩余系(a与m互质,那么a*r之后仍然都和m互质)
所以π(i=1,φ(m))ri 同余于 π(i=1,φ(m))ari 同余与 a^(φ(m)) * π(i=1,φ(m))ri(mod m)
(把系数a^(φ(m))提出来了),约分之后得到a^(φ(m)) % m = 1
并且当m为质数的时候,φ(m) = m - 1,此时带人欧拉定理就是费马小定理a^(m-1) % m = 1
*/

/*
模版扩展欧拉定理(p5091)
给你三个正整数a,m,b,你需要求a^b mod m
其中1 <= a <= 1e9,1 <= b <= 1e2000000,1 <= m <= 1e8

注意,由于b太大,用快速幂就是logb,那就是2e7 * log(2,10),一样会TLE

对于欧拉定理,如果gcd(a,m) = 1,那么a^(φ(m)) % m = 1
扩展欧拉定理:a^b 同余于 a^b (b < φ(m)) (mod m)
               同余于 a^(b mod φ(m) + φ(m)) (b >= φ(m)) (mod m)
当b小的时候,不用降幂,直接跑快速幂
当b极大的时候(跑快速幂都超时),此时先降为小幂,然后再跑快速幂
比如 a = 2,m = 4,b = 1,2^1 = 2,2^(1 mod 2 + 2) = 8,此时2和8不是同余于4
当b = 6的时候,2^6=64,2^(6mod2+2)=4,此时同余于4,成立,所以二者有明显的界限是b和φ(m)的大小关系

*/

int a,b,m,phi,flag;
char s[20000005];

//先求出欧拉函数
int get_phi(int n){
    int res = n;
    for(int i = 2;i * i <= n;i++){
        if(n % i == 0){
            res = res / i * (i - 1);
            while(n % i == 0) n /= i;
        }
    }
    if(n > 1) res = res / n * (n - 1);
    return res;
}

//降幂函数,求的是b mod φ(m)
//实际是秦九韶算法 + 同余运算
//比如5678 % 55,此时展开就是(5 * 10 + 6) * 10 * 7... % 55
//一旦求出来中间某一步的值 >= phi,直接取余,结果也是正确的
int depow(int phi){
    int b = 0;
    for(int i = 0;s[i];i++){
        b = b * 10 + (s[i] - '0');
        if(b >= phi){
            flag = 1;
            b %= phi;
        }
    }
    //这里对应的扩展欧拉定理的b>=φ(m)的情况,此时还要加一个φ(m)
    if(flag) b += phi;
    return b;
}

int power(ll a,int b){
    int res = 1;
    while(b){
        if(b & 1) res = (a * res) % m;
        a = (a * a) % m;
        b >>= 1; 
    }
    return res;
}

void solve(){
    scanf("%d%d%s",&a,&m,s);
    phi = get_phi(m);
    b = depow(phi);
    printf("%d",power(a,b));
}

int main(){
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    int t = 1;
    //cin >> t;
    while(t--){
        solve();
    }
    return 0;
}