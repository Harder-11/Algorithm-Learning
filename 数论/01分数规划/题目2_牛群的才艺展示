import java.io.*;
import java.util.*;


public class Main {
    /*
    题目2:牛群的才艺展示(p4377)
    一共有n只牛，每只牛有重量和才艺两个属性值
    要求一定要选若干只牛，使得总重量不少于w，并且选出的牛，希望让
    才艺的和 / 重量的和，这个比值尽量大
    返回该比值 * 1000的整数结果，小数部分舍弃
    1 <= n <= 250
    1 <= w <= 1000
    1 <= 牛的重量 <= 10^6
    1 <= 牛的才艺 <= 10^3

    思路:01背包 + 01分数规划
    定义dp[i][j]:1...i号牛自由选择,在重量严格等于j的情况下,最大的结余和
    特别的dp[i][w]:1...i号牛自由选,重量严格为w,w+1...所有情况下的最大结余和
     */
    public static int MAXN = 251;
    public static int MAXM = 1001;
    //足够小代表无效解
    public static double NA = -1e9;
    public static double sml = 1e-6;
    public static int[] weight = new int[MAXN];
    public static int[] talent = new int[MAXN];
    //(才艺 - x * 重量)的结余
    public static double[] value = new double[MAXN];
    //dp[i][j]:1....i号牛自由选择,重量必须是j的情况下,最大的结余和
    //特别的dp[i][w]表示1...i号牛自由选择,重量必须是w,w+1...的所有情况中最大的结余和
    //为了节省空间,直接做空间压缩
    public static double[] dp = new double[MAXM];
    public static int n,w;
    public static boolean check(double x){
        for(int i = 1;i <= n;i++){
            value[i] = (double) talent[i] - x * weight[i];
        }
        dp[0] = 0;
        Arrays.fill(dp,1,w + 1,NA);
        for(int i = 1;i <= n;i++){
            for(int p = w,j;p >= 0;p--){
                j = p + weight[i];
                if(j >= w){
                    dp[w] = Math.max(dp[w],dp[p] + value[i]);
                } else {
                    dp[j] = Math.max(dp[j],dp[p] + value[i]);
                }
            }
        }
        //最大结余大于等于0,那么check通过
        return dp[w] >= 0;
    }

    public static void main(String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StreamTokenizer in = new StreamTokenizer(br);
        PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));
        in.nextToken();
        n = (int) in.nval;
        in.nextToken();
        w = (int) in.nval;
        for (int i = 1; i <= n; i++) {
            in.nextToken();
            weight[i] = (int) in.nval;
            in.nextToken();
            talent[i] = (int) in.nval;
        }
        double l = 0, r = 0, x;
        for (int i = 1; i <= n; i++) {
            r += talent[i];
        }
        double ans = 0;
        while (l < r && r - l >= sml) {
            x = (l + r) / 2;
            if (check(x)) {
                ans = x;
                l = x + sml;
            } else {
                r = x - sml;
            }
        }
        out.println((int) (ans * 1000));
        out.flush();
        out.close();
        br.close();
    }
}

