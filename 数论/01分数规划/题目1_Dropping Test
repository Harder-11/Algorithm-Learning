import java.io.*;
import java.util.*;


public class Main {
    /*
    01分数规划
    最简化的问题:给定n个数据,每个数据有(a,b)两个值,并且没有负数
    (a1,b1)(a2,b2)(a3,b3)...(an,bn),其中选取k个数据,希望让k个a的和/k个b的和最大
    返回最大的比值

    思路:计算机里关于小数的精度是有限的,那么此时没有必要精确求解,使用二分答案来逼近即可
    那么对于一个数据(a,b)转化为a-x*b,确定一个x的值,然后在最优决策下,计算结余和最终
    想获得在最优决策下,当结余和最接近0时,x的值(利用单调性二分)
    定义一个sml=1e-7,然后当r-l<sml就结束二分
     */
    /*
    题目1:Dropping Test(p10505)
    给定n个数据，每个数据有(a, b)两个值，都为整数，并且都是非负的
    请舍弃掉k个数据，希望让剩下数据做到，所有a的和 / 所有b的和，这个比值尽量大
    如果剩下数据所有b的和为0，认为无意义
    最后，将该比值 * 100，小数部分四舍五入的整数结果返回
    1 <= n <= 100
    0 <= a、b <= 10^9
     */
    public static int MAXN = 1001;
    public static double sml = 1e-6;
    //0,1,2分别存a,b和a-x*b
    public static double[][] arr = new double[MAXN][3];
    public static int n,k;
    public static boolean check(double x){
        for(int i = 1;i <= n;i++){
            arr[i][2] = arr[i][0] - x * arr[i][1];
        }
        Arrays.sort(arr,1,n + 1,(a,b)->a[2] >= b[2] ? -1 : 1);
        double sum = 0;
        for(int i = 1;i <= k;i++){
            sum += arr[i][2];
        }
        return sum >= 0;
    }
    public static void main(String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StreamTokenizer in = new StreamTokenizer(br);
        PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));
        in.nextToken();
        n = (int) in.nval;
        in.nextToken();
        k = (int) in.nval;
        while (n != 0 || k != 0) {
            // 题目要求舍弃掉k个，其实就是挑选n-k个
            k = n - k;
            for (int i = 1; i <= n; i++) {
                in.nextToken();
                arr[i][0] = in.nval;
            }
            for (int i = 1; i <= n; i++) {
                in.nextToken();
                arr[i][1] = in.nval;
            }
            double l = 0, r = 0, x;
            for (int i = 1; i <= n; i++) {
                r += arr[i][0];
            }
            double ans = 0;
            while (l < r && r - l >= sml) {
                x = (l + r) / 2;
                if (check(x)) {
                    ans = x;
                    l = x + sml;
                } else {
                    r = x - sml;
                }
            }
            //四舍五入,+0.5再向下取整
            out.println((int) (100 * (ans + 0.005)));
            in.nextToken();
            n = (int) in.nval;
            in.nextToken();
            k = (int) in.nval;
        }
        out.flush();
        out.close();
        br.close();
    }
}

