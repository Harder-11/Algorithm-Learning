#include <bits/stdc++.h>
using namespace std;
using ll = long long;
const int INF = 0x3f3f3f3f;
const int N = 150;
const int mod = 1e9 + 7;
const double esp = 1e-6;
const int hash = 1331;
const double PI = acos(-1);

/*
隔板法:(Stars and Bars)
1.求线性不定方程的整数解的组数
2.求相同元素分组的方案数 

1.正整数和的组数
若xi >= 1,求x1 + x2 + ... + xk = n的整数解的组数,转化为以下问题(球的个数就是xi的大小)
现有n个完全相同的元素,将其分为k组,保证每组至少有一个元素,一共有多少种分法?
那n个相同的球放一行,有n-1个空,拿k-1个板子插到n-1个空里面就可以把球分为k组
所以答案就是C(n-1,k-1)

2.非负整数和的组数
若xi >= 0,求x1 + x2 + ... + xk = n的整数解的组数
令yi = xi + 1,那么yi >= 1
则y1 + y2 + ... + yk = n + k = m,转化为情况1,答案就是C(m-1,k-1) = C(n+k-1,k-1)

3.不同下界整数和的组数
求x1 + x2 + ... + xk = n的整数解的组数
其中xi >= ai >= 0,Σai <= n
令yi = xi - ai + 1,则yi >= 1
则y1 + y2 + ... + yk = n - Σai + k = m
转化为情况1,答案就为C(m - 1,k - 1) = C(n - Σai + k - 1,k - 1)
*/

/*
对于本题思路:
1.用快速幂求出n = x^x mod 1000;
2.根据隔板法,答案就是C(n-1,k-1),此时n < 1000,k <= 100,递推即可
3.因为没有取模,C(1000,100)是140位数,用高精度存储即可
*/

int p = 1000;
//用第三维存各个位数的数字,前两位是C(n,m)的n和m的值
int C[1000][100][N];

int power(int a,int b){
    int res = 1;
    while(b){
        if(b & 1) res = res * a % p;
        a = a * a % p;
        b >>= 1;
    }
    return res;
}

void add(int c[],int a[],int b[]){
    for(int i = 0;i < N;i++){
        c[i] += a[i] + b[i];
        c[i + 1] += c[i] / 10;
        c[i] %= 10;
    }
}

void getC(int n,int k){
    for(int i = 0;i < n;i++){
        for(int j = 0;j <= i && j < k;j++){
            if(j == 0) C[i][j][0] = 1;
            else add(C[i][j],C[i - 1][j],C[i - 1][j - 1]);
        }
    }
}

void solve(){
    int k,x;
    cin >> k >> x;
    int n = power(x % p,x);
    getC(n,k);
    int i = N - 1;
    while(C[n - 1][k - 1][i] == 0) i--;
    while(i >= 0){
        cout << C[n - 1][k - 1][i--];
    }
}

int main(){
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    int t = 1;
    //cin >> t;
    while(t--){
        solve();
    }
    return 0;
}