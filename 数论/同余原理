import java.math.BigInteger;
import java.util.*;

public class learn {
    /*同余原理:一个正整数,能被a或者b整除,那么他是神奇的
    给定三个整数n,a,b,返回第n个神奇的数字
    注意答案可能很大,所以返回答案对10 ^ 9 + 7取模后的值
    比如:a = 2,b = 3,第一个神奇的数字就是2,第二个是3,第三个是4,第四个是6,以此类推
    这道题要用到"二分答案法"和"容斥原理"
    先确定范围,第n个数字在1 ~ n*min(a,b)范围内
    建立一个函数f,用来计算从1 ~ x之间有多少个神奇的数字,然后二分
    计算1~x上有多少个数字能够被a,b整除:有x/a + x/b - x/(a*b/gcd(a,b))(最小公倍数)个
     */
    public static int nthMagicalNumber(int n,int a,int b){
        long lcm = lcm(a,b);
        long ans = 0;
        //要注意类型转化,这里n是可以取到1e9,a,b可以取到1e4
        for(long l = 0,r = (long)n * Math.min(a,b),m = 0;l <= r;){
            m = (l + r) >> 1;
            //由于这里做除法时涉及到向下取整,有可能此时m并不是能够整除a或者b的数,所以要一直二分直到l == r
            //如果m比实际的ans更大,也可能满足m / a + m / b - m / lcm == n,所以此时r = m - 1,把这两种情况
            //并在一起
            if(m / a + m / b - m / lcm >= n){
                ans = m;
                r = m - 1;
            } else {
                l = m + 1;
            }
        }
        return (int)(ans % 1000000007);
    }
    public static long gcd(long a,long b){
        return b == 0 ? a : gcd(b,a % b);
    }
    public static long lcm(long a,long b){
        return (long) a / gcd(a,b) * b;
    }
    //同余原理:求一个数组所有的数的乘积或者加法 % m,求答案(加法乘法可能超过long类型)
    //BigInteger的底层,当是k位整数加减运算时,复杂度是O(k),乘除是O(k^2);
    //加法同余原理:
    //对于(a + b) + (c + d),此时如果先算p = (a + b) % m,q = (c + d) % m,再计算(q + p) % m,
    //此时答案就是先把abcd加起来再取模一样
    //乘法同余原理:
    //对于(a * b * c) * (d * e * f),先算a * b % m,再 * c % m,以此类推,得到的答案等于所有数相乘 % m
    //对于减法:为了避免负数的出现,每次取模后运算(mod1 - mod2 + m) % m,mod1,mod2都是对某个数先取模,此时计算出来
    //的答案等于所有的数相减之后再取模
    //比如以下代码计算((a + b) * (c - d) + (a * c - b * d)) % mod
    public static int f1(long a,long b,long c,long d,int mod){
        BigInteger o1 = new BigInteger(String.valueOf(a));
        BigInteger o2 = new BigInteger(String.valueOf(b));
        BigInteger o3 = new BigInteger(String.valueOf(c));
        BigInteger o4 = new BigInteger(String.valueOf(d));
        BigInteger o5 = o1.add(o2);//a + b
        BigInteger o6 = o3.subtract(o4);//c - d
        BigInteger o7 = o1.multiply(o3);//a * c
        BigInteger o8 = o2.multiply(o4);//b * d
        BigInteger o9 = o5.multiply(o6);//(a + b) * (c - d)
        BigInteger o10 = o7.subtract(o8);//(a * c - b * d)
        BigInteger o11 = o9.add(o10);//((a + b) * (c - d) + (a * c - b * d))
        BigInteger o12 = o11.mod(new BigInteger(String.valueOf(mod)));//取模
        if(o12.signum() == -1){
            //如果算出来答案是负数,就加mod后返回
            return o12.add(new BigInteger(String.valueOf(mod))).intValue();
        } else return o12.intValue();
    }
    //进行同余原理简化后的代码
    public static int f2(long a,long b,long c,long d,int mod){
        int o1 = (int)(a % mod);
        int o2 = (int)(b % mod);
        int o3 = (int)(c % mod);
        int o4 = (int)(d % mod);
        int o5 = (o1 + o2) % mod;
        int o6 = (o3 - o4 + mod) % mod;
        int o7 = (int)(((long) o1 * o3) % mod);
        int o8 = (int)(((long)o2 * o4) % mod);
        int o9 = (int)(((long)o5 * o6) % mod);
        int o10 = (o7 - o8 + mod) % mod;
        int ans = (o9 + o10) % mod;
        return ans;
    }
}