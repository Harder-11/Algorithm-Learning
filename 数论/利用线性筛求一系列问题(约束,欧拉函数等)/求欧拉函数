#include <bits/stdc++.h>
using namespace std;
using ll = long long;
const int INF = 0x3f3f3f3f;
const int N = 200005;
const int mod = 1e9 + 7;
const double esp = 1e-6;
const int hash = 1331;
const double PI = acos(-1);

/*
定义:1~n中与n互质的个数叫做φ(n)
比如φ(1) = 1,φ(2) = 1,φ(3) = 2,φ(4) = 2,φ(5) = 4;
欧拉函数的性质:
1.若p是质数,那么φ(p) = p - 1
2.若p是质数,那么φ(p^k) = (p - 1) * p^(k - 1)
从1...p...2p...3p...p^k,其中p,2p,3p都和p^k不互质,这样的数一共有p^k/p = p^(k-1)
那么总的满足条件的数就是p^k-p^(k-1)=(p-1)p^(k-1),那么就得到φ(p^k)
3.积性函数:如果gcd(m,n) = 1,那么φ(mn) = φ(n) * φ(m)

整数惟一分解定理亦称算术基本定理，是数论的重要定理之一。
该定理断言：任何一个大于1的整数n都可以分解成若干个素因数的连乘积，
如果不计各个素因数的顺序，那么这种分解是惟一的
欧拉函数的计算公式
由唯一分解定理n = π(i=1,s)pi^ai = p1^a1 * p2^a2 * ...ps^as(p1,p2..ps都是素数)
φ(n) = π(i=1,s)φ(pi^ai) = π(i=1,s)pi^(ai-1)(pi-1) = π(i=1,s)pi^ai * (1-1/pi)
= π(i=1,s)pi^ai * π(i=1,s)(1-1/pi) = n * π(i=1,s)(pi-1)/pi
= n * (p1-1)/p1 * (p2-1)/p2 * ..... * (ps-1)/ps;
所以欧拉函数仅仅由n和质因子决定,与次数无关,比如φ(12) = 12 * (2-1)/2 * (3-1)/3 = 4
*/
//这是利用挨个找质因子求欧拉函数
int find_phi(int n){
    int res = n;
    for(int i = 2;i * i <= n;i++){
        if(n % i == 0){
            res = res / i * (i - 1);
            while(n % i == 0) n /= i;
        }
    }
    //最后有可能剩下一个最大的质数没有处理,最后处理掉这个质数
    //比如phi(700)
    //i=2,此时除完之后n=175
    //i=5,此时除完之后n=7
    //然后i枚举到6,此时i * i > 7,循环停止,但是实际上还有7没有处理,所以最后处理一次
    if(n > 1) res = res / n * (n - 1);
    return res;
}


//利用线性筛发求欧拉函数
//可以在线性时间内求出1~n每个数的欧拉函数
/*
若i是质数,那么phi[i] = i - 1
在线性筛中,每个合数m都是被最小的质因子筛掉的
设pj是m的最小质因子,则m通过m = pj * i筛掉
(1)若i能被pj整除,则i包含了m的所有质因子
(本质就是此时代码中的m = i * pj,那么当i(此时pj是质数(p数组本身就是质数数组))和pj互质(else条件),就满足
积性函数性质,那么φ(m)=φ(i)*φ(j),φ(j) = j-1,如果i能够整除pj,m = pj * i,那么满足下面式子)
φ(m) = m * π(k=1,s)(pk-1)/pk = pj * i * π(k=1,s)(pk-1)/pk = pj * φ(i)
(2)如果i不能被pj整除,则i和pj是互质的
φ(m) = φ(pj * i) = φ(pj) * φ(i) = (pj - 1) * φ(i)
*/
int p[N],vis[N],cnt,phi[N];

void get_phi(int n){
    phi[1] = 1;
    for(int i = 2;i <= n;i++){
        if(!vis[i]){
            p[cnt++] = i;
            phi[i] = i - 1;
        }
        for(int j = 0;i * p[j] <= n;j++){
            int m = i * p[j];
            vis[m] = 1;
            if(i % p[j] == 0){
                phi[m] = p[j] * phi[i];
                break;
            } else {
                phi[m] = (p[j] - 1) * phi[i];
            }
        }
    }
}

void solve(){
    
}

int main(){
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    int t = 1;
    //cin >> t;
    while(t--){
        solve();
    }

    return 0;
}