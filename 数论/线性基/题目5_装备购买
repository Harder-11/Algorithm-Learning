import java.lang.*;
import java.io.*;
import java.util.*;

public class Learn {
    /*
    线性基(下):向量空间线性基,异或空间线性基合并,异或空间线性基和其他内容结合
    题目5:装备购买(p3265)
    一共有n个物品，每个物品都有m个属性值
    下面定义什么是不必要的物品：如果已经选择了k个物品，此时又有一件当前物品
    如果给已经选择的物品分配一组相乘的系数，并把属性值相加，就能得到当前物品
    那么就说当前物品是不必要的，比如下面的例子
    a = { 4, 6, 2 }, b = { 2, 8, 4 }, c = { 6, 19, 9 }
    a * 0.5 + b * 2 = c，那么c物品是不必要的
    每个物品都有价格，现在希望尽量多的购买物品，但不能出现不必要的物品
    返回最多能买几件物品和最少的花费
    1 <= n、m <= 500
    0 <= 属性值 <= 1000

    思路:求线性基(类似于高斯消元加法的消元方法)
    先把花费的值从小到大排序,然后依次从小到大把属性值扔进线性基(basis)中
    只要能扔进去,就说明是必要的物品
     */
    public static int MAXN = 502;
    public static int MAXM = 502;
    public static double sml = 1e-5;
    public static double[][] mat = new double[MAXN][MAXM];
    public static int[] basis = new int[MAXN];
    public static int n,m;
    public static int cnt,cost;
    public static void compute(){
        cnt = cost = 0;
        Arrays.sort(mat,1,n + 1,(a,b)->a[m + 1] <= b[m + 1] ? -1 : 1);
        for(int i = 1;i <= n;i++){
            if(insert(i)){
                cnt++;
                cost += (int)mat[i][m + 1];
            }
        }

    }
    public static boolean insert(int i){
        //从1号位开始看有没有基,如果此时遍历发现mat[i][j]<sml,说明是j号位是0
        //就不能选为基,直接看下一位
        //如果mat[i][j]>=sml,说明此时可以选为基,然后看该号位基上有没有数字
        //如果有数字,那么就进行比例消去该位上的数字,然后看后面的数字
        for(int j = 1;j <= m;j++){
            if(Math.abs(mat[i][j]) >= sml){
                if(basis[j] == 0){
                    basis[j] = i;
                    return true;
                }
                double rate = mat[i][j] / mat[basis[j]][j];
                for(int k = j;k <= m;k++){
                    mat[i][k] -= rate * mat[basis[j]][k];
                }
            }
        }
        return false;
    }
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StreamTokenizer in = new StreamTokenizer(br);
        PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));
        in.nextToken();
        n = (int) in.nval;
        in.nextToken();
        m = (int) in.nval;
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= m; j++) {
                in.nextToken();
                mat[i][j] = in.nval;
            }
        }
        for (int i = 1; i <= n; i++) {
            in.nextToken();
            mat[i][m + 1] = in.nval;
        }
        compute();
        out.println(cnt + " " + cost);
        out.flush();
        out.close();
        br.close();
    }
}



