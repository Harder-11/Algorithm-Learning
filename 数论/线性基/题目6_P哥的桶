import java.lang.*;
import java.io.*;
import java.util.*;

public class Learn {
    /*
    题目6:P哥的桶(p4839)
    一共有n个桶，排成一排，编号1~n，每个桶可以装下任意个数字
    高效的实现如下两个操作
    操作 1 k v : 把数字v放入k号桶中
    操作 2 l r : 可以从l..r号桶中随意拿数字，返回异或和最大的结果
    1 <= n、m <= 5 * 10^4
    0 <= v <= 2^31 - 1

    思路:线段树 + 异或空间线性基
    用线段树维护每个范围内32个基,对于l...r范围内的异或和最大结果,那么就将
    l...r的基提取出来汇总成一个总的线性基,然后求最大异或和
     */
    public static int MAXN = 50001;
    public static int BIT = 30;
    public static int[][] treeBasis = new int[MAXN << 2][BIT + 1];
    public static int[] basis = new int[BIT + 1];
    //单点插入,不需要懒更新
    public static void add(int jobi,int jobv,int l,int r,int i){
        insert(treeBasis[i],jobv);
        if(l < r){
            int mid = (l + r) >> 1;
            if(jobi <= mid){
               add(jobi,jobv,l,mid,i << 1);
            } else {
                add(jobi,jobv,mid + 1,r,i << 1 | 1);
            }
        }
    }
    public static boolean insert(int[] basis,int num){
        for(int i = BIT;i >= 0;i--){
            if(num >> i == 1){
                if(basis[i] == 0){
                    basis[i] = num;
                    return true;
                }
                num ^= basis[i];
            }
        }
        return false;
    }
    public static int query(int jobl,int jobr,int m){
        //注意这里每次查询都要把总基置空
        Arrays.fill(basis,0);
        merge(jobl,jobr,1,m,1);
        int ans = 0;
        for(int j = BIT;j >= 0;j--){
            ans = Math.max(ans,ans ^ basis[j]);
        }
        return ans;
    }
    public static void merge(int jobl,int jobr,int l,int r,int i){
        //将l...r范围内的基汇总到basis总基中
        if(jobl <= l && jobr >= r){
            for(int j = BIT;j >= 0;j--){
                if(treeBasis[i][j] != 0){
                    insert(basis,treeBasis[i][j]);
                }
            }
        } else {
            int mid = (l + r) >> 1;
            if(jobl <= mid){
                merge(jobl,jobr,l,mid,i << 1);
            }
            if(jobr >= mid + 1){
                merge(jobl,jobr,mid + 1,r,i << 1 | 1);
            }
        }
    }

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StreamTokenizer in = new StreamTokenizer(br);
        PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));
        in.nextToken();
        int n = (int) in.nval;
        in.nextToken();
        int m = (int) in.nval;
        for (int i = 1; i <= n; i++) {
            in.nextToken();
            int op = (int) in.nval;
            if (op == 1) {
                in.nextToken();
                int jobi = (int) in.nval;
                in.nextToken();
                int jobv = (int) in.nval;
                add(jobi, jobv, 1, m, 1);
            } else {
                in.nextToken();
                int jobl = (int) in.nval;
                in.nextToken();
                int jobr = (int) in.nval;
                out.println(query(jobl, jobr, m));
            }
        }
        out.flush();
        out.close();
        br.close();
    }
}



