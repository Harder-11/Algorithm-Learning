#include <bits/stdc++.h>
using namespace std;
using ll = long long;
const int INF = 0x3f3f3f3f;
const int N = 4000005;
const int mod = 1e9 + 7;
const double eps = 1e-9;
const int hash = 1331;
const double PI = acos(-1);

/*
快速数论变化(NTT算法)
欧拉定理:若a,m互质,那么a^φ(m) % m = 1
阶的定义:若g,p互质,使得g^n % p = 1的最小正整数n成为g模p的阶,记作δp(g)
原根的定义:
若δp(g) = φ(p)则称g为模p的一个原根
比如说δ7(3) = 6 = φ(7),3就是模7的一个原根 

原根的性质:若g是模p的一个原根,则g^0,g^1...g^(δ-1)在模p意义下两两不同,之后进入周期
例如3^0,3^1....3^5模7两两不同,然后进入周期

原根和模数的选择,为了多次二分,模数应该选择形如q*2^k + 1的质数,其中q为奇素数,k为整数
比如原根是3,模数p可以是469762049 = 7 * 2^26 + 1,最大长度是2^26
因为p是质数,φ(p)=p-1,则g^0,g^1....g^(p-1)在模p下两两不同,从中选择对称的n(2^b)个值(b<=k)
gn^0 = 1,gn^1 = g^(p-1/n),gn^k = g^((p-1)*k/n),...gn^(n-1)
这里对称的g^((p-1)*k/n)指数根据模式的形式,判断出一定是整数
以下步骤均省略mod p
g是模p的原根,gn^k = g^((p-1)*k/n)(k=0,1,2...n-1)

原根的性质(和单位复根的性质完全相同):
1.指数性:gn^k * gn^m = gn^(k + m)
证明:gn^k * gn^m = g((p-1)*k/n) * g((p-1)*m/n)=gn^(k+m)
2.周期性:gn^(k+n) = gn^k
因为gn^n = g(p-1) = g(φ(p))=1(定义)
3.对称性:gn^(k+n/2) = -gn^k
因为(gn^(n/2))^2 = gn^n = 1,所以gn^(n/2)=-1 (即(n-1)%p)
4.折半性gn^(2k) = g(n/2)^k
因为gn^(2k) = g((p-1)*2k/n)=g((p-1)*k/(n/2))=g(n/2)^k

由于性质和FTT一模一样,那么此时正变换NTT对于A(x)只需要把wn^k换成gn^k即可
此时gn^k(k < n/2)代入得:
A(gn^k) = A1(g(n/2)^k) + A2(g(n/2)^k)gn^k
A(gn^(k+n/2))同理,将A2的符号改为-就行
同理:逆变换INTT,ak = zk / n也是成立的
*/

const int P = 998244353;
const int g = 3;
//gi是g的逆元,g是模p的原根
int n,m,gi,ni;
ll A[N],B[N];

ll power(ll a,ll b){
    ll ans = 1;
    while(b){
        if(b & 1) ans = a * ans % P;
        a = a * a % P;
        b >>= 1;
    }
    return ans;
}


void NTT(ll A[],int n,int op){
    if(n == 1) return;
    ll A1[n / 2],A2[n / 2];
    for(int i = 0;i < n / 2;i++){
        A1[i] = A[i * 2],A2[i] = A[i * 2 + 1];
    }
    NTT(A1,n / 2,op);
    NTT(A2,n / 2,op);
    ll g1 = power(op == 1 ? g : gi,(P - 1) / n);
    ll gk = 1;
    for(int i = 0;i < n / 2;i++){
        A[i] = (A1[i] + A2[i] * gk) % P;
        A[i + n / 2] = (A1[i] - A2[i] * gk % P + P) % P;
        gk = gk * g1 % P;
    }
}

void solve(){

}

int main(){
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    int t = 1;
    int i,j;
    cin >> i >> j;
    //cin >> t;
    while(t--){
        solve();
    }
    return 0;
}