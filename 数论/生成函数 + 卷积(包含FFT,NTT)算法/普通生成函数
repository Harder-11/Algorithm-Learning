#include <bits/stdc++.h>
using namespace std;
using ll = long long;
const int INF = 0x3f3f3f3f;
const int N = 200005;
const int mod = 1e9 + 7;
const double esp = 1e-6;
const int hash = 1331;
const double PI = acos(-1);

/*
某个序列a的生成函数是一种形式幂级数,其每一项的系数都可以提供关于这个序列的信息
根据不同的问题,可以构造不同的生成函数,比如普通生成函数,质数生成函数,狄利克雷生成函数

普通生成函数:F(x) = Σ(n>=0)an*x^n
an可以是有穷序列,也可以是无穷序列,例如
序列<1,2,3>的普通生成函数是1+2x+3x^2
序列<1,1,1>的普通生成函数是1+x+x^2+x^3+...=Σ(n>=0)x^n
序列<1,2,4,8>的普通生成函数是1+2x+4x^2+8x^3=Σ(n>=0)2^n*x^n

加减运算
F(x) +/- G(x) = Σ(i>=0)ai*x^i +/- Σ(j>=0)bj*x^j
= Σ(n>=0)(an+/-bn)x^n

乘法运算(卷积)
F(x)G(x) = Σ(i>=0)ai*x^i * Σ(j>=0)bj*x^j
= Σ(n>=0)x^n * Σ(i=0,n)ai * b(n-i)(令i+j=n)
例如当n=3的时候,x^3的系数是a0b3 + a1b2 + a2b1 + a3b0
因此F(x)G(x)是序列<Σ(i=0,n)ai * b(n-i)>的普通生成函数

利用普通生成函数解决多重集组合数的问题
问题:有n种物品,每种物品有ai个,问取m个物品的组合数?
多重集组合数:
设从每种物品中取bi个,0<=bi<=ai,那么m=Σ(i=1,n)bi,对于一组选定的bi组合的方案数是1
例如,取3个A,1个B方案就是(AAAB),取2个A,2个B,方案就是(AABB)
那么所有满足b1+b2+...+bn=m的方案之和就是答案

构造普通生成函数,第一种物品的普通生成函数为(1+x^1+x^2+....+x^a1)
第n种物品的普通生成函数是(1+x^1+x^2+....+x^an)
即(1+x^1+x^2+...+x^a1)(....).....(1+x^1+x^2+...+x^an)求x^m的系数

例题:有n种水果,每种水果的选取的个数在[ai,bi]之间,问买m个水果有多少种购买方案
很板子的一道题:构造生成函数(x^a1+....x^b1)...(x^an....x^bn)
*/

//c数组就是系数数组,d数组是一个辅助数组
//ab数组都是每种水果选购个数的上下界
int a[110],b[110],c[110],d[110];
int n,m;

int calc(){
    //清空系数数组
    for(int i = 0;i <= m;i++){
        c[i] = d[i] = 0;
    }
    //填充第一项的系数,从a[1]到b[1]
    for(int i = a[1];i <= b[1];i++) c[i] = 1;
    //从第二项(第二个括号枚举每一项)
    for(int i = 2;i <= n;i++){
        //计算x^j * x^k的系数,这里影响x^m的只有0次幂到m次幂,所以只枚举0到m
        for(int j = 0;j <= m;j++){
            //这里的k仍然是幂的次数,那么d[j+k] += c[j](3次方可以由0+3,1+2,2+1,3+0(可能,关键是看k的范围是不是[0,3]))
            for(int k = a[i];k <= b[i];k++){
                d[j + k] += c[j];
            }
        }
        for(int j = 0;j <= m;j++){
            c[j] = d[j];
            d[j] = 0;
        }
    }
    return c[m];
}

void solve(){

}

int main(){
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    int t = 1;
    //cin >> t;
    while(t--){
        solve();
    }
    return 0;
}