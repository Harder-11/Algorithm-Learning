import java.lang.*;
import java.io.*;
import java.util.*;

public class Learn {
    /*
    高斯消元解决加法方程组
    思路:每次选绝对值最大的系数交换上来消元,此时来到i行i列,已经成为主元的行不参与比较,自由元
    的行全部参与比较(包括i上方的)
    对于多解/唯一解/无解可以参考线性代数的结论
     */
    public static int MAXN = 101;
    public static double[][] mat = new double[MAXN][MAXN];
    //0.0000001 == 1e-7;
    //因为double类型有精度问题,所以认为,如果一个数字<sml,认为该数字为0
    //如果一个数字>=sml,则认为该数字不是0
    public static double sml = 1e-7;
    public static void swap(int a,int b){
        double[] tmp = mat[a];
        mat[a] = mat[b];
        mat[b] = tmp;
    }
    public static void guess(int n){
        //当前来到i行i列
        for(int i = 1;i <= n;i++){
            int max = i;
            for(int j = 1;j <= n;j++){
                //i上方的行,当是主元,那么continue
                if(j < i && Math.abs(mat[j][j]) >= sml){
                    continue;
                }
                if(Math.abs(mat[j][i]) > Math.abs(mat[max][i])){
                    max = j;
                }
            }
            swap(i,max);
            //换上来的最大系数>0,那么进行消元
            if(Math.abs(mat[i][i]) >= sml){
                double tmp = mat[i][i];
                for(int j = i;j <= n + 1;j++){
                    mat[i][j] /= tmp;
                }
                for(int j = 1;j <= n;j++){
                    if(i != j){
                        double rate = mat[j][i] / mat[i][i];
                        for(int k = i;k <= n + 1;k++){
                            mat[j][k] -= mat[i][k] * rate;
                        }
                    }
                }
            }
        }
    }


    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StreamTokenizer in = new StreamTokenizer(br);
        PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));

        out.flush();
        out.close();
        br.close();
    }
}



