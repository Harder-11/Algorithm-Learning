#include <bits/stdc++.h>
using namespace std;
using ll = long long;
const int INF = 0x3f3f3f3f;
const int N = 200005;
const int mod = 1e9 + 7;
const double esp = 1e-6;
const int hash = 1331;
const double PI = acos(-1);

/*
大组合数的取模问题
给定整数n,m,p,求出C(n,m) mod p的值
其中1 <= m <= n <= 1e18,1 <= p <= 1e5,保证p为质数

卢卡斯定理:C(n,m) 同余于 C(n/p,m/p) * C(n mod p,m mod p) (mod p)
此时n mod p,m mod p都是小于p的数,然后C(n/p,m/p)可以继续用卢卡斯定理求解(递归)
边界条件:当m = 0时,返回1(取0个数的方案都是1)
*/

ll f[N],inv[N];

ll power(ll a,int b,int p){
    ll res = 1;
    while(b){
        if(b & 1) res = res * a % p;
        a = a * a % p;
        b >>= 1;
    }
    return res;
}

void build(int p){
    f[0] = inv[0] = 1;
    for(int i = 1;i <= p;i++){
        f[i] = f[i - 1] * i % p;
        //这样求逆元的复杂度是n + logp,效率更高
        //求单个逆元可以直接power(a[i],p - 2,p)这样效率更高
        inv[i] = inv[i - 1] * power(i,p - 2,p) % p; 
    }
}

ll getC(int n,int m,int p){
    //这里必须特判,因为不知道n % p和m % p的大小关系
    if(n < m) return 0;
    return f[n] * inv[m] % p * inv[n - m] % p;
}

int lucas(ll n,ll m,int p){
    if(m == 0) return 1;
    return lucas(n / p,m / p,p) * getC(n % p,m % p,p) % p;
}

void solve(){
    int n,m,p;
    cin >> n >> m >> p;
    build(p);
    cout << lucas(n + m,n,p) << '\n';

}

int main(){
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    int t = 1;
    cin >> t;
    while(t--){
        solve();
    }
    return 0;
}