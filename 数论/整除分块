#include <bits/stdc++.h>
using namespace std;
using ll = long long;
const int INF = 0x3f3f3f3f;
const int N = 200005;
const int mod = 1e9 + 7;
const double esp = 1e-6;
const int hash = 1331;
const double PI = acos(-1);

/*
整除分块:
求Σ(i=1,n) n/i

注意,后面的n / i都是向下取值之后的结果
性质1:分块的块数 <= 2√n(√n向下取整)
当i <= √n,此时n / i有√n种取值
当i > √n时,n / i <= √n,n / i最多有√n种取值
性质2:i所在块的右端点为n / (n / i)
i所在块的值为k = n / i,那么k <= n / i(不向下取整),则n / k >= n / (n / i) = i(向下取整) = i
所以imax = n / (n / i),代码实现的时候,右端点r = n / (n / l)

那么此时假设要求的是Σ(i=1,n) f(i)(n / i)
那么此时先预处理出f(i)的前缀和s(i) = Σ(j=1,i)f(j)
再枚举每一块[l,r],累加每块的贡献
for(int l = 1;l <= n;l = r + 1){
    r = n / (n / l);
    res += (s(r) - s(l - 1)) * (n / l);
}

对于本题要mod i,1 <= n,k <= 1e9
res = Σ(i=1,n) k % i = Σ(i=1,n)(k - i * (k / i))
= n * k - Σ(i = 1,k)i * (k / i);
后一项对于整个区块[l,r]都是等差数列(每次加上一个i,每个块的值都是一样的)
那么此时Σ(i=1,r)i * (k / l) = (k / l) * Σ(i = 1,r) i
= (k - l) * (r - l + 1) * (l + r) / 2
此时时间复杂度O(√n)
*/


void solve(){
    ll n,k,l,r,res;
    cin >> n >> k;
    res = n * k;
    for(l = 1;l <= n;l = r + 1){
        //此时当k / l == 0,后面全部的块都是0,直接break
        if(k / l == 0) break;
        //防止此时的r超过n
        r = min(k / (k / l),n);
        res -= (k / l) * (r - l + 1) * (l + r) / 2;
    }
    cout << res << '\n';
}

int main(){
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    int t = 1;
    //cin >> t;
    while(t--){
        solve();
    }
    return 0;
}