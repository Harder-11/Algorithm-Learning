#include <bits/stdc++.h>
using namespace std;
using ll = long long;
const int INF = 0x3f3f3f3f;
const int N = 200005;
const int mod = 1e9 + 7;

/*
网络流EK算法求最大流
网络是指一个有向图G=<V,E>,有两个特殊结点,源点S和汇点T
每条有向边(x,y)∈E都有一个权值c(x,y),称为边的容量,如果(x,y)∉E,则c(x,y)=0
用f(x,y)表示边(x,y)上的流量,c(x,y)-f(x,y)称为边的剩余容量
通常用f(x,y)/c(x,y)的形式标记边上的流量和容量
可行流应该满足:
1.容量限制:f(x,y) <= c(x,y)
2.流量限制Σ(S,v)∈E(f(u,x))=Σ(x,v)∈E(f(x,v)),x!=S,x!=T(流入和流出流量守恒)
Σ(S,v)∈E(f(S,v))称为整个网络的流量

最大流:从源点流向汇点的最大流量
增广路:一条从源点到汇点的所有边的剩余容量 >= 0的路径
残留网:由网络中所有节点和剩余容量大于0的边构成的子图,这里的边包括有向边和其反向边
建图时每条有向边(x,y)都构建一条反向边(y,x),初始容量c(y,x)=0,构建反向边的目的是
提供一个"退流管道",一旦前面的增广路堵死可行流,可以通过退流管道退流,提供的后悔机制

对于EK算法:过程如下
e[i]:存第i条出边{v,c,ne}(链式前向星)
h[u]:存u的第一条出边
mf[v]:存S~v路径上的流量上限
pre[v]:存v的前驱边

bfs找增广路(最短路思想)
1.初始化mf[i]=0,mf[S]=INF,S入队
2.只要队不空,u点出队
(1)枚举u的所有出边,更新u的最小容量,记录前驱边,扩展儿子入队
(2)若能走到T,那么返回true
(3)若不能走到T,那么返回false

EK求最大流(类似挤牙膏)
循环找增广路,每找到一条
(1)逆序更新残留网,容量"此消彼长"
(2)累加可行流,最后返回最大流

*/

struct edge {
    ll to,c,nxt;
} e[N];
int head[N],idx = 1;
ll mf[N],pre[N];
int S,T,n,m,u,v,w;

void add(int u,int v,int w){
    e[++idx] = {v,w,head[u]};
    head[u] = idx;
}

//找增广路
bool bfs(){
    memset(mf,0,sizeof mf);
    std::queue<int> q;
    q.push(S);
    mf[S] = INF;
    while(q.size()){
        int u = q.front();
        q.pop();
        for(int i = head[u];i;i = e[i].nxt){
            ll v = e[i].to;
            //此时v节点没有被访问过,并且u到v的有向边的权值大于0才进行if语句中的内容
            if(mf[v] == 0 && e[i].c){
                mf[v] = min(mf[u],e[i].c);
                //存的前驱边
                pre[v] = i;
                q.push(v);
                if(v == T) return true;
            }
        }
    }
    return false;
}

//EK算法倒推更新残留网
ll EK(){
    ll flow = 0;
    while(bfs()){
        int v = T;
        while(v != S){
            int i = pre[v];
            e[i].c -= mf[T];
            e[i ^ 1].c += mf[T];
            //倒着往前推
            v = e[i ^ 1].to;
        }
        flow += mf[T];
    }
    return flow;
}

void solve(){
    cin >> n >> m >> S >> T;
    while(m--){
        cin >> u >> v >> w;
        add(u,v,w);
        add(v,u,0);
    }
    cout << EK() << endl;
}

int main(){
    int t = 1;
    //cin >> t;
    while(t--){
        solve();
    }
    return 0;
}