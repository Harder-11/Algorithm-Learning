import java.io.*;
import java.math.*;
import java.util.*;


public class learn {
    //拓扑排序技巧,利用拓扑排序的过程,上游结点逐渐推送消息给下游结点的技巧(树形dp)
    /*
    例题1:最大食物链计数
    a->b,代表a在食物链被捕食
    给定一个有向无环图,返回这个图从最低级动物到最顶级捕食者的食物链有几条

    思路:创建一个数组代表每一种生物,对于食物链最底层的,在数组中将其全部置为1,表示其之前只有自己这一条路径
    其余元素全部置为0,对于每一个生物,把所有能捕食自己的生物全部加上自己本身的数值,然后拓扑排序最后一层的
    点的累加和就是答案(本质就是一个树形dp)
     */
    public static int MAXN = 5001;
    public static int MAXM = 500001;
    public static int MOD = 80112002;
    public static int[] head = new int[MAXN];
    public static int[] next = new int[MAXM];
    public static int[] to = new int[MAXM];
    public static int cnt;
    public static int[] queue = new int[MAXN];
    public static int[] indegree = new int[MAXN];
    //需要推送的消息
    public static int[] lines = new int[MAXN];
    public static int n,m;
    public static void build(int n){
        cnt = 1;
        Arrays.fill(indegree,0);
        Arrays.fill(lines,0);
        Arrays.fill(head,0);
    }
    public static void addEdge(int u,int v){
        next[cnt] = head[u];
        to[cnt] = v;
        head[u] = cnt++;
    }

    public static void main(String[] args)throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StreamTokenizer in = new StreamTokenizer(br);
        PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));
        while(in.nextToken() != StreamTokenizer.TT_EOF){
            n = (int) in.nval;
            in.nextToken();
            m = (int) in.nval;
            build(n);
            for(int i = 0,u,v;i < m;i++){
                in.nextToken();
                u = (int) in.nval;
                in.nextToken();
                v = (int) in.nval;
                addEdge(u,v);
                indegree[v]++;
            }
            out.println(ways());
        }
        out.flush();
        out.close();
        br.close();
    }
    public static int ways(){
        int l = 0;
        int r = 0;
        for(int i = 1;i <= n;i++){
            if(indegree[i] == 0){
                queue[r++] = i;
                lines[i] = 1;
            }
        }
        int ans = 0;
        while(r > l){
            int u = queue[l++];
            if(head[u] == 0){
                ans = (ans + lines[u]) % MOD;
            } else {
                for(int ei = head[u],v;ei != 0;ei = next[ei]){
                    v = to[ei];
                    lines[v] = (lines[v] + lines[u]) % MOD;
                    if(--indegree[v] == 0){
                        queue[r++] = v;
                    }
                }
            }
        }
        return ans;
    }
    /*
    例题2:喧闹和富有
    有一组 n 个人作为实验对象，从 0到n - 1 编号其中每个人都有不同数目的钱，以及不同程度的安静值（quietness）
    为了方便起见，我们将编号为 x 的人简称为 "person x "。
    给你一个数组 richer ，其中 richer[i] = [ai, bi] 表示 person ai 比 person bi 更有钱。
    另给你一个整数数组 quiet ，其中 quiet[i] 是 person i 的安静值。richer 中所给出的数据 逻辑自洽
    (也就是说，在 person x 比 person y 更有钱的同时，不会出现 person y 比 person x 更有钱的情况)。
    现在，返回一个整数数组 answer 作为答案，其中 answer[x] = y 的前提是，
    在所有拥有的钱肯定不少于 person x 的人中，person y 是最不安静的人（也就是安静值 quiet[y] 最小的人）。

    思路:就是建图之后,每个结点寻找之前结点的安静度最小的一个结点建立一个ans数组,初始化ans[i] = i数组
    然后进行拓扑排序,每次入度为0的结点的quite值推向所有链接的下一个结点,然后进行比较,此时下一个结点的值就等于更小的那个

     */
    public int[] loudAndRich(int[][] richer, int[] quiet) {
        int n = quiet.length;
        ArrayList<ArrayList<Integer>> graph = new ArrayList<>();
        for(int i = 0;i < n;i++){
            graph.add(new ArrayList<>());
        }
        int[] indegree = new int[n];
        for(int[] r : richer){
            graph.get(r[0]).add(r[1]);
            indegree[r[1]]++;
        }
        int[] queue = new int[n];
        int l = 0;
        int r = 0;
        for(int i = 0;i < n;i++){
            if(indegree[i] == 0){
                queue[r++] = i;
            }
        }
        int[] ans = new int[n];
        for(int i = 0;i < n;i++){
            ans[i] = i;
        }
        while(r > l){
            int cur = queue[l++];
            for(int next : graph.get(cur)){
                if(quiet[ans[next]] > quiet[ans[cur]]){
                    ans[next] = ans[cur];
                }
                if(--indegree[next] == 0){
                    queue[r++] = next;
                }
            }
        }
        return ans;
    }
    /*
    并行课程:
    给你一个整数 n ，表示有 n 节课，课程编号从 1 到 n 。
    同时给你一个二维整数数组 relations ，其中 relations[j] = [prevCoursej, nextCoursej]
    表示课程 prevCoursej 必须在课程 nextCoursej 之前 完成（先修课的关系）。
    同时给你一个下标从0开始的整数数组time,其中time[i]表示完成第 (i+1) 门课程需要花费的月份数。
    请你根据以下规则算出完成所有课程所需要的 最少 月份数：
    如果一门课的所有先修课都已经完成，你可以在 任意 时间开始这门课程。
    你可以 同时 上 任意门课程 。
    请你返回完成所有课程所需要的 最少 月份数。
    注意：测试数据保证一定可以完成所有课程（也就是先修课的关系构成一个有向无环图）。

    同样类似于树形dp,先创建一个数组,每个结点的值初始化为0,表示此时开始学习时的月份,对于入度为0
    的点,将自己的time中的值 + 数组中的值与它连接的下面的结点作比较,取更大值(因为要所有的前置
    任务做完后才能做该课程)
     */
    public int minimumTime(int n, int[][] relations, int[] time) {
        //由于点是1~n,那么建立n + 1个list,0下标弃而不用
        ArrayList<ArrayList<Integer>> graph = new ArrayList<>();
        for(int i = 0;i <= n;i++){
            graph.add(new ArrayList<>());
        }
        int[] indegree = new int[n + 1];
        for(int[] edge : relations){
            graph.get(edge[0]).add(edge[1]);
            indegree[edge[1]]++;
        }
        int[] queue = new int[n];
        int l = 0;
        int r = 0;
        for(int i = 1;i <= n;i++){
            if(indegree[i] == 0){
                queue[r++] = i;
            }
        }
        int[] cost = new int[n + 1];
        int ans = 0;
        while(r > l){
            int cur = queue[l++];
            cost[cur] += time[cur - 1];
            //ans是通过每次和cost[cur]比较来更新,不能直接+= time[cur - 1]
            //因为最后可能同时剩下多个入度为0的点
            ans = Math.max(ans,cost[cur]);
            for(int next : graph.get(cur)){
                cost[next] = Math.max(cost[next],cost[cur]);
                if(--indegree[next] == 0){
                    queue[r++] = next;
                }
            }
        }
        return ans;
    }
    /*
    参加会议最多的员工数(基环树)
    一个公司准备组织一场会议,邀请名单上有n位员工.公司准备了一张圆形的桌子，可以坐下任意数目的员工。
    员工编号为0到n-1.每位员工都有一位喜欢的员工,每位员工当且仅当他被安排在喜欢员工的旁边他才会参加会议。
    每位员工喜欢的员工不会是他自己。
    给你一个下标从 0 开始的整数数组 favorite,其中 favorite[i]表示第 i 位员工喜欢的员工。
    请你返回参加会议的 最多员工数目 。

    思路分析:此时的favourite数组实际上就是一张图,对于一个小环(比如说2->3,3->2),那么就现将小环安排好
    然后寻找最长的两条链,但是这道题的图不一定联通度为1,有可能是森林,存在多个小环,也可能不存在小环,
    对于多个小环,那么就将所有小环加上其相连的两条最长链加起来即可
    但是对于一个大环(n >= 3)比如说a->b,b->c,c->a,此时只能安排环的所有人,对于多个大环,就取更大的那个大环
     */
    public int maximumInvitations(int[] favorite) {
        //favourite本身就代表图,所以不同建图了
        int n = favorite.length;
        int[] indegree = new int[n];
        for(int i = 0;i < n;i++){
            indegree[favorite[i]]++;
        }
        int[] queue = new int[n];
        int l = 0;
        int r = 0;
        //开始推每条链的最大深度
        for(int i = 0;i < n;i++){
            if(indegree[i] == 0){
                queue[r++] = i;
            }
        }
        //deep[i]:不包括i在内,i之前最长链长度
        int[] deep = new int[n];
        while(l < r){
            int cur = queue[l++];
            int next = favorite[cur];
            deep[next] = Math.max(deep[next],deep[cur] + 1);
            if(--indegree[next] == 0){
                queue[r++] = next;
            }
        }
        //目前,图中的点,不在环上的都删除了,因为不在环上的点,入度最终肯定会变成0
        //indegree[i] = 0就代表被删除了
        //可能性1:所有小环(中心个数 = 2),算上中心点+延伸出最长的两条链
        //可能性2:所有大环(中心个数 > 2),只算中心点,最大环的中心点个数
        int sumOfSmallRings = 0;
        int bigRings = 0;
        for(int i = 0;i < n;i++){
            if(indegree[i] > 0){
                int ringSize = 1;
                indegree[i] = 0;
                for(int j = favorite[i];j != i;j = favorite[j]){
                    ringSize++;
                    indegree[j] = 0;
                }
                if(ringSize == 2){
                    sumOfSmallRings += 2 + deep[i] + deep[favorite[i]];
                } else {
                    bigRings = Math.max(bigRings,ringSize);
                }
            }
        }
        return Math.max(bigRings,sumOfSmallRings);
    }
}