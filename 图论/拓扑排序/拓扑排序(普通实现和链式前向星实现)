import java.io.*;
import java.math.*;
import java.util.*;


public class learn {
    /*
    拓扑排序:
    要求:有向图并且没有环
    拓扑排序的顺序可能不止一种,拓扑排序也可以用来判断有没有环
    (1)在图中找到入度为0的点
    (2)把所有入度为0的点删掉,重点是删掉影响,继续找到入度为0的点并删掉影响
    (3)直到所有点都被删掉,依次删除的顺序就是正确的拓扑排序的结果
    (4)如果无法把所有的点都删掉,说明有向图里面有环
     */
    /*
    例题:课程表
    现在你总共有 numCourses门课需要选,记为0到numCourses - 1。
    给你一个数组 prerequisites,其中 prerequisites[i] = [ai, bi] ，表示在选修课程ai前必须先选修 bi 。
    例如，想要学习课程 0 ，你需要先完成课程 1 ，我们用一个匹配来表示：[0,1]
    返回你为了学完所有课程所安排的学习顺序。可能会有多个正确的顺序，你只要返回 任意一种 就可以了。
    如果不可能完成所有课程,返回一个空数组 。

    思路:就是一个拓扑排序,但是要注意这道题的依赖关系的反着的
     */
    public static int[] findOrder(int numCourses,int[][] prerequisites){
        ArrayList<ArrayList<Integer>> graph = new ArrayList<>();
        for(int i = 0;i < numCourses;i++){
            graph.add(new ArrayList<>());
        }
        //入度表,在建图的过程中同时把每个节点的入度统计出来
        int[] indegree = new int[numCourses];
        for(int[] edge : prerequisites){
            graph.get(edge[1]).add(edge[0]);
            indegree[edge[0]]++;
        }
        int[] queue = new int[numCourses];
        int l = 0,r = 0;
        for(int i = 0;i < numCourses;i++){
            if(indegree[i] == 0){
                queue[r++] = i;
            }
        }
        while(l < r){
            int cur = queue[l++];
            for(int next : graph.get(cur)){
                if(--indegree[next] == 0){
                    queue[r++] = next;
                }
            }
        }
        return l == numCourses ? queue : new int[0];
    }
    /*
    拓扑排序的链式前向星模版
     */
    public static int MAXN = 200001;
    public static int MAXM = 200001;
    public static int[] head = new int[MAXN];
    public static int[] next = new int[MAXM];
    public static int[] to = new int[MAXM];
    public static int cnt;
    //拓扑排序用队列
    public static int[] queue = new int[MAXN];
    public static int l,r;
    public static int[] indegree = new int[MAXN];
    public static int[] ans = new int[MAXN];
    public static int n,m;
    public static void build(int n){
        cnt = 1;
        Arrays.fill(head,0);
        Arrays.fill(indegree,0);
    }
    public static void addEdge(int f,int t){
        next[cnt] = head[f];
        to[cnt] = t;
        head[f] = cnt++;
    }
    public static boolean topoSort(){
        l = r = 0;
        for(int i = 1;i <= n;i++){
            if(indegree[i] == 0){
                queue[r++] = i;
            }
        }
        int fill = 0;
        while(l < r){
            int cur = queue[l++];
            ans[fill++] = cur;
            for(int ei = head[cur];ei != 0;ei = next[ei]){
                if(--indegree[to[ei]] == 0){
                    queue[r++] = to[ei];
                }
            }
        }
        return fill == n;
    }

    public static void main(String[] args)throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StreamTokenizer in = new StreamTokenizer(br);
        PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));
        while(in.nextToken() != StreamTokenizer.TT_EOF){
            n = (int) in.nval;
            in.nextToken();
            m = (int) in.nval;
            build(n);
            for(int i = 0,from,to;i < m;i++){
                in.nextToken();
                from = (int) in.nval;
                in.nextToken();
                to = (int) in.nval;
                addEdge(from,to);
                indegree[to]++;
            }
            if(!topoSort()){
                out.println(-1);
            } else {
                for(int i = 0;i < n - 1;i++){
                    out.print(ans[i] + " ");
                }
                out.println(ans[n - 1]);
            }
        }
        out.flush();
        out.close();
        br.close();
    }
}