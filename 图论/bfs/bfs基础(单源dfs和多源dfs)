import java.io.*;
import java.math.*;
import java.nio.Buffer;
import java.util.*;
import java.lang.*;


public class learn {
    /*
    宽度优先遍历(bfs)及其扩展
    内容:
    1.单源,多源宽度优先遍历基本过程
    2.01bfs,宽度优先遍历与双端队列结合
    3.宽度优先遍历与优先级队列结合
    4.宽度优先遍历和深度优先遍历结合,去生成路径
    特点:逐层扩散,从源头点到目标点扩散了几层,最短路就是多少
    可以使用的特征是:任意两个节点之间的相互距离相同(无向图)
    bfs开始时,可以是单个源头,也可以是多个源头
    bfs频繁使用队列,形式可以是单点弹出,也可以是整层弹出
    bfs进行时,进入队列的结点要标记状态,防止同一个结点重复进出队列
    bfs进行时,可能会包含剪枝策略的设计
     */
    /*
    例题:地图分析:
    你现在手里有一份大小为 n x n 的 网格 grid，上面的每个 单元格 都用 0 和 1 标记好了。
    其中 0 代表海洋，1 代表陆地。
    请你找出一个海洋单元格，这个海洋单元格到离它最近的陆地单元格的距离是最大的，并返回该距离。
    如果网格上只有陆地或者海洋，请返回 -1。
    我们这里说的距离是「曼哈顿距离」（ Manhattan Distance）：
    (x0, y0) 和 (x1, y1) 这两个单元格之间的距离是 |x0 - x1| + |y0 - y1| 。

    思路:多源bfs:将每个陆地都进行bfs,每往外扩一层,就标记为本层+1,然后找到最远距离
    并且按整层弹出来bfs
     */
    public static int MAXN = 101;
    //queue有两列是因为添加的元素是坐标
    public static int[][] queue = new int[MAXN * MAXN][2];
    public static int l,r;
    public static boolean[][] visited = new boolean[MAXN][MAXN];
    //每次(x,y)都是x + move[i],y + move[i + 1]
    //当i来到0位置,那么x + move[i],y + move[i + 1],就向上走
    //当i来到1,此时向右走;i来到2,向下走;i来到3,向左走
    public static int[] move = new int[]{-1,0,1,0,-1};
    public static int maxDistance(int[][] grid){
        l = r = 0;
        int n = grid.length;
        int seas = 0;
        for(int i = 0;i < n;i++){
            for(int j = 0;j < n;j++){
                if(grid[i][j] == 1){
                    visited[i][j] = true;
                    queue[r][0] = i;
                    queue[r++][1] = j;
                } else {
                    visited[i][j] = false;
                    seas++;
                }
            }
        }
        if(seas == 0 || seas == n * n){
            return -1;
        }
        int level = 0;
        while(l < r){
            level++;
            int size = r - l;
            for(int k = 0,x,y,nx,ny;k < size;k++){
                x = queue[l][0];
                y = queue[l++][1];
                for(int i = 0;i < 4;i++){
                    nx = x + move[i];
                    ny = y + move[i + 1];
                    if(nx >= 0 && ny >= 0 && nx < n && ny < n && grid[nx][ny] == 0 && !visited[nx][ny]){
                        visited[nx][ny] = true;
                        queue[r][0] = nx;
                        queue[r++][1] = ny;
                    }
                }
            }
        }
        return level - 1;
    }
    /*
    贴纸拼词
    我们有 n 种不同的贴纸。每个贴纸上都有一个小写的英文单词。
    您想要拼写出给定的字符串 target ，方法是从收集的贴纸中切割单个字母并重新排列它们。
    如果你愿意，你可以多次使用每个贴纸，每个贴纸的数量是无限的。
    返回你需要拼出 target 的最小贴纸数量。如果任务不可能，则返回 -1 。
    注意：在所有的测试用例中，所有的单词都是从 1000 个最常见的美国英语单词中随机选择的，
    并且 target 被选择为两个随机单词的连接。

    思路:转化为,每使用一张贴纸剩余的字符就是下一层,问题就转化为,当剩余是一张空字符串时,此时在第几层?
     */
    public static int MAXN1 = 401;
    public static String[] queue1 = new String[MAXN1];
    public static int left,right;
    //下标0->a
    //下标1->b
    //...
    //下标25->z
    //有哪个贴纸能搞定某个字符,那么这个贴纸就在这个字符的邻接表里
    public static ArrayList<ArrayList<String>> graph1 = new ArrayList<>();
    static {
        for(int i = 0;i < 26;i++){
            graph1.add(new ArrayList<>());
        }
    }
    public static Set<String> visited1 = new HashSet<>();
    //将字符串按照字典序最小来排序
    public static String sort(String str){
        char[] s = str.toCharArray();
        Arrays.sort(s);
        return String.valueOf(s);
    }
    //next方法:将t字符串消去s字符串中相同的字符
    public static String next(String t,String s){
        StringBuilder sb = new StringBuilder();
        for(int i = 0,j = 0;i < t.length();){
            //相当于s走到底了,就将t后面所有的字符拼接上
            if(j == s.length()){
                sb.append(t.charAt(i++));
                //否则的话,如果t此时对于的ASCII码更小的话,说明此时已经无法将该字符消去,所以直接添上
            } else {
                if(t.charAt(i) < s.charAt(j)){
                    sb.append(t.charAt(i++));
                    //如果t字符的ASCII码更大的话,就一直将s的指针往后移动,看有没有和t一样的字符
                } else if(t.charAt(i) > s.charAt(j)){
                    j++;
                    //如果两个字符相同,都++
                } else {
                    i++;
                    j++;
                }
            }
        }
        return sb.toString();
    }

    public int minStickers(String[] stickers, String target) {
        for(int i = 0;i < 26;i++){
            graph1.get(i).clear();
        }
        visited1.clear();
        for(String str : stickers){
            str = sort(str);
            for(int i = 0;i < str.length();i++){
                //对于每一个字符串,首字符肯定要加入图中,因为此时不可能有重复字符
                //然后str.charAt(i) != str.charAt(i - 1)是去重处理
                if(i == 0 || str.charAt(i) != str.charAt(i - 1)){
                    graph1.get(str.charAt(i) - 'a').add(str);
                }
            }
        }
        target = sort(target);
        visited1.add(target);
        left = right = 0;
        queue1[right++] = target;
        int level = 0;
        while(left < right){
            int size = right - left;
            for(int i = 0;i < size;i++){
                String cur = queue1[left++];
                //每次搞定首字母
                for(String s : graph1.get(cur.charAt(0) - 'a')){
                    //next方法就是cur 减去 s中包含cur的字符后得到的结果
   // 如果得到的结果是空字符串,那么说明此时正好就可以满足题意,将target的字母全部由贴纸拼出,直接返回
                    //否则的话,就将此时的next字符串标记为已经处理过,然后加入队列中
                    String next = next(cur,s);
                    if(next.equals("")){
                        return level + 1;
                    } else if(!visited1.contains(next)){
                        visited1.add(next);
                        queue1[right++] = next;
                    }
                }
            }
            level++;
        }
        return -1;
    }
}
