import java.io.*;
import java.math.*;
import java.util.*;


public class learn {
    /*
    洪水填充:在递归过程中进行剪枝和统计,类似于感染的过程(比如用check数组来表示该点是否查询过)
    看似递归,实际上复杂度很低,遍历次数和样本规模一致
     */
    /*
    岛屿数量
    给一个board数组,由0和1组成,1表示陆地,0表示水,岛屿被水包围,问一个由多少个岛屿?

    思路:遍历整个数组,一旦发现1出现就dfs,把所有连着的1都变成2,然后计数++;
    复杂度O(m * n)
     */
    public static int numIslands(char[][] board){
        int ans = 0;
        for(int i = 0;i < board.length;i++){
            for(int j = 0;j < board[0].length;j++){
                if(board[i][j] == '1'){
                    ans++;
                    dfs(board,i,j);
                }
            }
        }
        return ans;
    }
    public static void dfs(char[][] board,int i,int j){
        if(i < 0 || i == board.length || j < 0 || j == board[0].length || board[i][j] != '1'){
            return;
        }
        board[i][j] = 2;
        dfs(board,i - 1,j);
        dfs(board,i + 1,j);
        dfs(board,i,j - 1);
        dfs(board,i,j + 1);
    }
    /*
    最大人工岛:
    给你一个大小为 n x n二进制矩阵 grid.最多只能将一格0变成 1 。
    返回执行此操作后，grid中最大的岛屿面积是多少？
    岛屿由一组上、下、左、右四个方向相连的1形成。

    思路:使用dfs把每一块岛的所有1换成编号,编号从2开始(这样是为了分清楚每个点到底属于哪个岛屿,如果某个0点的周围有多个1
    那么就可能重复计算一个岛屿的总数目多次,但是这些0都属于一个岛),然后遍历所有的0
     */
    public static int largestIsland(int[][] grid){
        int n = grid.length;
        int m = grid[0].length;
        int id = 2;
        for(int i = 0;i < n;i++){
            for(int j = 0;j < m;j++){
                if(grid[i][j] == 1){
                    dfs(grid,n,m,i,j,id++);
                }
            }
        }
        int[] sizes = new int[id];
        int ans = 0;
        for(int i = 0;i < n;i++){
            for(int j = 0;j < m;j++){
                if(grid[i][j] > 1){
                    ans = Math.max(ans,++sizes[grid[i][j]]);
                }
            }
        }

        //讨论所有的0变成1之后能带来的最大收益
        //visited数组的作用:防止一个0的周围有多个一样的数但是来自同一个岛,这样会重复计算
        boolean[] visited = new boolean[id];
        int up,down,left,right,merge;
        for(int i = 0;i < n;i++){
            for(int j = 0;j < m;j++){
                if(grid[i][j] == 0){
                    up = i > 0 ? grid[i - 1][j] : 0;
                    down = i < n - 1? grid[i + 1][j] : 0;
                    left = j > 0 ? grid[i][j - 1] : 0;
                    right = j < m - 1 ? grid[i][j + 1] : 0;
                    //随便选一个方向置为true,然后merge = 1(当前的0变成1) + 该方向的size
                    visited[up] = true;
                    merge = 1 + sizes[up];
                    if(!visited[down]){
                        merge += sizes[down];
                        visited[down] = true;
                    }
                    if(!visited[left]){
                        merge += sizes[left];
                        visited[left] = true;
                    }
                    if(!visited[right]){
                        merge += sizes[right];
                        visited[right] = true;
                    }
                    ans = Math.max(ans,merge);
                    //重新将visited数组置为false
                    visited[up] = visited[down] = visited[left] = visited[right] = false;
                }

            }
        }
        return ans;
    }
    public static void dfs(int[][] grid,int n,int m,int i,int j,int id){
        if(i < 0 || i == n || j < 0 || j == m || grid[i][j] != 1){
            return;
        }
        grid[i][j] = id;
        dfs(grid,n,m,i - 1,j,id);
        dfs(grid,n,m,i + 1,j,id);
        dfs(grid,n,m,i,j - 1,id);
        dfs(grid,n,m,i,j + 1,id);
    }
    /*
    打砖块
    有一个 m x n 的二元网格 grid ，其中 1 表示砖块，0 表示空白。砖块稳定（不会掉落）的前提是：
    一块砖直接连接到网格的顶部，或者至少有一块相邻（4 个方向之一）砖块 稳定 不会掉落时
    给你一个数组 hits ，这是需要依次消除砖块的位置。每当消除 hits[i] = (rowi, coli) 位置上的砖块时，
    对应位置的砖块（若存在）会消失，然后其他的砖块可能因为这一消除操作而掉落 。
    一旦砖块掉落，它会立即从网格 grid 中消失（即，它不会落在其他稳定的砖块上）。
    返回一个数组 result ，其中 result[i] 表示第 i 次消除操作对应掉落的砖块数目。
    注意，消除可能指向是没有砖块的空白位置，如果发生这种情况，则没有砖块掉落。

    思路:本质就是和第0行通过1连接起来的砖块(所有的1都吊在天花板上)
    先将所有的hits的点位置-1,然后洪水填充,将所有与天花板链接的1变成2
    使用技巧:时光倒流,处理炮弹从后往前处理,每次把炮弹的落点位置+1,如果是1,那么看周围有没有2,如果有,那么就
    在周围dfs找1,看有多少个1连在一起
     */
    public static int n,m;
    public static int[][] grid;
    public static int[] hitBricks(int[][] g,int[][] h){
        grid = g;
        n = g.length;
        m = g[0].length;
        int[] ans = new int[h.length];
        if(n == 1){
            return ans;
        }
        for(int[] hit : h){
            grid[hit[0]][hit[1]]--;
        }
        for(int i = 0;i < m;i++){
            //这里的dfs只是为了让所有连上天花板的1都变成2
            dfs(0,i);
        }
        for(int i = h.length - 1,row,col;i >= 0;i--){
            row = h[i][0];
            col = h[i][1];
            grid[row][col]++;
            if(worth(row,col)){
                //-1是因为自己本身这个格子是碎掉的
                ans[i] = dfs(row,col) - 1;
            }
        }
        return ans;
    }
    //从(i,j)出发,遇到1就感染2
    //统计新增了几个2
    public static int dfs(int i,int j){
        if(i < 0 || i == n || j < 0 || j == m || grid[i][j] != 1){
            return 0;
        }
        grid[i][j] = 2;
        return 1 + dfs(i + 1,j) + dfs(i,j + 1) + dfs(i - 1,j) + dfs(i,j - 1);
    }
    public static boolean worth(int i,int j){
        return grid[i][j] == 1 &&
                (i == 0
                        ||(i > 0 && grid[i - 1][j] == 2)
                        ||(i < n - 1 && grid[i + 1][j] == 2)
                        ||(j > 0 && grid[i][j - 1] == 2)
                        ||(j < m - 1 && grid[i][j + 1] == 2)
                );
    }
}
